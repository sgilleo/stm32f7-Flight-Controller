
stm32f7-Flight-Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123b8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08012598  08012598  00013598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080129c0  080129c0  000142d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080129c0  080129c0  000139c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080129c8  080129c8  000142d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080129c8  080129c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080129cc  080129cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  080129d0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002098  200002d4  08012ca4  000142d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000236c  08012ca4  0001436c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b6f  00000000  00000000  00014304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050a9  00000000  00000000  00037e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  0003cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016c0  00000000  00000000  0003ec90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029510  00000000  00000000  00040350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028e5a  00000000  00000000  00069860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb985  00000000  00000000  000926ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e03f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c60  00000000  00000000  0017e084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00186ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012580 	.word	0x08012580

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002d8 	.word	0x200002d8
 800021c:	08012580 	.word	0x08012580

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b988 	b.w	8001000 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	468e      	mov	lr, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	4688      	mov	r8, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d962      	bls.n	8000de4 <__udivmoddi4+0xdc>
 8000d1e:	fab2 f682 	clz	r6, r2
 8000d22:	b14e      	cbz	r6, 8000d38 <__udivmoddi4+0x30>
 8000d24:	f1c6 0320 	rsb	r3, r6, #32
 8000d28:	fa01 f806 	lsl.w	r8, r1, r6
 8000d2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d30:	40b7      	lsls	r7, r6
 8000d32:	ea43 0808 	orr.w	r8, r3, r8
 8000d36:	40b4      	lsls	r4, r6
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	fa1f fc87 	uxth.w	ip, r7
 8000d40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d44:	0c23      	lsrs	r3, r4, #16
 8000d46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d5c:	f080 80ea 	bcs.w	8000f34 <__udivmoddi4+0x22c>
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f240 80e7 	bls.w	8000f34 <__udivmoddi4+0x22c>
 8000d66:	3902      	subs	r1, #2
 8000d68:	443b      	add	r3, r7
 8000d6a:	1a9a      	subs	r2, r3, r2
 8000d6c:	b2a3      	uxth	r3, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7e:	459c      	cmp	ip, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x8e>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d88:	f080 80d6 	bcs.w	8000f38 <__udivmoddi4+0x230>
 8000d8c:	459c      	cmp	ip, r3
 8000d8e:	f240 80d3 	bls.w	8000f38 <__udivmoddi4+0x230>
 8000d92:	443b      	add	r3, r7
 8000d94:	3802      	subs	r0, #2
 8000d96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9a:	eba3 030c 	sub.w	r3, r3, ip
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11d      	cbz	r5, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40f3      	lsrs	r3, r6
 8000da4:	2200      	movs	r2, #0
 8000da6:	e9c5 3200 	strd	r3, r2, [r5]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d905      	bls.n	8000dbe <__udivmoddi4+0xb6>
 8000db2:	b10d      	cbz	r5, 8000db8 <__udivmoddi4+0xb0>
 8000db4:	e9c5 0100 	strd	r0, r1, [r5]
 8000db8:	2100      	movs	r1, #0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e7f5      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dbe:	fab3 f183 	clz	r1, r3
 8000dc2:	2900      	cmp	r1, #0
 8000dc4:	d146      	bne.n	8000e54 <__udivmoddi4+0x14c>
 8000dc6:	4573      	cmp	r3, lr
 8000dc8:	d302      	bcc.n	8000dd0 <__udivmoddi4+0xc8>
 8000dca:	4282      	cmp	r2, r0
 8000dcc:	f200 8105 	bhi.w	8000fda <__udivmoddi4+0x2d2>
 8000dd0:	1a84      	subs	r4, r0, r2
 8000dd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	4690      	mov	r8, r2
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d0e5      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000dde:	e9c5 4800 	strd	r4, r8, [r5]
 8000de2:	e7e2      	b.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f000 8090 	beq.w	8000f0a <__udivmoddi4+0x202>
 8000dea:	fab2 f682 	clz	r6, r2
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f040 80a4 	bne.w	8000f3c <__udivmoddi4+0x234>
 8000df4:	1a8a      	subs	r2, r1, r2
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	b280      	uxth	r0, r0
 8000dfe:	b2bc      	uxth	r4, r7
 8000e00:	2101      	movs	r1, #1
 8000e02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x11e>
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x11c>
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	f200 80e0 	bhi.w	8000fe4 <__udivmoddi4+0x2dc>
 8000e24:	46c4      	mov	ip, r8
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e34:	fb02 f404 	mul.w	r4, r2, r4
 8000e38:	429c      	cmp	r4, r3
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x144>
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x142>
 8000e44:	429c      	cmp	r4, r3
 8000e46:	f200 80ca 	bhi.w	8000fde <__udivmoddi4+0x2d6>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	1b1b      	subs	r3, r3, r4
 8000e4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e52:	e7a5      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e54:	f1c1 0620 	rsb	r6, r1, #32
 8000e58:	408b      	lsls	r3, r1
 8000e5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e5e:	431f      	orrs	r7, r3
 8000e60:	fa0e f401 	lsl.w	r4, lr, r1
 8000e64:	fa20 f306 	lsr.w	r3, r0, r6
 8000e68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e70:	4323      	orrs	r3, r4
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	fa1f fc87 	uxth.w	ip, r7
 8000e7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e7e:	0c1c      	lsrs	r4, r3, #16
 8000e80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	d909      	bls.n	8000ea8 <__udivmoddi4+0x1a0>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e9a:	f080 809c 	bcs.w	8000fd6 <__udivmoddi4+0x2ce>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f240 8099 	bls.w	8000fd6 <__udivmoddi4+0x2ce>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	eba4 040e 	sub.w	r4, r4, lr
 8000eac:	fa1f fe83 	uxth.w	lr, r3
 8000eb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ebc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec0:	45a4      	cmp	ip, r4
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x1ce>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eca:	f080 8082 	bcs.w	8000fd2 <__udivmoddi4+0x2ca>
 8000ece:	45a4      	cmp	ip, r4
 8000ed0:	d97f      	bls.n	8000fd2 <__udivmoddi4+0x2ca>
 8000ed2:	3b02      	subs	r3, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eda:	eba4 040c 	sub.w	r4, r4, ip
 8000ede:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ee2:	4564      	cmp	r4, ip
 8000ee4:	4673      	mov	r3, lr
 8000ee6:	46e1      	mov	r9, ip
 8000ee8:	d362      	bcc.n	8000fb0 <__udivmoddi4+0x2a8>
 8000eea:	d05f      	beq.n	8000fac <__udivmoddi4+0x2a4>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x1fe>
 8000eee:	ebb8 0203 	subs.w	r2, r8, r3
 8000ef2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ef6:	fa04 f606 	lsl.w	r6, r4, r6
 8000efa:	fa22 f301 	lsr.w	r3, r2, r1
 8000efe:	431e      	orrs	r6, r3
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	e9c5 6400 	strd	r6, r4, [r5]
 8000f06:	2100      	movs	r1, #0
 8000f08:	e74f      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f0e:	0c01      	lsrs	r1, r0, #16
 8000f10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f14:	b280      	uxth	r0, r0
 8000f16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	463c      	mov	r4, r7
 8000f20:	46b8      	mov	r8, r7
 8000f22:	46be      	mov	lr, r7
 8000f24:	2620      	movs	r6, #32
 8000f26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f2a:	eba2 0208 	sub.w	r2, r2, r8
 8000f2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f32:	e766      	b.n	8000e02 <__udivmoddi4+0xfa>
 8000f34:	4601      	mov	r1, r0
 8000f36:	e718      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f38:	4610      	mov	r0, r2
 8000f3a:	e72c      	b.n	8000d96 <__udivmoddi4+0x8e>
 8000f3c:	f1c6 0220 	rsb	r2, r6, #32
 8000f40:	fa2e f302 	lsr.w	r3, lr, r2
 8000f44:	40b7      	lsls	r7, r6
 8000f46:	40b1      	lsls	r1, r6
 8000f48:	fa20 f202 	lsr.w	r2, r0, r2
 8000f4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f50:	430a      	orrs	r2, r1
 8000f52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f56:	b2bc      	uxth	r4, r7
 8000f58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f62:	fb08 f904 	mul.w	r9, r8, r4
 8000f66:	40b0      	lsls	r0, r6
 8000f68:	4589      	cmp	r9, r1
 8000f6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f6e:	b280      	uxth	r0, r0
 8000f70:	d93e      	bls.n	8000ff0 <__udivmoddi4+0x2e8>
 8000f72:	1879      	adds	r1, r7, r1
 8000f74:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f78:	d201      	bcs.n	8000f7e <__udivmoddi4+0x276>
 8000f7a:	4589      	cmp	r9, r1
 8000f7c:	d81f      	bhi.n	8000fbe <__udivmoddi4+0x2b6>
 8000f7e:	eba1 0109 	sub.w	r1, r1, r9
 8000f82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f86:	fb09 f804 	mul.w	r8, r9, r4
 8000f8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f94:	4542      	cmp	r2, r8
 8000f96:	d229      	bcs.n	8000fec <__udivmoddi4+0x2e4>
 8000f98:	18ba      	adds	r2, r7, r2
 8000f9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f9e:	d2c4      	bcs.n	8000f2a <__udivmoddi4+0x222>
 8000fa0:	4542      	cmp	r2, r8
 8000fa2:	d2c2      	bcs.n	8000f2a <__udivmoddi4+0x222>
 8000fa4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fa8:	443a      	add	r2, r7
 8000faa:	e7be      	b.n	8000f2a <__udivmoddi4+0x222>
 8000fac:	45f0      	cmp	r8, lr
 8000fae:	d29d      	bcs.n	8000eec <__udivmoddi4+0x1e4>
 8000fb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fb8:	3801      	subs	r0, #1
 8000fba:	46e1      	mov	r9, ip
 8000fbc:	e796      	b.n	8000eec <__udivmoddi4+0x1e4>
 8000fbe:	eba7 0909 	sub.w	r9, r7, r9
 8000fc2:	4449      	add	r1, r9
 8000fc4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fc8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fcc:	fb09 f804 	mul.w	r8, r9, r4
 8000fd0:	e7db      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fd2:	4673      	mov	r3, lr
 8000fd4:	e77f      	b.n	8000ed6 <__udivmoddi4+0x1ce>
 8000fd6:	4650      	mov	r0, sl
 8000fd8:	e766      	b.n	8000ea8 <__udivmoddi4+0x1a0>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e6fd      	b.n	8000dda <__udivmoddi4+0xd2>
 8000fde:	443b      	add	r3, r7
 8000fe0:	3a02      	subs	r2, #2
 8000fe2:	e733      	b.n	8000e4c <__udivmoddi4+0x144>
 8000fe4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe8:	443b      	add	r3, r7
 8000fea:	e71c      	b.n	8000e26 <__udivmoddi4+0x11e>
 8000fec:	4649      	mov	r1, r9
 8000fee:	e79c      	b.n	8000f2a <__udivmoddi4+0x222>
 8000ff0:	eba1 0109 	sub.w	r1, r1, r9
 8000ff4:	46c4      	mov	ip, r8
 8000ff6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ffa:	fb09 f804 	mul.w	r8, r9, r4
 8000ffe:	e7c4      	b.n	8000f8a <__udivmoddi4+0x282>

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <AHRS_Init>:
#include "AHRS.h"

//Quaternion q, q_gyro, q_acc;
Vec3 attitude_gyro, attitude_acc, attitude;

void AHRS_Init(){
 8001004:	b480      	push	{r7}
 8001006:	b08b      	sub	sp, #44	@ 0x2c
 8001008:	af00      	add	r7, sp, #0

	//q = (Quaternion) {.w = 1.0f, .x = 0.0f, .y = 0.0f, .z = 0.0f};
	//q_gyro = (Quaternion) {.w = 1.0f, .x = 0.0f, .y = 0.0f, .z = 0.0f};
	//q_acc = (Quaternion) {.w = 1.0f, .x = 0.0f, .y = 0.0f, .z = 0.0f};

	attitude_gyro = (Vec3) {.x = 0.0f, .y = 0.0f, .z = 0.0f};
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <AHRS_Init+0x5c>)
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <AHRS_Init+0x5c>)
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <AHRS_Init+0x5c>)
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
	attitude_acc = (Vec3) {.x = 0.0f, .y = 0.0f, .z = 0.0f};
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <AHRS_Init+0x60>)
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <AHRS_Init+0x60>)
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <AHRS_Init+0x60>)
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
	attitude = (Vec3) {.x = 0.0f, .y = 0.0f, .z = 0.0f};
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <AHRS_Init+0x64>)
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <AHRS_Init+0x64>)
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <AHRS_Init+0x64>)
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
}
 8001052:	bf00      	nop
 8001054:	372c      	adds	r7, #44	@ 0x2c
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200002f0 	.word	0x200002f0
 8001064:	200002fc 	.word	0x200002fc
 8001068:	20000308 	.word	0x20000308
 800106c:	00000000 	.word	0x00000000

08001070 <AHRS_Update_Gyro>:

void AHRS_Update_Gyro(Vec3 gyro, float dt){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	eef0 6a40 	vmov.f32	s13, s0
 800107a:	eeb0 7a60 	vmov.f32	s14, s1
 800107e:	eef0 7a41 	vmov.f32	s15, s2
 8001082:	edc7 1a00 	vstr	s3, [r7]
 8001086:	edc7 6a01 	vstr	s13, [r7, #4]
 800108a:	ed87 7a02 	vstr	s14, [r7, #8]
 800108e:	edc7 7a03 	vstr	s15, [r7, #12]
	q_gyro.y = q.y + qDot.y * dt * DEG_TO_RAD;
	q_gyro.z = q.z + qDot.z * dt * DEG_TO_RAD;

	q_gyro = Quaternion_normalize(q_gyro);*/

	attitude_gyro.x = attitude.x + gyro.x * dt * DEG_TO_RAD;
 8001092:	4b3b      	ldr	r3, [pc, #236]	@ (8001180 <AHRS_Update_Gyro+0x110>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa7e 	bl	8000598 <__aeabi_f2d>
 800109c:	4604      	mov	r4, r0
 800109e:	460d      	mov	r5, r1
 80010a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80010a4:	edd7 7a00 	vldr	s15, [r7]
 80010a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ac:	ee17 0a90 	vmov	r0, s15
 80010b0:	f7ff fa72 	bl	8000598 <__aeabi_f2d>
 80010b4:	a330      	add	r3, pc, #192	@ (adr r3, 8001178 <AHRS_Update_Gyro+0x108>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff fac5 	bl	8000648 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff f909 	bl	80002dc <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fdb1 	bl	8000c38 <__aeabi_d2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001184 <AHRS_Update_Gyro+0x114>)
 80010da:	6013      	str	r3, [r2, #0]
	attitude_gyro.y = attitude.y + gyro.y * dt * DEG_TO_RAD;
 80010dc:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <AHRS_Update_Gyro+0x110>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa59 	bl	8000598 <__aeabi_f2d>
 80010e6:	4604      	mov	r4, r0
 80010e8:	460d      	mov	r5, r1
 80010ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80010ee:	edd7 7a00 	vldr	s15, [r7]
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	ee17 0a90 	vmov	r0, s15
 80010fa:	f7ff fa4d 	bl	8000598 <__aeabi_f2d>
 80010fe:	a31e      	add	r3, pc, #120	@ (adr r3, 8001178 <AHRS_Update_Gyro+0x108>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff faa0 	bl	8000648 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4620      	mov	r0, r4
 800110e:	4629      	mov	r1, r5
 8001110:	f7ff f8e4 	bl	80002dc <__adddf3>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fd8c 	bl	8000c38 <__aeabi_d2f>
 8001120:	4603      	mov	r3, r0
 8001122:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <AHRS_Update_Gyro+0x114>)
 8001124:	6053      	str	r3, [r2, #4]
	attitude_gyro.z = attitude.z + gyro.z * dt * DEG_TO_RAD;
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <AHRS_Update_Gyro+0x110>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa34 	bl	8000598 <__aeabi_f2d>
 8001130:	4604      	mov	r4, r0
 8001132:	460d      	mov	r5, r1
 8001134:	ed97 7a03 	vldr	s14, [r7, #12]
 8001138:	edd7 7a00 	vldr	s15, [r7]
 800113c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001140:	ee17 0a90 	vmov	r0, s15
 8001144:	f7ff fa28 	bl	8000598 <__aeabi_f2d>
 8001148:	a30b      	add	r3, pc, #44	@ (adr r3, 8001178 <AHRS_Update_Gyro+0x108>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff fa7b 	bl	8000648 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4620      	mov	r0, r4
 8001158:	4629      	mov	r1, r5
 800115a:	f7ff f8bf 	bl	80002dc <__adddf3>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fd67 	bl	8000c38 <__aeabi_d2f>
 800116a:	4603      	mov	r3, r0
 800116c:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <AHRS_Update_Gyro+0x114>)
 800116e:	6093      	str	r3, [r2, #8]

}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bdb0      	pop	{r4, r5, r7, pc}
 8001178:	a252dd11 	.word	0xa252dd11
 800117c:	3f91df46 	.word	0x3f91df46
 8001180:	20000308 	.word	0x20000308
 8001184:	200002f0 	.word	0x200002f0

08001188 <AHRS_Update_Acc>:



void AHRS_Update_Acc(Vec3 accel){
 8001188:	b580      	push	{r7, lr}
 800118a:	ed2d 8b02 	vpush	{d8}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	eef0 6a40 	vmov.f32	s13, s0
 8001196:	eeb0 7a60 	vmov.f32	s14, s1
 800119a:	eef0 7a41 	vmov.f32	s15, s2
 800119e:	edc7 6a01 	vstr	s13, [r7, #4]
 80011a2:	ed87 7a02 	vstr	s14, [r7, #8]
 80011a6:	edc7 7a03 	vstr	s15, [r7, #12]

	attitude_acc.x = atan2f(accel.y, accel.z);
 80011aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80011b2:	eef0 0a47 	vmov.f32	s1, s14
 80011b6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ba:	f010 ff8d 	bl	80120d8 <atan2f>
 80011be:	eef0 7a40 	vmov.f32	s15, s0
 80011c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <AHRS_Update_Acc+0xb0>)
 80011c4:	edc3 7a00 	vstr	s15, [r3]
	attitude_acc.y = atan2f(-accel.x, sqrt(accel.y*accel.y + accel.z*accel.z));
 80011c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011cc:	eeb1 8a67 	vneg.f32	s16, s15
 80011d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80011d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011dc:	edd7 6a03 	vldr	s13, [r7, #12]
 80011e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	ee17 0a90 	vmov	r0, s15
 80011f0:	f7ff f9d2 	bl	8000598 <__aeabi_f2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	ec43 2b10 	vmov	d0, r2, r3
 80011fc:	f010 ff40 	bl	8012080 <sqrt>
 8001200:	ec53 2b10 	vmov	r2, r3, d0
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fd16 	bl	8000c38 <__aeabi_d2f>
 800120c:	4603      	mov	r3, r0
 800120e:	ee00 3a90 	vmov	s1, r3
 8001212:	eeb0 0a48 	vmov.f32	s0, s16
 8001216:	f010 ff5f 	bl	80120d8 <atan2f>
 800121a:	eef0 7a40 	vmov.f32	s15, s0
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <AHRS_Update_Acc+0xb0>)
 8001220:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude_acc.z = attitude_gyro.z;
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <AHRS_Update_Acc+0xb4>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a03      	ldr	r2, [pc, #12]	@ (8001238 <AHRS_Update_Acc+0xb0>)
 800122a:	6093      	str	r3, [r2, #8]

}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	ecbd 8b02 	vpop	{d8}
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200002fc 	.word	0x200002fc
 800123c:	200002f0 	.word	0x200002f0

08001240 <AHRS_Update_Complementary_Filter>:

void AHRS_Update_Complementary_Filter(float gain){
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	ed87 0a01 	vstr	s0, [r7, #4]

	//q = Quaternion_Slerp(q_acc, q_gyro, 0.80);
	//q = Quaternion_Lerp(q_acc, q_gyro, 0.95);
	//q = Quaternion_normalize(q);

	attitude.x = gain*attitude_gyro.x + (1-gain)*attitude_acc.x;
 800124a:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <AHRS_Update_Complementary_Filter+0xa0>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	edd7 7a01 	vldr	s15, [r7, #4]
 8001254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001258:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800125c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001260:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001264:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <AHRS_Update_Complementary_Filter+0xa4>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800126e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001272:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <AHRS_Update_Complementary_Filter+0xa8>)
 8001274:	edc3 7a00 	vstr	s15, [r3]
	attitude.y = gain*attitude_gyro.y + (1-gain)*attitude_acc.y;
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <AHRS_Update_Complementary_Filter+0xa0>)
 800127a:	ed93 7a01 	vldr	s14, [r3, #4]
 800127e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800128a:	edd7 7a01 	vldr	s15, [r7, #4]
 800128e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <AHRS_Update_Complementary_Filter+0xa4>)
 8001294:	edd3 7a01 	vldr	s15, [r3, #4]
 8001298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <AHRS_Update_Complementary_Filter+0xa8>)
 80012a2:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude.z = gain*attitude_gyro.z + (1-gain)*attitude_acc.z;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <AHRS_Update_Complementary_Filter+0xa0>)
 80012a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80012ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80012b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <AHRS_Update_Complementary_Filter+0xa4>)
 80012c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80012c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <AHRS_Update_Complementary_Filter+0xa8>)
 80012d0:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	200002f0 	.word	0x200002f0
 80012e4:	200002fc 	.word	0x200002fc
 80012e8:	20000308 	.word	0x20000308
 80012ec:	00000000 	.word	0x00000000

080012f0 <Stabilized_Mode>:

#include "Flight_Modes.h"

Vec3 ref = {0.0f, 0.0f, 0.0f};

void Stabilized_Mode(Sbus channels){
 80012f0:	b084      	sub	sp, #16
 80012f2:	b5b0      	push	{r4, r5, r7, lr}
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	f107 0410 	add.w	r4, r7, #16
 80012fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ref.x = (channels.channels[1]-1500) * 0.002f * STABILIZED_MAX_ROLL;
 80012fe:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001302:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8001470 <Stabilized_Mode+0x180>
 8001306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800130a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001474 <Stabilized_Mode+0x184>
 800130e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001312:	ee17 0a90 	vmov	r0, s15
 8001316:	f7ff f93f 	bl	8000598 <__aeabi_f2d>
 800131a:	a34d      	add	r3, pc, #308	@ (adr r3, 8001450 <Stabilized_Mode+0x160>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff f992 	bl	8000648 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fc84 	bl	8000c38 <__aeabi_d2f>
 8001330:	4603      	mov	r3, r0
 8001332:	4a51      	ldr	r2, [pc, #324]	@ (8001478 <Stabilized_Mode+0x188>)
 8001334:	6013      	str	r3, [r2, #0]
	ref.y = (channels.channels[2]-1500) * 0.002f * STABILIZED_MAX_PITCH;
 8001336:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800133a:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001470 <Stabilized_Mode+0x180>
 800133e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001342:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001474 <Stabilized_Mode+0x184>
 8001346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134a:	ee17 0a90 	vmov	r0, s15
 800134e:	f7ff f923 	bl	8000598 <__aeabi_f2d>
 8001352:	a33f      	add	r3, pc, #252	@ (adr r3, 8001450 <Stabilized_Mode+0x160>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f976 	bl	8000648 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc68 	bl	8000c38 <__aeabi_d2f>
 8001368:	4603      	mov	r3, r0
 800136a:	4a43      	ldr	r2, [pc, #268]	@ (8001478 <Stabilized_Mode+0x188>)
 800136c:	6053      	str	r3, [r2, #4]
	ref.z += (channels.channels[3]-1500) * 0.0031415 * STABILIZED_YAW_RATE;
 800136e:	4b42      	ldr	r3, [pc, #264]	@ (8001478 <Stabilized_Mode+0x188>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f910 	bl	8000598 <__aeabi_f2d>
 8001378:	4604      	mov	r4, r0
 800137a:	460d      	mov	r5, r1
 800137c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001380:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001470 <Stabilized_Mode+0x180>
 8001384:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001388:	ee17 0a90 	vmov	r0, s15
 800138c:	f7ff f904 	bl	8000598 <__aeabi_f2d>
 8001390:	a331      	add	r3, pc, #196	@ (adr r3, 8001458 <Stabilized_Mode+0x168>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7ff f957 	bl	8000648 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	a32f      	add	r3, pc, #188	@ (adr r3, 8001460 <Stabilized_Mode+0x170>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	f7ff f94e 	bl	8000648 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4620      	mov	r0, r4
 80013b2:	4629      	mov	r1, r5
 80013b4:	f7fe ff92 	bl	80002dc <__adddf3>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fc3a 	bl	8000c38 <__aeabi_d2f>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001478 <Stabilized_Mode+0x188>)
 80013c8:	6093      	str	r3, [r2, #8]
	if(ref.z >= 2*M_PI) ref.z -= 2*M_PI;
 80013ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001478 <Stabilized_Mode+0x188>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8e2 	bl	8000598 <__aeabi_f2d>
 80013d4:	a324      	add	r3, pc, #144	@ (adr r3, 8001468 <Stabilized_Mode+0x178>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff fbbb 	bl	8000b54 <__aeabi_dcmpge>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d012      	beq.n	800140a <Stabilized_Mode+0x11a>
 80013e4:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <Stabilized_Mode+0x188>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f8d5 	bl	8000598 <__aeabi_f2d>
 80013ee:	a31e      	add	r3, pc, #120	@ (adr r3, 8001468 <Stabilized_Mode+0x178>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	f7fe ff70 	bl	80002d8 <__aeabi_dsub>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fc1a 	bl	8000c38 <__aeabi_d2f>
 8001404:	4603      	mov	r3, r0
 8001406:	4a1c      	ldr	r2, [pc, #112]	@ (8001478 <Stabilized_Mode+0x188>)
 8001408:	6093      	str	r3, [r2, #8]
	if(ref.z < 0) ref.z += 2*M_PI;
 800140a:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <Stabilized_Mode+0x188>)
 800140c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001410:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	d400      	bmi.n	800141c <Stabilized_Mode+0x12c>

}
 800141a:	e012      	b.n	8001442 <Stabilized_Mode+0x152>
	if(ref.z < 0) ref.z += 2*M_PI;
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <Stabilized_Mode+0x188>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f8b9 	bl	8000598 <__aeabi_f2d>
 8001426:	a310      	add	r3, pc, #64	@ (adr r3, 8001468 <Stabilized_Mode+0x178>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7fe ff56 	bl	80002dc <__adddf3>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fbfe 	bl	8000c38 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <Stabilized_Mode+0x188>)
 8001440:	6093      	str	r3, [r2, #8]
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800144a:	b004      	add	sp, #16
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	54442d18 	.word	0x54442d18
 8001454:	3fe921fb 	.word	0x3fe921fb
 8001458:	f85510d4 	.word	0xf85510d4
 800145c:	3f69bc33 	.word	0x3f69bc33
 8001460:	47ae147b 	.word	0x47ae147b
 8001464:	3f847ae1 	.word	0x3f847ae1
 8001468:	54442d18 	.word	0x54442d18
 800146c:	401921fb 	.word	0x401921fb
 8001470:	44bb8000 	.word	0x44bb8000
 8001474:	3b03126f 	.word	0x3b03126f
 8001478:	20000314 	.word	0x20000314
 800147c:	00000000 	.word	0x00000000

08001480 <Acro_Mode>:

void Acro_Mode(Sbus channels){
 8001480:	b084      	sub	sp, #16
 8001482:	b5b0      	push	{r4, r5, r7, lr}
 8001484:	af00      	add	r7, sp, #0
 8001486:	f107 0410 	add.w	r4, r7, #16
 800148a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ref.x += (channels.channels[1]-1500) * 0.0031415 * ACRO_ROLL_RATE;
 800148e:	4b6c      	ldr	r3, [pc, #432]	@ (8001640 <Acro_Mode+0x1c0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f880 	bl	8000598 <__aeabi_f2d>
 8001498:	4604      	mov	r4, r0
 800149a:	460d      	mov	r5, r1
 800149c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80014a0:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001644 <Acro_Mode+0x1c4>
 80014a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a8:	ee17 0a90 	vmov	r0, s15
 80014ac:	f7ff f874 	bl	8000598 <__aeabi_f2d>
 80014b0:	a35d      	add	r3, pc, #372	@ (adr r3, 8001628 <Acro_Mode+0x1a8>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f8c7 	bl	8000648 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	a35b      	add	r3, pc, #364	@ (adr r3, 8001630 <Acro_Mode+0x1b0>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f8be 	bl	8000648 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7fe ff02 	bl	80002dc <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fbaa 	bl	8000c38 <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a56      	ldr	r2, [pc, #344]	@ (8001640 <Acro_Mode+0x1c0>)
 80014e8:	6013      	str	r3, [r2, #0]
	ref.y += (channels.channels[2]-1500) * 0.0031415 * ACRO_PITCH_RATE;
 80014ea:	4b55      	ldr	r3, [pc, #340]	@ (8001640 <Acro_Mode+0x1c0>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f852 	bl	8000598 <__aeabi_f2d>
 80014f4:	4604      	mov	r4, r0
 80014f6:	460d      	mov	r5, r1
 80014f8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80014fc:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001644 <Acro_Mode+0x1c4>
 8001500:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001504:	ee17 0a90 	vmov	r0, s15
 8001508:	f7ff f846 	bl	8000598 <__aeabi_f2d>
 800150c:	a346      	add	r3, pc, #280	@ (adr r3, 8001628 <Acro_Mode+0x1a8>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff f899 	bl	8000648 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	a344      	add	r3, pc, #272	@ (adr r3, 8001630 <Acro_Mode+0x1b0>)
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	f7ff f890 	bl	8000648 <__aeabi_dmul>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4620      	mov	r0, r4
 800152e:	4629      	mov	r1, r5
 8001530:	f7fe fed4 	bl	80002dc <__adddf3>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fb7c 	bl	8000c38 <__aeabi_d2f>
 8001540:	4603      	mov	r3, r0
 8001542:	4a3f      	ldr	r2, [pc, #252]	@ (8001640 <Acro_Mode+0x1c0>)
 8001544:	6053      	str	r3, [r2, #4]
	ref.z += (channels.channels[3]-1500) * 0.0031415 * ACRO_YAW_RATE;
 8001546:	4b3e      	ldr	r3, [pc, #248]	@ (8001640 <Acro_Mode+0x1c0>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f824 	bl	8000598 <__aeabi_f2d>
 8001550:	4604      	mov	r4, r0
 8001552:	460d      	mov	r5, r1
 8001554:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001558:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001644 <Acro_Mode+0x1c4>
 800155c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001560:	ee17 0a90 	vmov	r0, s15
 8001564:	f7ff f818 	bl	8000598 <__aeabi_f2d>
 8001568:	a32f      	add	r3, pc, #188	@ (adr r3, 8001628 <Acro_Mode+0x1a8>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7ff f86b 	bl	8000648 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	a32d      	add	r3, pc, #180	@ (adr r3, 8001630 <Acro_Mode+0x1b0>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7ff f862 	bl	8000648 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4620      	mov	r0, r4
 800158a:	4629      	mov	r1, r5
 800158c:	f7fe fea6 	bl	80002dc <__adddf3>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff fb4e 	bl	8000c38 <__aeabi_d2f>
 800159c:	4603      	mov	r3, r0
 800159e:	4a28      	ldr	r2, [pc, #160]	@ (8001640 <Acro_Mode+0x1c0>)
 80015a0:	6093      	str	r3, [r2, #8]
	if(ref.z >= 2*M_PI) ref.z -= 2*M_PI;
 80015a2:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <Acro_Mode+0x1c0>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe fff6 	bl	8000598 <__aeabi_f2d>
 80015ac:	a322      	add	r3, pc, #136	@ (adr r3, 8001638 <Acro_Mode+0x1b8>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7ff facf 	bl	8000b54 <__aeabi_dcmpge>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d012      	beq.n	80015e2 <Acro_Mode+0x162>
 80015bc:	4b20      	ldr	r3, [pc, #128]	@ (8001640 <Acro_Mode+0x1c0>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffe9 	bl	8000598 <__aeabi_f2d>
 80015c6:	a31c      	add	r3, pc, #112	@ (adr r3, 8001638 <Acro_Mode+0x1b8>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7fe fe84 	bl	80002d8 <__aeabi_dsub>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff fb2e 	bl	8000c38 <__aeabi_d2f>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a18      	ldr	r2, [pc, #96]	@ (8001640 <Acro_Mode+0x1c0>)
 80015e0:	6093      	str	r3, [r2, #8]
	if(ref.z < 0) ref.z += 2*M_PI;
 80015e2:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <Acro_Mode+0x1c0>)
 80015e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f0:	d400      	bmi.n	80015f4 <Acro_Mode+0x174>
}
 80015f2:	e012      	b.n	800161a <Acro_Mode+0x19a>
	if(ref.z < 0) ref.z += 2*M_PI;
 80015f4:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <Acro_Mode+0x1c0>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ffcd 	bl	8000598 <__aeabi_f2d>
 80015fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8001638 <Acro_Mode+0x1b8>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7fe fe6a 	bl	80002dc <__adddf3>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fb12 	bl	8000c38 <__aeabi_d2f>
 8001614:	4603      	mov	r3, r0
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <Acro_Mode+0x1c0>)
 8001618:	6093      	str	r3, [r2, #8]
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001622:	b004      	add	sp, #16
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	f85510d4 	.word	0xf85510d4
 800162c:	3f69bc33 	.word	0x3f69bc33
 8001630:	9999999a 	.word	0x9999999a
 8001634:	3fa99999 	.word	0x3fa99999
 8001638:	54442d18 	.word	0x54442d18
 800163c:	401921fb 	.word	0x401921fb
 8001640:	20000314 	.word	0x20000314
 8001644:	44bb8000 	.word	0x44bb8000

08001648 <Manual_Mode>:

void Manual_Mode(Sbus channels, float *outputs){
 8001648:	b084      	sub	sp, #16
 800164a:	b490      	push	{r4, r7}
 800164c:	af00      	add	r7, sp, #0
 800164e:	f107 0408 	add.w	r4, r7, #8
 8001652:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	outputs[0] = channels.channels[1];
 8001656:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001658:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800165a:	601a      	str	r2, [r3, #0]
	outputs[1] = channels.channels[2];
 800165c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800165e:	3304      	adds	r3, #4
 8001660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001662:	601a      	str	r2, [r3, #0]
	outputs[2] = channels.channels[3];
 8001664:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001666:	3308      	adds	r3, #8
 8001668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc90      	pop	{r4, r7}
 8001672:	b004      	add	sp, #16
 8001674:	4770      	bx	lr

08001676 <ICM42688_Begin>:


#include "ICM42688P.h"
#include "main.h"

HAL_StatusTypeDef ICM42688_Begin(ICM42688 *device, SPI_HandleTypeDef *spiHandle){
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
	device->spiHandle = spiHandle;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	601a      	str	r2, [r3, #0]

	device->accel.x = 0.0f;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	605a      	str	r2, [r3, #4]
	device->accel.y = 0.0f;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
	device->accel.z = 0.0f;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	60da      	str	r2, [r3, #12]

	device->gyro.x = 0.0f;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
	device->gyro.y = 0.0f;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	615a      	str	r2, [r3, #20]
	device->gyro.z = 0.0f;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]

	device->ready = 0;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	device->dataRdy = 0;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	HAL_Delay(10);
 80016c6:	200a      	movs	r0, #10
 80016c8:	f002 fa2e 	bl	8003b28 <HAL_Delay>
	HAL_StatusTypeDef status;
	uint8_t data;

	status = ICM42688_Read(device, WHO_AM_I, &data);
 80016cc:	f107 030e 	add.w	r3, r7, #14
 80016d0:	461a      	mov	r2, r3
 80016d2:	2175      	movs	r1, #117	@ 0x75
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fa29 	bl	8001b2c <ICM42688_Read>
 80016da:	4603      	mov	r3, r0
 80016dc:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <ICM42688_Begin+0x72>
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	e05d      	b.n	80017a4 <ICM42688_Begin+0x12e>
	if(data != 0x47) return HAL_ERROR;
 80016e8:	7bbb      	ldrb	r3, [r7, #14]
 80016ea:	2b47      	cmp	r3, #71	@ 0x47
 80016ec:	d001      	beq.n	80016f2 <ICM42688_Begin+0x7c>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e058      	b.n	80017a4 <ICM42688_Begin+0x12e>

	data = (GYRO_FS_SEL_1000_DPS << 5) | GYRO_ODR_1_KHZ;
 80016f2:	2326      	movs	r3, #38	@ 0x26
 80016f4:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, GYRO_CONFIG0, &data);
 80016f6:	f107 030e 	add.w	r3, r7, #14
 80016fa:	461a      	mov	r2, r3
 80016fc:	214f      	movs	r1, #79	@ 0x4f
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f9ec 	bl	8001adc <ICM42688_Write>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <ICM42688_Begin+0x9c>
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	e048      	b.n	80017a4 <ICM42688_Begin+0x12e>
	device->gyro_fs = GYRO_FS_SEL_1000_DPS;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2020 	strb.w	r2, [r3, #32]
	device->gyro_odr = GYRO_ODR_1_KHZ;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2206      	movs	r2, #6
 800171e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	data = (ACCEL_FS_SEL_4_G << 5) | ACCEL_ODR_1_KHZ;
 8001722:	2346      	movs	r3, #70	@ 0x46
 8001724:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, ACCEL_CONFIG0, &data);
 8001726:	f107 030e 	add.w	r3, r7, #14
 800172a:	461a      	mov	r2, r3
 800172c:	2150      	movs	r1, #80	@ 0x50
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f9d4 	bl	8001adc <ICM42688_Write>
 8001734:	4603      	mov	r3, r0
 8001736:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <ICM42688_Begin+0xcc>
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	e030      	b.n	80017a4 <ICM42688_Begin+0x12e>
	device->accel_fs = ACCEL_FS_SEL_4_G;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2202      	movs	r2, #2
 8001746:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	device->accel_odr = ACCEL_ODR_1_KHZ;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2206      	movs	r2, #6
 800174e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	status = ICM42688_Set_Interrupts(device);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f863 	bl	800181e <ICM42688_Set_Interrupts>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <ICM42688_Begin+0xf0>
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	e01e      	b.n	80017a4 <ICM42688_Begin+0x12e>

	status = ICM42688_Set_Filters(device);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f820 	bl	80017ac <ICM42688_Set_Filters>
 800176c:	4603      	mov	r3, r0
 800176e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <ICM42688_Begin+0x104>
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	e014      	b.n	80017a4 <ICM42688_Begin+0x12e>

	data = 0x0F; //0b00001111 Gyro & Acc in Low Noise Mode
 800177a:	230f      	movs	r3, #15
 800177c:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, PWR_MGMT0, &data);
 800177e:	f107 030e 	add.w	r3, r7, #14
 8001782:	461a      	mov	r2, r3
 8001784:	214e      	movs	r1, #78	@ 0x4e
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f9a8 	bl	8001adc <ICM42688_Write>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <ICM42688_Begin+0x124>
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	e004      	b.n	80017a4 <ICM42688_Begin+0x12e>
	//if(status != HAL_OK) return status;

	//status = ICM42688_Calibrate_Accel(device);
	//if(status != HAL_OK) return status;

	device->ready = 1;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

	return status;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <ICM42688_Set_Filters>:
	device->accel_odr = rate;

	return status;
}

HAL_StatusTypeDef ICM42688_Set_Filters(ICM42688 *device){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	//Antialiasing and Notch Filters enabled by default

	uint8_t data = (UI_FILT_ORD_1_ORD << 2); //Temperature filter: 4000Hz (Default), 1st order Gyro Low Pass Filter
 80017b4:	2300      	movs	r3, #0
 80017b6:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = ICM42688_Write(device, GYRO_CONFIG1, &data);
 80017b8:	f107 030e 	add.w	r3, r7, #14
 80017bc:	461a      	mov	r2, r3
 80017be:	2151      	movs	r1, #81	@ 0x51
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f98b 	bl	8001adc <ICM42688_Write>
 80017c6:	4603      	mov	r3, r0
 80017c8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <ICM42688_Set_Filters+0x28>
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	e020      	b.n	8001816 <ICM42688_Set_Filters+0x6a>

	data = (UI_FILT_ORD_1_ORD << 3); //Accelerometer Low Pass Filter 1st order
 80017d4:	2300      	movs	r3, #0
 80017d6:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, ACCEL_CONFIG1, &data);
 80017d8:	f107 030e 	add.w	r3, r7, #14
 80017dc:	461a      	mov	r2, r3
 80017de:	2153      	movs	r1, #83	@ 0x53
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f97b 	bl	8001adc <ICM42688_Write>
 80017e6:	4603      	mov	r3, r0
 80017e8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <ICM42688_Set_Filters+0x48>
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	e010      	b.n	8001816 <ICM42688_Set_Filters+0x6a>

	data = (UI_FILT_BW_125_HZ << 4) | UI_FILT_BW_125_HZ; //Accelerometer BW (Left) & Gyro BW (Right)
 80017f4:	2333      	movs	r3, #51	@ 0x33
 80017f6:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, GYRO_ACCEL_CONFIG0, &data);
 80017f8:	f107 030e 	add.w	r3, r7, #14
 80017fc:	461a      	mov	r2, r3
 80017fe:	2152      	movs	r1, #82	@ 0x52
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f96b 	bl	8001adc <ICM42688_Write>
 8001806:	4603      	mov	r3, r0
 8001808:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <ICM42688_Set_Filters+0x68>
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	e000      	b.n	8001816 <ICM42688_Set_Filters+0x6a>

	return status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <ICM42688_Set_Interrupts>:

HAL_StatusTypeDef ICM42688_Set_Interrupts(ICM42688 *device){
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x03; //0b00000011 INT1: Active High, Push pull, Pulsed mode
 8001826:	2303      	movs	r3, #3
 8001828:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = ICM42688_Write(device, INT_CONFIG, &data);
 800182a:	f107 030e 	add.w	r3, r7, #14
 800182e:	461a      	mov	r2, r3
 8001830:	2114      	movs	r1, #20
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f952 	bl	8001adc <ICM42688_Write>
 8001838:	4603      	mov	r3, r0
 800183a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <ICM42688_Set_Interrupts+0x28>
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	e031      	b.n	80018aa <ICM42688_Set_Interrupts+0x8c>

	// need to clear bit 4 to allow proper INT1 and INT2 operation
	status = ICM42688_Read(device, INT_CONFIG1, &data);
 8001846:	f107 030e 	add.w	r3, r7, #14
 800184a:	461a      	mov	r2, r3
 800184c:	2164      	movs	r1, #100	@ 0x64
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f96c 	bl	8001b2c <ICM42688_Read>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <ICM42688_Set_Interrupts+0x44>
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	e023      	b.n	80018aa <ICM42688_Set_Interrupts+0x8c>
	data &= ~0x10;
 8001862:	7bbb      	ldrb	r3, [r7, #14]
 8001864:	f023 0310 	bic.w	r3, r3, #16
 8001868:	b2db      	uxtb	r3, r3
 800186a:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, INT_CONFIG1, &data);
 800186c:	f107 030e 	add.w	r3, r7, #14
 8001870:	461a      	mov	r2, r3
 8001872:	2164      	movs	r1, #100	@ 0x64
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f931 	bl	8001adc <ICM42688_Write>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <ICM42688_Set_Interrupts+0x6a>
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	e010      	b.n	80018aa <ICM42688_Set_Interrupts+0x8c>

	// route UI data ready interrupt to INT1
	data = 0x08; //0b00001000: UI data ready interrupt routed to INT1
 8001888:	2308      	movs	r3, #8
 800188a:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, INT_SOURCE0, &data);
 800188c:	f107 030e 	add.w	r3, r7, #14
 8001890:	461a      	mov	r2, r3
 8001892:	2165      	movs	r1, #101	@ 0x65
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f921 	bl	8001adc <ICM42688_Write>
 800189a:	4603      	mov	r3, r0
 800189c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <ICM42688_Set_Interrupts+0x8a>
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	e000      	b.n	80018aa <ICM42688_Set_Interrupts+0x8c>

	return status;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	0000      	movs	r0, r0
 80018b4:	0000      	movs	r0, r0
	...

080018b8 <ICM42688_Process_Buffer>:
	device->temp = (float) tempRaw / 132.48f + 25.0f;

	return status;
}

void ICM42688_Process_Buffer(ICM42688 *device){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

	uint16_t tempRaw = (int16_t)((device->buffer[1] << 8) | device->buffer[2]);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	b21a      	sxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	82fb      	strh	r3, [r7, #22]
	int16_t acc[3];
	int16_t gyro[3];

	device->temp = (float) tempRaw / 132.48f + 25.0f;
 80018da:	8afb      	ldrh	r3, [r7, #22]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018e4:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8001ad0 <ICM42688_Process_Buffer+0x218>
 80018e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ec:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80018f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	edc3 7a07 	vstr	s15, [r3, #28]

	acc[0] = (int16_t)((device->buffer[3] << 8) | device->buffer[4]);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001900:	b21b      	sxth	r3, r3
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	b21a      	sxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b21b      	sxth	r3, r3
 8001912:	823b      	strh	r3, [r7, #16]
	acc[1] = (int16_t)((device->buffer[5] << 8) | device->buffer[6]);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800191a:	b21b      	sxth	r3, r3
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b21a      	sxth	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001926:	b21b      	sxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b21b      	sxth	r3, r3
 800192c:	827b      	strh	r3, [r7, #18]
	acc[2] = (int16_t)((device->buffer[7] << 8) | device->buffer[8]);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001934:	b21b      	sxth	r3, r3
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21a      	sxth	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001940:	b21b      	sxth	r3, r3
 8001942:	4313      	orrs	r3, r2
 8001944:	b21b      	sxth	r3, r3
 8001946:	82bb      	strh	r3, [r7, #20]

	device->accel.x = (float) acc[1] / 8192.0f; //ACCEL_FS_SEL_4_G
 8001948:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001954:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8001ad4 <ICM42688_Process_Buffer+0x21c>
 8001958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	edc3 7a01 	vstr	s15, [r3, #4]
	device->accel.y = -(float) acc[0] / 8192.0f; //Axis remapping
 8001962:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196e:	eeb1 7a67 	vneg.f32	s14, s15
 8001972:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001ad4 <ICM42688_Process_Buffer+0x21c>
 8001976:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	edc3 7a02 	vstr	s15, [r3, #8]
	device->accel.z = (float) acc[2] / 8192.0f;
 8001980:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198c:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001ad4 <ICM42688_Process_Buffer+0x21c>
 8001990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	edc3 7a03 	vstr	s15, [r3, #12]

	gyro[0] = (int16_t)((device->buffer[9] << 8) | device->buffer[10]);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	813b      	strh	r3, [r7, #8]
	gyro[1] = (int16_t)((device->buffer[11] << 8) | device->buffer[12]);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	b21a      	sxth	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	817b      	strh	r3, [r7, #10]
	gyro[2] = (int16_t)((device->buffer[13] << 8) | device->buffer[14]);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	b21a      	sxth	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80019e0:	b21b      	sxth	r3, r3
 80019e2:	4313      	orrs	r3, r2
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	81bb      	strh	r3, [r7, #12]

	device->gyro.x = (float) gyro[1] / 32.8f; //GYRO_FS_SEL_1000_DPS
 80019e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f4:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001ad8 <ICM42688_Process_Buffer+0x220>
 80019f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	edc3 7a04 	vstr	s15, [r3, #16]
	device->gyro.y = -(float) gyro[0] / 32.8f; //Axis remapping
 8001a02:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0e:	eeb1 7a67 	vneg.f32	s14, s15
 8001a12:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001ad8 <ICM42688_Process_Buffer+0x220>
 8001a16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	edc3 7a05 	vstr	s15, [r3, #20]
	device->gyro.z = (float) gyro[2] / 32.8f;
 8001a20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2c:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8001ad8 <ICM42688_Process_Buffer+0x220>
 8001a30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	edc3 7a06 	vstr	s15, [r3, #24]

	device->gyro.x -= -0.0396341197; //Calibration
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fdaa 	bl	8000598 <__aeabi_f2d>
 8001a44:	a31c      	add	r3, pc, #112	@ (adr r3, 8001ab8 <ICM42688_Process_Buffer+0x200>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fc47 	bl	80002dc <__adddf3>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7ff f8ef 	bl	8000c38 <__aeabi_d2f>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	611a      	str	r2, [r3, #16]
	device->gyro.y -= -3.08658361;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd97 	bl	8000598 <__aeabi_f2d>
 8001a6a:	a315      	add	r3, pc, #84	@ (adr r3, 8001ac0 <ICM42688_Process_Buffer+0x208>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fc34 	bl	80002dc <__adddf3>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f7ff f8dc 	bl	8000c38 <__aeabi_d2f>
 8001a80:	4602      	mov	r2, r0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	615a      	str	r2, [r3, #20]
	device->gyro.z -= 0.494207352;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd84 	bl	8000598 <__aeabi_f2d>
 8001a90:	a30d      	add	r3, pc, #52	@ (adr r3, 8001ac8 <ICM42688_Process_Buffer+0x210>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7fe fc1f 	bl	80002d8 <__aeabi_dsub>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f7ff f8c9 	bl	8000c38 <__aeabi_d2f>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	619a      	str	r2, [r3, #24]

	//device->gyro.x *= DEG_TO_RAD;
	//device->gyro.y *= DEG_TO_RAD;
	//device->gyro.z *= DEG_TO_RAD;

}
 8001aac:	bf00      	nop
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	5fd5a1b4 	.word	0x5fd5a1b4
 8001abc:	3fa44aec 	.word	0x3fa44aec
 8001ac0:	bf6a8e94 	.word	0xbf6a8e94
 8001ac4:	4008b152 	.word	0x4008b152
 8001ac8:	df9218be 	.word	0xdf9218be
 8001acc:	3fdfa117 	.word	0x3fdfa117
 8001ad0:	43047ae1 	.word	0x43047ae1
 8001ad4:	46000000 	.word	0x46000000
 8001ad8:	42033333 	.word	0x42033333

08001adc <ICM42688_Write>:
}


//===============================    LOW LEVEL FUNCTIONS ===================================

HAL_StatusTypeDef ICM42688_Write(ICM42688 *device, uint8_t address, uint8_t *data){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	72fb      	strb	r3, [r7, #11]

	uint8_t tx_Buff[2] = {address, *data};
 8001aea:	7afb      	ldrb	r3, [r7, #11]
 8001aec:	753b      	strb	r3, [r7, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2110      	movs	r1, #16
 8001af8:	480b      	ldr	r0, [pc, #44]	@ (8001b28 <ICM42688_Write+0x4c>)
 8001afa:	f003 fb9f 	bl	800523c <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(device->spiHandle, tx_Buff, 2, HAL_MAX_DELAY);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	f107 0114 	add.w	r1, r7, #20
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f006 f895 	bl	8007c3a <HAL_SPI_Transmit>
 8001b10:	4603      	mov	r3, r0
 8001b12:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	2110      	movs	r1, #16
 8001b18:	4803      	ldr	r0, [pc, #12]	@ (8001b28 <ICM42688_Write+0x4c>)
 8001b1a:	f003 fb8f 	bl	800523c <HAL_GPIO_WritePin>

	return status;
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40020000 	.word	0x40020000

08001b2c <ICM42688_Read>:

	return status;
}


HAL_StatusTypeDef ICM42688_Read(ICM42688 *device, uint8_t address, uint8_t *data){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	460b      	mov	r3, r1
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuff = (address | 0x80);
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
 8001b3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2110      	movs	r1, #16
 8001b48:	4815      	ldr	r0, [pc, #84]	@ (8001ba0 <ICM42688_Read+0x74>)
 8001b4a:	f003 fb77 	bl	800523c <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(device->spiHandle, &txBuff, 1, HAL_MAX_DELAY);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	f107 0116 	add.w	r1, r7, #22
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f006 f86d 	bl	8007c3a <HAL_SPI_Transmit>
 8001b60:	4603      	mov	r3, r0
 8001b62:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <ICM42688_Read+0x42>
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	e014      	b.n	8001b98 <ICM42688_Read+0x6c>

	status = HAL_SPI_Receive(device->spiHandle, data, 1, HAL_MAX_DELAY);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	2201      	movs	r2, #1
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	f006 f9d4 	bl	8007f26 <HAL_SPI_Receive>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <ICM42688_Read+0x60>
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	e005      	b.n	8001b98 <ICM42688_Read+0x6c>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2110      	movs	r1, #16
 8001b90:	4803      	ldr	r0, [pc, #12]	@ (8001ba0 <ICM42688_Read+0x74>)
 8001b92:	f003 fb53 	bl	800523c <HAL_GPIO_WritePin>

	return status;
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <ICM42688_Read_DMA>:

	return status;

}

HAL_StatusTypeDef ICM42688_Read_DMA(ICM42688 *device){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

	uint8_t txBuff[15];
	txBuff[0] = (TEMP_DATA1 | 0x80);
 8001bac:	239d      	movs	r3, #157	@ 0x9d
 8001bae:	723b      	strb	r3, [r7, #8]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	480c      	ldr	r0, [pc, #48]	@ (8001be8 <ICM42688_Read_DMA+0x44>)
 8001bb6:	f003 fb41 	bl	800523c <HAL_GPIO_WritePin>

	status = HAL_SPI_TransmitReceive_DMA(device->spiHandle, txBuff, device->buffer, 15);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001bc4:	f107 0108 	add.w	r1, r7, #8
 8001bc8:	230f      	movs	r3, #15
 8001bca:	f006 fd03 	bl	80085d4 <HAL_SPI_TransmitReceive_DMA>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <ICM42688_Read_DMA+0x38>
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	e000      	b.n	8001bde <ICM42688_Read_DMA+0x3a>

	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);

	return status;
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40020000 	.word	0x40020000
 8001bec:	00000000 	.word	0x00000000

08001bf0 <PID_Update>:

extern float outputs[8];

Vec3 ref_prev, error_prev, integral = {0.0f, 0.0f, 0.0f};

void PID_Update(Vec3 ref, Vec3 attitude, float dt){
 8001bf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bf4:	b08e      	sub	sp, #56	@ 0x38
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	eeb0 5a40 	vmov.f32	s10, s0
 8001bfc:	eef0 5a60 	vmov.f32	s11, s1
 8001c00:	eeb0 6a41 	vmov.f32	s12, s2
 8001c04:	eef0 6a61 	vmov.f32	s13, s3
 8001c08:	eeb0 7a42 	vmov.f32	s14, s4
 8001c0c:	eef0 7a62 	vmov.f32	s15, s5
 8001c10:	ed87 3a01 	vstr	s6, [r7, #4]
 8001c14:	ed87 5a05 	vstr	s10, [r7, #20]
 8001c18:	edc7 5a06 	vstr	s11, [r7, #24]
 8001c1c:	ed87 6a07 	vstr	s12, [r7, #28]
 8001c20:	edc7 6a02 	vstr	s13, [r7, #8]
 8001c24:	ed87 7a03 	vstr	s14, [r7, #12]
 8001c28:	edc7 7a04 	vstr	s15, [r7, #16]

	Vec3 error = {(ref.x - attitude.x), (ref.y - attitude.y), (ref.z - attitude.z)};
 8001c2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c30:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c38:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8001c3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8001c4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c50:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c58:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	integral.x += error.x * dt;
 8001c5c:	4bca      	ldr	r3, [pc, #808]	@ (8001f88 <PID_Update+0x398>)
 8001c5e:	ed93 7a00 	vldr	s14, [r3]
 8001c62:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001c66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c72:	4bc5      	ldr	r3, [pc, #788]	@ (8001f88 <PID_Update+0x398>)
 8001c74:	edc3 7a00 	vstr	s15, [r3]
	integral.y += error.y * dt;
 8001c78:	4bc3      	ldr	r3, [pc, #780]	@ (8001f88 <PID_Update+0x398>)
 8001c7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c7e:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001c82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8e:	4bbe      	ldr	r3, [pc, #760]	@ (8001f88 <PID_Update+0x398>)
 8001c90:	edc3 7a01 	vstr	s15, [r3, #4]
	integral.z += error.z * dt;
 8001c94:	4bbc      	ldr	r3, [pc, #752]	@ (8001f88 <PID_Update+0x398>)
 8001c96:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c9a:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001c9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001caa:	4bb7      	ldr	r3, [pc, #732]	@ (8001f88 <PID_Update+0x398>)
 8001cac:	edc3 7a02 	vstr	s15, [r3, #8]


	outputs[0] = ROLL_KP*error.x + ROLL_KD*(error.x-error_prev.x)/dt + ROLL_KI*integral.x;
 8001cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc70 	bl	8000598 <__aeabi_f2d>
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4bb3      	ldr	r3, [pc, #716]	@ (8001f8c <PID_Update+0x39c>)
 8001cbe:	f7fe fcc3 	bl	8000648 <__aeabi_dmul>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4614      	mov	r4, r2
 8001cc8:	461d      	mov	r5, r3
 8001cca:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001cce:	4bb0      	ldr	r3, [pc, #704]	@ (8001f90 <PID_Update+0x3a0>)
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd8:	ee17 0a90 	vmov	r0, s15
 8001cdc:	f7fe fc5c 	bl	8000598 <__aeabi_f2d>
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	f7fe fcae 	bl	8000648 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7fe fc4f 	bl	8000598 <__aeabi_f2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4640      	mov	r0, r8
 8001d00:	4649      	mov	r1, r9
 8001d02:	f7fe fdcb 	bl	800089c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	f7fe fae5 	bl	80002dc <__adddf3>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4614      	mov	r4, r2
 8001d18:	461d      	mov	r5, r3
 8001d1a:	4b9b      	ldr	r3, [pc, #620]	@ (8001f88 <PID_Update+0x398>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fc3a 	bl	8000598 <__aeabi_f2d>
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	f7fe fc8c 	bl	8000648 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4620      	mov	r0, r4
 8001d36:	4629      	mov	r1, r5
 8001d38:	f7fe fad0 	bl	80002dc <__adddf3>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	f7fe ff78 	bl	8000c38 <__aeabi_d2f>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a92      	ldr	r2, [pc, #584]	@ (8001f94 <PID_Update+0x3a4>)
 8001d4c:	6013      	str	r3, [r2, #0]
	outputs[1] = PITCH_KP*error.y + PITCH_KD*(error.y-error_prev.y)/dt + PITCH_KI*integral.y;
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fc21 	bl	8000598 <__aeabi_f2d>
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	4b8c      	ldr	r3, [pc, #560]	@ (8001f8c <PID_Update+0x39c>)
 8001d5c:	f7fe fc74 	bl	8000648 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4614      	mov	r4, r2
 8001d66:	461d      	mov	r5, r3
 8001d68:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001d6c:	4b88      	ldr	r3, [pc, #544]	@ (8001f90 <PID_Update+0x3a0>)
 8001d6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d76:	ee17 0a90 	vmov	r0, s15
 8001d7a:	f7fe fc0d 	bl	8000598 <__aeabi_f2d>
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	f7fe fc5f 	bl	8000648 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4699      	mov	r9, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fc00 	bl	8000598 <__aeabi_f2d>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4640      	mov	r0, r8
 8001d9e:	4649      	mov	r1, r9
 8001da0:	f7fe fd7c 	bl	800089c <__aeabi_ddiv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4620      	mov	r0, r4
 8001daa:	4629      	mov	r1, r5
 8001dac:	f7fe fa96 	bl	80002dc <__adddf3>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4614      	mov	r4, r2
 8001db6:	461d      	mov	r5, r3
 8001db8:	4b73      	ldr	r3, [pc, #460]	@ (8001f88 <PID_Update+0x398>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fbeb 	bl	8000598 <__aeabi_f2d>
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	f7fe fc3d 	bl	8000648 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	f7fe fa81 	bl	80002dc <__adddf3>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe ff29 	bl	8000c38 <__aeabi_d2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a6a      	ldr	r2, [pc, #424]	@ (8001f94 <PID_Update+0x3a4>)
 8001dea:	6053      	str	r3, [r2, #4]
	outputs[2] = YAW_KP*error.z + YAW_KD*(error.z-error_prev.z)/dt + YAW_KI*integral.z;
 8001dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbd2 	bl	8000598 <__aeabi_f2d>
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b64      	ldr	r3, [pc, #400]	@ (8001f8c <PID_Update+0x39c>)
 8001dfa:	f7fe fc25 	bl	8000648 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4614      	mov	r4, r2
 8001e04:	461d      	mov	r5, r3
 8001e06:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001e0a:	4b61      	ldr	r3, [pc, #388]	@ (8001f90 <PID_Update+0x3a0>)
 8001e0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e14:	ee17 0a90 	vmov	r0, s15
 8001e18:	f7fe fbbe 	bl	8000598 <__aeabi_f2d>
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	f7fe fc10 	bl	8000648 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4690      	mov	r8, r2
 8001e2e:	4699      	mov	r9, r3
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7fe fbb1 	bl	8000598 <__aeabi_f2d>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4640      	mov	r0, r8
 8001e3c:	4649      	mov	r1, r9
 8001e3e:	f7fe fd2d 	bl	800089c <__aeabi_ddiv>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4620      	mov	r0, r4
 8001e48:	4629      	mov	r1, r5
 8001e4a:	f7fe fa47 	bl	80002dc <__adddf3>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4614      	mov	r4, r2
 8001e54:	461d      	mov	r5, r3
 8001e56:	4b4c      	ldr	r3, [pc, #304]	@ (8001f88 <PID_Update+0x398>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fb9c 	bl	8000598 <__aeabi_f2d>
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	f7fe fbee 	bl	8000648 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4620      	mov	r0, r4
 8001e72:	4629      	mov	r1, r5
 8001e74:	f7fe fa32 	bl	80002dc <__adddf3>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f7fe feda 	bl	8000c38 <__aeabi_d2f>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4a43      	ldr	r2, [pc, #268]	@ (8001f94 <PID_Update+0x3a4>)
 8001e88:	6093      	str	r3, [r2, #8]

	outputs[0] = outputs[0]* 500/M_PI_2 + 1500;
 8001e8a:	4b42      	ldr	r3, [pc, #264]	@ (8001f94 <PID_Update+0x3a4>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001f98 <PID_Update+0x3a8>
 8001e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e98:	ee17 0a90 	vmov	r0, s15
 8001e9c:	f7fe fb7c 	bl	8000598 <__aeabi_f2d>
 8001ea0:	a335      	add	r3, pc, #212	@ (adr r3, 8001f78 <PID_Update+0x388>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	f7fe fcf9 	bl	800089c <__aeabi_ddiv>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	a333      	add	r3, pc, #204	@ (adr r3, 8001f80 <PID_Update+0x390>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe fa10 	bl	80002dc <__adddf3>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7fe feb8 	bl	8000c38 <__aeabi_d2f>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4a32      	ldr	r2, [pc, #200]	@ (8001f94 <PID_Update+0x3a4>)
 8001ecc:	6013      	str	r3, [r2, #0]
	outputs[1] = outputs[1]* 500/M_PI_2 + 1500;
 8001ece:	4b31      	ldr	r3, [pc, #196]	@ (8001f94 <PID_Update+0x3a4>)
 8001ed0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ed4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001f98 <PID_Update+0x3a8>
 8001ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001edc:	ee17 0a90 	vmov	r0, s15
 8001ee0:	f7fe fb5a 	bl	8000598 <__aeabi_f2d>
 8001ee4:	a324      	add	r3, pc, #144	@ (adr r3, 8001f78 <PID_Update+0x388>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe fcd7 	bl	800089c <__aeabi_ddiv>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	a322      	add	r3, pc, #136	@ (adr r3, 8001f80 <PID_Update+0x390>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe f9ee 	bl	80002dc <__adddf3>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f7fe fe96 	bl	8000c38 <__aeabi_d2f>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4a21      	ldr	r2, [pc, #132]	@ (8001f94 <PID_Update+0x3a4>)
 8001f10:	6053      	str	r3, [r2, #4]
	outputs[2] = outputs[2]* 500/M_PI_2 + 1500;
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <PID_Update+0x3a4>)
 8001f14:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f18:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001f98 <PID_Update+0x3a8>
 8001f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f20:	ee17 0a90 	vmov	r0, s15
 8001f24:	f7fe fb38 	bl	8000598 <__aeabi_f2d>
 8001f28:	a313      	add	r3, pc, #76	@ (adr r3, 8001f78 <PID_Update+0x388>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe fcb5 	bl	800089c <__aeabi_ddiv>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	a311      	add	r3, pc, #68	@ (adr r3, 8001f80 <PID_Update+0x390>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	f7fe f9cc 	bl	80002dc <__adddf3>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f7fe fe74 	bl	8000c38 <__aeabi_d2f>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4a10      	ldr	r2, [pc, #64]	@ (8001f94 <PID_Update+0x3a4>)
 8001f54:	6093      	str	r3, [r2, #8]

	error_prev = (Vec3) {.x = error.x, .y = error.y, .z = error.z};
 8001f56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <PID_Update+0x3a0>)
 8001f5e:	6001      	str	r1, [r0, #0]
 8001f60:	490b      	ldr	r1, [pc, #44]	@ (8001f90 <PID_Update+0x3a0>)
 8001f62:	604a      	str	r2, [r1, #4]
 8001f64:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <PID_Update+0x3a0>)
 8001f66:	6093      	str	r3, [r2, #8]
}
 8001f68:	bf00      	nop
 8001f6a:	3738      	adds	r7, #56	@ 0x38
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f72:	bf00      	nop
 8001f74:	f3af 8000 	nop.w
 8001f78:	54442d18 	.word	0x54442d18
 8001f7c:	3ff921fb 	.word	0x3ff921fb
 8001f80:	00000000 	.word	0x00000000
 8001f84:	40977000 	.word	0x40977000
 8001f88:	2000032c 	.word	0x2000032c
 8001f8c:	3ff80000 	.word	0x3ff80000
 8001f90:	20000320 	.word	0x20000320
 8001f94:	20000834 	.word	0x20000834
 8001f98:	43fa0000 	.word	0x43fa0000

08001f9c <Sbus_Begin>:
 */


#include "Sbus.h"

HAL_StatusTypeDef Sbus_Begin(UART_HandleTypeDef *huart, Sbus *receiver){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	receiver->inSync = 1;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
	receiver->firstByte = 0;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
	receiver->counter = 0;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	HAL_StatusTypeDef status = HAL_UARTEx_ReceiveToIdle_IT(huart, receiver->buffer, 25); //Init Sbus Reception
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2219      	movs	r2, #25
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f009 fab9 	bl	800b53c <HAL_UARTEx_ReceiveToIdle_IT>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	73fb      	strb	r3, [r7, #15]
	//HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, receiver->buffer, 1);
	//HAL_StatusTypeDef status = HAL_UARTEx_ReceiveToIdle_DMA(huart, receiver->buffer, 25);
	if(status != HAL_OK) return status;
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <Sbus_Begin+0x3c>
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	e000      	b.n	8001fda <Sbus_Begin+0x3e>


	return status;
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <sbus_raw_to_us>:

int sbus_raw_to_us(uint16_t v) {
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]
	float us = ((v - 192) * 1000.0f / 1600.0f + 1000.0f);
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	3bc0      	subs	r3, #192	@ 0xc0
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ffa:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800205c <sbus_raw_to_us+0x78>
 8001ffe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002002:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002060 <sbus_raw_to_us+0x7c>
 8002006:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800200a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800205c <sbus_raw_to_us+0x78>
 800200e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002012:	edc7 7a03 	vstr	s15, [r7, #12]
	if (us < 1000.0f) us = 1000.0f;
 8002016:	edd7 7a03 	vldr	s15, [r7, #12]
 800201a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800205c <sbus_raw_to_us+0x78>
 800201e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002026:	d501      	bpl.n	800202c <sbus_raw_to_us+0x48>
 8002028:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <sbus_raw_to_us+0x80>)
 800202a:	60fb      	str	r3, [r7, #12]
	if (us > 2000.0f) us = 2000.0f;
 800202c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002030:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002068 <sbus_raw_to_us+0x84>
 8002034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	dd01      	ble.n	8002042 <sbus_raw_to_us+0x5e>
 800203e:	4b0b      	ldr	r3, [pc, #44]	@ (800206c <sbus_raw_to_us+0x88>)
 8002040:	60fb      	str	r3, [r7, #12]
	return us;
 8002042:	edd7 7a03 	vldr	s15, [r7, #12]
 8002046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800204a:	ee17 3a90 	vmov	r3, s15
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	447a0000 	.word	0x447a0000
 8002060:	44c80000 	.word	0x44c80000
 8002064:	447a0000 	.word	0x447a0000
 8002068:	44fa0000 	.word	0x44fa0000
 800206c:	44fa0000 	.word	0x44fa0000

08002070 <Sbus_decode>:

void Sbus_decode(uint8_t *buffer, float *channels){
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	@ 0x30
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]

	uint16_t raw_channels[18];

	raw_channels[0]  = ((buffer[1]    |buffer[2]<<8)                 & 0x07FF);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3301      	adds	r3, #1
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b21a      	sxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3302      	adds	r3, #2
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b21b      	sxth	r3, r3
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	b21b      	sxth	r3, r3
 800208e:	4313      	orrs	r3, r2
 8002090:	b21b      	sxth	r3, r3
 8002092:	b29b      	uxth	r3, r3
 8002094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002098:	b29b      	uxth	r3, r3
 800209a:	813b      	strh	r3, [r7, #8]
	raw_channels[1]  = ((buffer[2]>>3 |buffer[3]<<5)                 & 0x07FF);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3302      	adds	r3, #2
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	08db      	lsrs	r3, r3, #3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3303      	adds	r3, #3
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	015b      	lsls	r3, r3, #5
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b21b      	sxth	r3, r3
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020be:	b29b      	uxth	r3, r3
 80020c0:	817b      	strh	r3, [r7, #10]
	raw_channels[2]  = ((buffer[3]>>6 |buffer[4]<<2 |buffer[5]<<10)  & 0x07FF);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3303      	adds	r3, #3
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3304      	adds	r3, #4
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	b21b      	sxth	r3, r3
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	b21b      	sxth	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b21a      	sxth	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3305      	adds	r3, #5
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	b21b      	sxth	r3, r3
 80020e6:	029b      	lsls	r3, r3, #10
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	4313      	orrs	r3, r2
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	81bb      	strh	r3, [r7, #12]
	raw_channels[3]  = ((buffer[5]>>1 |buffer[6]<<7)                 & 0x07FF);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3305      	adds	r3, #5
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	085b      	lsrs	r3, r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	b21a      	sxth	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3306      	adds	r3, #6
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b21b      	sxth	r3, r3
 800210c:	01db      	lsls	r3, r3, #7
 800210e:	b21b      	sxth	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b21b      	sxth	r3, r3
 8002114:	b29b      	uxth	r3, r3
 8002116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211a:	b29b      	uxth	r3, r3
 800211c:	81fb      	strh	r3, [r7, #14]
	raw_channels[4]  = ((buffer[6]>>4 |buffer[7]<<4)                 & 0x07FF);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3306      	adds	r3, #6
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	b2db      	uxtb	r3, r3
 8002128:	b21a      	sxth	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3307      	adds	r3, #7
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b21b      	sxth	r3, r3
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	b21b      	sxth	r3, r3
 8002136:	4313      	orrs	r3, r2
 8002138:	b21b      	sxth	r3, r3
 800213a:	b29b      	uxth	r3, r3
 800213c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002140:	b29b      	uxth	r3, r3
 8002142:	823b      	strh	r3, [r7, #16]
	raw_channels[5]  = ((buffer[7]>>7 |buffer[8]<<1 |buffer[9]<<9)   & 0x07FF);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3307      	adds	r3, #7
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	09db      	lsrs	r3, r3, #7
 800214c:	b2db      	uxtb	r3, r3
 800214e:	b21a      	sxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3308      	adds	r3, #8
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b21b      	sxth	r3, r3
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	b21b      	sxth	r3, r3
 800215c:	4313      	orrs	r3, r2
 800215e:	b21a      	sxth	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3309      	adds	r3, #9
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b21b      	sxth	r3, r3
 8002168:	025b      	lsls	r3, r3, #9
 800216a:	b21b      	sxth	r3, r3
 800216c:	4313      	orrs	r3, r2
 800216e:	b21b      	sxth	r3, r3
 8002170:	b29b      	uxth	r3, r3
 8002172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002176:	b29b      	uxth	r3, r3
 8002178:	827b      	strh	r3, [r7, #18]
	raw_channels[6]  = ((buffer[9]>>2 |buffer[10]<<6)                & 0x07FF);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3309      	adds	r3, #9
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	b2db      	uxtb	r3, r3
 8002184:	b21a      	sxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	330a      	adds	r3, #10
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b21b      	sxth	r3, r3
 800218e:	019b      	lsls	r3, r3, #6
 8002190:	b21b      	sxth	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b21b      	sxth	r3, r3
 8002196:	b29b      	uxth	r3, r3
 8002198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800219c:	b29b      	uxth	r3, r3
 800219e:	82bb      	strh	r3, [r7, #20]
	raw_channels[7]  = ((buffer[10]>>5|buffer[11]<<3)                & 0x07FF);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	330a      	adds	r3, #10
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	330b      	adds	r3, #11
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b21b      	sxth	r3, r3
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	82fb      	strh	r3, [r7, #22]
	raw_channels[8]  = ((buffer[12]   |buffer[13]<<8)                & 0x07FF);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	330c      	adds	r3, #12
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	330d      	adds	r3, #13
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	b21b      	sxth	r3, r3
 80021de:	b29b      	uxth	r3, r3
 80021e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	833b      	strh	r3, [r7, #24]
	raw_channels[9]  = ((buffer[13]>>3|buffer[14]<<5)                & 0x07FF);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	330d      	adds	r3, #13
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	08db      	lsrs	r3, r3, #3
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	b21a      	sxth	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	330e      	adds	r3, #14
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	015b      	lsls	r3, r3, #5
 80021fe:	b21b      	sxth	r3, r3
 8002200:	4313      	orrs	r3, r2
 8002202:	b21b      	sxth	r3, r3
 8002204:	b29b      	uxth	r3, r3
 8002206:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800220a:	b29b      	uxth	r3, r3
 800220c:	837b      	strh	r3, [r7, #26]
	raw_channels[10] = ((buffer[14]>>6|buffer[15]<<2|buffer[16]<<10) & 0x07FF);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	330e      	adds	r3, #14
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	b2db      	uxtb	r3, r3
 8002218:	b21a      	sxth	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	330f      	adds	r3, #15
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b21b      	sxth	r3, r3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	b21b      	sxth	r3, r3
 8002226:	4313      	orrs	r3, r2
 8002228:	b21a      	sxth	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3310      	adds	r3, #16
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b21b      	sxth	r3, r3
 8002232:	029b      	lsls	r3, r3, #10
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21b      	sxth	r3, r3
 800223a:	b29b      	uxth	r3, r3
 800223c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002240:	b29b      	uxth	r3, r3
 8002242:	83bb      	strh	r3, [r7, #28]
	raw_channels[11] = ((buffer[16]>>1|buffer[17]<<7)                & 0x07FF);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3310      	adds	r3, #16
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	b21a      	sxth	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3311      	adds	r3, #17
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b21b      	sxth	r3, r3
 8002258:	01db      	lsls	r3, r3, #7
 800225a:	b21b      	sxth	r3, r3
 800225c:	4313      	orrs	r3, r2
 800225e:	b21b      	sxth	r3, r3
 8002260:	b29b      	uxth	r3, r3
 8002262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002266:	b29b      	uxth	r3, r3
 8002268:	83fb      	strh	r3, [r7, #30]
	raw_channels[12] = ((buffer[17]>>4|buffer[18]<<4)                & 0x07FF);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3311      	adds	r3, #17
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	b2db      	uxtb	r3, r3
 8002274:	b21a      	sxth	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3312      	adds	r3, #18
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b21b      	sxth	r3, r3
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	b21b      	sxth	r3, r3
 8002282:	4313      	orrs	r3, r2
 8002284:	b21b      	sxth	r3, r3
 8002286:	b29b      	uxth	r3, r3
 8002288:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800228c:	b29b      	uxth	r3, r3
 800228e:	843b      	strh	r3, [r7, #32]
	raw_channels[13] = ((buffer[18]>>7|buffer[19]<<1|buffer[20]<<9)  & 0x07FF);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3312      	adds	r3, #18
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	09db      	lsrs	r3, r3, #7
 8002298:	b2db      	uxtb	r3, r3
 800229a:	b21a      	sxth	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3313      	adds	r3, #19
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	4313      	orrs	r3, r2
 80022aa:	b21a      	sxth	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3314      	adds	r3, #20
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	025b      	lsls	r3, r3, #9
 80022b6:	b21b      	sxth	r3, r3
 80022b8:	4313      	orrs	r3, r2
 80022ba:	b21b      	sxth	r3, r3
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	847b      	strh	r3, [r7, #34]	@ 0x22
	raw_channels[14] = ((buffer[20]>>2|buffer[21]<<6)                & 0x07FF);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3314      	adds	r3, #20
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3315      	adds	r3, #21
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b21b      	sxth	r3, r3
 80022da:	019b      	lsls	r3, r3, #6
 80022dc:	b21b      	sxth	r3, r3
 80022de:	4313      	orrs	r3, r2
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
	raw_channels[15] = ((buffer[21]>>5|buffer[22]<<3)                & 0x07FF);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3315      	adds	r3, #21
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	b21a      	sxth	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3316      	adds	r3, #22
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b21b      	sxth	r3, r3
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	b21b      	sxth	r3, r3
 8002304:	4313      	orrs	r3, r2
 8002306:	b21b      	sxth	r3, r3
 8002308:	b29b      	uxth	r3, r3
 800230a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800230e:	b29b      	uxth	r3, r3
 8002310:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (buffer[23] & (1 << 0)) {
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3317      	adds	r3, #23
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <Sbus_decode+0x2b6>
    	raw_channels[16] = 1;
 8002320:	2301      	movs	r3, #1
 8002322:	853b      	strh	r3, [r7, #40]	@ 0x28
 8002324:	e001      	b.n	800232a <Sbus_decode+0x2ba>
    }
    else {
    	raw_channels[16] = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    if (buffer[23] & (1 << 1)) {
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3317      	adds	r3, #23
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <Sbus_decode+0x2ce>
    	raw_channels[17] = 1;
 8002338:	2301      	movs	r3, #1
 800233a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800233c:	e001      	b.n	8002342 <Sbus_decode+0x2d2>
    }
    else {
    	raw_channels[17] = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    for(int i = 0; i < 18; i++){
 8002342:	2300      	movs	r3, #0
 8002344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002346:	e015      	b.n	8002374 <Sbus_decode+0x304>
    	channels[i] = sbus_raw_to_us(raw_channels[i]);
 8002348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	3330      	adds	r3, #48	@ 0x30
 800234e:	443b      	add	r3, r7
 8002350:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fe45 	bl	8001fe4 <sbus_raw_to_us>
 800235a:	ee07 0a90 	vmov	s15, r0
 800235e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800236a:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < 18; i++){
 800236e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002370:	3301      	adds	r3, #1
 8002372:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002376:	2b11      	cmp	r3, #17
 8002378:	dde6      	ble.n	8002348 <Sbus_decode+0x2d8>
    }
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	3730      	adds	r7, #48	@ 0x30
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <Servo_Begin>:
 *      Author: sergi
 */

#include "Servo.h"

void Servo_Begin(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3){
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 800238e:	2100      	movs	r1, #0
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f006 ff79 	bl	8009288 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 8002396:	2104      	movs	r1, #4
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f006 ff75 	bl	8009288 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_3);
 800239e:	2108      	movs	r1, #8
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f006 ff71 	bl	8009288 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_4);
 80023a6:	210c      	movs	r1, #12
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f006 ff6d 	bl	8009288 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 80023ae:	2100      	movs	r1, #0
 80023b0:	6838      	ldr	r0, [r7, #0]
 80023b2:	f006 ff69 	bl	8009288 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 80023b6:	2104      	movs	r1, #4
 80023b8:	6838      	ldr	r0, [r7, #0]
 80023ba:	f006 ff65 	bl	8009288 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_3);
 80023be:	2108      	movs	r1, #8
 80023c0:	6838      	ldr	r0, [r7, #0]
 80023c2:	f006 ff61 	bl	8009288 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_4);
 80023c6:	210c      	movs	r1, #12
 80023c8:	6838      	ldr	r0, [r7, #0]
 80023ca:	f006 ff5d 	bl	8009288 <HAL_TIM_PWM_Start>

}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <Servo_Move>:

void Servo_Move(TIM_HandleTypeDef *timerHandle, int channel, float pulse_width_us){
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	ed87 0a01 	vstr	s0, [r7, #4]
	if(pulse_width_us > 2000.0f) pulse_width_us = 2000.0f;
 80023e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80023ea:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80024a0 <Servo_Move+0xc8>
 80023ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f6:	dd01      	ble.n	80023fc <Servo_Move+0x24>
 80023f8:	4b2a      	ldr	r3, [pc, #168]	@ (80024a4 <Servo_Move+0xcc>)
 80023fa:	607b      	str	r3, [r7, #4]
	if(pulse_width_us < 1000.0f) pulse_width_us = 1000.0f;
 80023fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002400:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80024a8 <Servo_Move+0xd0>
 8002404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240c:	d501      	bpl.n	8002412 <Servo_Move+0x3a>
 800240e:	4b27      	ldr	r3, [pc, #156]	@ (80024ac <Servo_Move+0xd4>)
 8002410:	607b      	str	r3, [r7, #4]
	uint16_t compare = pulse_width_us * 1.8;
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe f8c0 	bl	8000598 <__aeabi_f2d>
 8002418:	a31f      	add	r3, pc, #124	@ (adr r3, 8002498 <Servo_Move+0xc0>)
 800241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241e:	f7fe f913 	bl	8000648 <__aeabi_dmul>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	f7fe fbe5 	bl	8000bf8 <__aeabi_d2uiz>
 800242e:	4603      	mov	r3, r0
 8002430:	82fb      	strh	r3, [r7, #22]
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d104      	bne.n	8002442 <Servo_Move+0x6a>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	8afa      	ldrh	r2, [r7, #22]
 800243e:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8002440:	e023      	b.n	800248a <Servo_Move+0xb2>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b04      	cmp	r3, #4
 8002446:	d104      	bne.n	8002452 <Servo_Move+0x7a>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	8afb      	ldrh	r3, [r7, #22]
 800244e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002450:	e01b      	b.n	800248a <Servo_Move+0xb2>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b08      	cmp	r3, #8
 8002456:	d104      	bne.n	8002462 <Servo_Move+0x8a>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	8afb      	ldrh	r3, [r7, #22]
 800245e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002460:	e013      	b.n	800248a <Servo_Move+0xb2>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b0c      	cmp	r3, #12
 8002466:	d104      	bne.n	8002472 <Servo_Move+0x9a>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	8afb      	ldrh	r3, [r7, #22]
 800246e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002470:	e00b      	b.n	800248a <Servo_Move+0xb2>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b10      	cmp	r3, #16
 8002476:	d104      	bne.n	8002482 <Servo_Move+0xaa>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	8afb      	ldrh	r3, [r7, #22]
 800247e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8002480:	e003      	b.n	800248a <Servo_Move+0xb2>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	8afb      	ldrh	r3, [r7, #22]
 8002488:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	f3af 8000 	nop.w
 8002498:	cccccccd 	.word	0xcccccccd
 800249c:	3ffccccc 	.word	0x3ffccccc
 80024a0:	44fa0000 	.word	0x44fa0000
 80024a4:	44fa0000 	.word	0x44fa0000
 80024a8:	447a0000 	.word	0x447a0000
 80024ac:	447a0000 	.word	0x447a0000

080024b0 <Servo_Update>:

void Servo_Update(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3, float *outputs){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
	Servo_Move(htim2, TIM_CHANNEL_1, outputs[0]);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	edd3 7a00 	vldr	s15, [r3]
 80024c2:	eeb0 0a67 	vmov.f32	s0, s15
 80024c6:	2100      	movs	r1, #0
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f7ff ff85 	bl	80023d8 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_2, outputs[1]);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3304      	adds	r3, #4
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	eeb0 0a67 	vmov.f32	s0, s15
 80024da:	2104      	movs	r1, #4
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff ff7b 	bl	80023d8 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_3, outputs[2]);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3308      	adds	r3, #8
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	eeb0 0a67 	vmov.f32	s0, s15
 80024ee:	2108      	movs	r1, #8
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f7ff ff71 	bl	80023d8 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_4, outputs[3]);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	330c      	adds	r3, #12
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002502:	210c      	movs	r1, #12
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f7ff ff67 	bl	80023d8 <Servo_Move>

	Servo_Move(htim3, TIM_CHANNEL_1, outputs[4]);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3310      	adds	r3, #16
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	eeb0 0a67 	vmov.f32	s0, s15
 8002516:	2100      	movs	r1, #0
 8002518:	68b8      	ldr	r0, [r7, #8]
 800251a:	f7ff ff5d 	bl	80023d8 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_2, outputs[5]);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3314      	adds	r3, #20
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	eeb0 0a67 	vmov.f32	s0, s15
 800252a:	2104      	movs	r1, #4
 800252c:	68b8      	ldr	r0, [r7, #8]
 800252e:	f7ff ff53 	bl	80023d8 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_3, outputs[6]);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3318      	adds	r3, #24
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	eeb0 0a67 	vmov.f32	s0, s15
 800253e:	2108      	movs	r1, #8
 8002540:	68b8      	ldr	r0, [r7, #8]
 8002542:	f7ff ff49 	bl	80023d8 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_4, outputs[7]);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	331c      	adds	r3, #28
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	eeb0 0a67 	vmov.f32	s0, s15
 8002552:	210c      	movs	r1, #12
 8002554:	68b8      	ldr	r0, [r7, #8]
 8002556:	f7ff ff3f 	bl	80023d8 <Servo_Move>
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_UARTEx_RxEventCallback>:
float outputs[8];

Flight_Mode flight_mode;


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
			if(status != HAL_OK){
				Error_Handler();
			}
		}*/

	status = HAL_UARTEx_ReceiveToIdle_IT(&huart4, receiver.buffer, 25);
 8002570:	2219      	movs	r2, #25
 8002572:	490f      	ldr	r1, [pc, #60]	@ (80025b0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8002574:	480f      	ldr	r0, [pc, #60]	@ (80025b4 <HAL_UARTEx_RxEventCallback+0x50>)
 8002576:	f008 ffe1 	bl	800b53c <HAL_UARTEx_ReceiveToIdle_IT>
 800257a:	4603      	mov	r3, r0
 800257c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_UARTEx_RxEventCallback+0x24>
		Error_Handler();
 8002584:	f000 fd74 	bl	8003070 <Error_Handler>
	}

	if(receiver.buffer[0] == 0x0F && receiver.buffer[24] == 0x00) {
 8002588:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <HAL_UARTEx_RxEventCallback+0x4c>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b0f      	cmp	r3, #15
 800258e:	d10b      	bne.n	80025a8 <HAL_UARTEx_RxEventCallback+0x44>
 8002590:	4b07      	ldr	r3, [pc, #28]	@ (80025b0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8002592:	7e1b      	ldrb	r3, [r3, #24]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d107      	bne.n	80025a8 <HAL_UARTEx_RxEventCallback+0x44>

		Sbus_decode(receiver.buffer, receiver.channels);
 8002598:	4907      	ldr	r1, [pc, #28]	@ (80025b8 <HAL_UARTEx_RxEventCallback+0x54>)
 800259a:	4805      	ldr	r0, [pc, #20]	@ (80025b0 <HAL_UARTEx_RxEventCallback+0x4c>)
 800259c:	f7ff fd68 	bl	8002070 <Sbus_decode>
		receiver.dataRdy = 1;
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <HAL_UARTEx_RxEventCallback+0x4c>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

	}
}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	2000078c 	.word	0x2000078c
 80025b4:	200005f0 	.word	0x200005f0
 80025b8:	200007a8 	.word	0x200007a8

080025bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == IMU_INT_Pin){
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d107      	bne.n	80025dc <HAL_GPIO_EXTI_Callback+0x20>
		if(imu.ready){
 80025cc:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_GPIO_EXTI_Callback+0x28>)
 80025ce:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_GPIO_EXTI_Callback+0x20>
			ICM42688_Read_DMA(&imu);
 80025d6:	4803      	ldr	r0, [pc, #12]	@ (80025e4 <HAL_GPIO_EXTI_Callback+0x28>)
 80025d8:	f7ff fae4 	bl	8001ba4 <ICM42688_Read_DMA>
		}

	}

}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	200007f4 	.word	0x200007f4

080025e8 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi1.Instance){
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b09      	ldr	r3, [pc, #36]	@ (800261c <HAL_SPI_TxRxCpltCallback+0x34>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d10b      	bne.n	8002614 <HAL_SPI_TxRxCpltCallback+0x2c>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80025fc:	2201      	movs	r2, #1
 80025fe:	2110      	movs	r1, #16
 8002600:	4807      	ldr	r0, [pc, #28]	@ (8002620 <HAL_SPI_TxRxCpltCallback+0x38>)
 8002602:	f002 fe1b 	bl	800523c <HAL_GPIO_WritePin>

		ICM42688_Process_Buffer(&imu);
 8002606:	4807      	ldr	r0, [pc, #28]	@ (8002624 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8002608:	f7ff f956 	bl	80018b8 <ICM42688_Process_Buffer>
		imu.dataRdy = 1;
 800260c:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <HAL_SPI_TxRxCpltCallback+0x3c>)
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000434 	.word	0x20000434
 8002620:	40020000 	.word	0x40020000
 8002624:	200007f4 	.word	0x200007f4

08002628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b099      	sub	sp, #100	@ 0x64
 800262c:	af18      	add	r7, sp, #96	@ 0x60
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800262e:	f000 fcf3 	bl	8003018 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002632:	f001 fa1c 	bl	8003a6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002636:	f000 f931 	bl	800289c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800263a:	f000 fc61 	bl	8002f00 <MX_GPIO_Init>
  MX_DMA_Init();
 800263e:	f000 fc31 	bl	8002ea4 <MX_DMA_Init>
  MX_ADC1_Init();
 8002642:	f000 f997 	bl	8002974 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002646:	f000 f9e7 	bl	8002a18 <MX_I2C1_Init>
  MX_SPI1_Init();
 800264a:	f000 fa25 	bl	8002a98 <MX_SPI1_Init>
  MX_TIM2_Init();
 800264e:	f000 fa61 	bl	8002b14 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002652:	f000 faf7 	bl	8002c44 <MX_TIM3_Init>
  MX_UART4_Init();
 8002656:	f000 fb8d 	bl	8002d74 <MX_UART4_Init>
  MX_UART5_Init();
 800265a:	f000 fbc3 	bl	8002de4 <MX_UART5_Init>
  MX_USART6_UART_Init();
 800265e:	f000 fbf1 	bl	8002e44 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 8002662:	f00c fb1f 	bl	800eca4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  status = Sbus_Begin(&huart4, &receiver); //Init Sbus Reception
 8002666:	497a      	ldr	r1, [pc, #488]	@ (8002850 <main+0x228>)
 8002668:	487a      	ldr	r0, [pc, #488]	@ (8002854 <main+0x22c>)
 800266a:	f7ff fc97 	bl	8001f9c <Sbus_Begin>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	4b79      	ldr	r3, [pc, #484]	@ (8002858 <main+0x230>)
 8002674:	701a      	strb	r2, [r3, #0]
  if(status != HAL_OK) {
 8002676:	4b78      	ldr	r3, [pc, #480]	@ (8002858 <main+0x230>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <main+0x5a>
	  Error_Handler();
 800267e:	f000 fcf7 	bl	8003070 <Error_Handler>
  }

  status = ICM42688_Begin(&imu, &hspi1);
 8002682:	4976      	ldr	r1, [pc, #472]	@ (800285c <main+0x234>)
 8002684:	4876      	ldr	r0, [pc, #472]	@ (8002860 <main+0x238>)
 8002686:	f7fe fff6 	bl	8001676 <ICM42688_Begin>
 800268a:	4603      	mov	r3, r0
 800268c:	461a      	mov	r2, r3
 800268e:	4b72      	ldr	r3, [pc, #456]	@ (8002858 <main+0x230>)
 8002690:	701a      	strb	r2, [r3, #0]
  if(status != HAL_OK) {
 8002692:	4b71      	ldr	r3, [pc, #452]	@ (8002858 <main+0x230>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <main+0x76>
	  Error_Handler();
 800269a:	f000 fce9 	bl	8003070 <Error_Handler>
  }

  HAL_ADC_Start_DMA(&hadc1, &battery, 1); //Start DMA Read for Vbat ADC
 800269e:	2201      	movs	r2, #1
 80026a0:	4970      	ldr	r1, [pc, #448]	@ (8002864 <main+0x23c>)
 80026a2:	4871      	ldr	r0, [pc, #452]	@ (8002868 <main+0x240>)
 80026a4:	f001 faa8 	bl	8003bf8 <HAL_ADC_Start_DMA>
  if(status != HAL_OK) {
 80026a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002858 <main+0x230>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <main+0x8c>
	  Error_Handler();
 80026b0:	f000 fcde 	bl	8003070 <Error_Handler>
  }

  AHRS_Init();
 80026b4:	f7fe fca6 	bl	8001004 <AHRS_Init>

  Servo_Begin(&htim2, &htim3);
 80026b8:	496c      	ldr	r1, [pc, #432]	@ (800286c <main+0x244>)
 80026ba:	486d      	ldr	r0, [pc, #436]	@ (8002870 <main+0x248>)
 80026bc:	f7ff fe62 	bl	8002384 <Servo_Begin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  vbat = 0.00886230468f * battery; // 3.3/4096*11
 80026c0:	4b68      	ldr	r3, [pc, #416]	@ (8002864 <main+0x23c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	ee07 3a90 	vmov	s15, r3
 80026c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026cc:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002874 <main+0x24c>
 80026d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d4:	4b68      	ldr	r3, [pc, #416]	@ (8002878 <main+0x250>)
 80026d6:	edc3 7a00 	vstr	s15, [r3]

	  if(imu.dataRdy){
 80026da:	4b61      	ldr	r3, [pc, #388]	@ (8002860 <main+0x238>)
 80026dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d023      	beq.n	800272c <main+0x104>


		  AHRS_Update_Gyro(imu.gyro, DELTA_T);
 80026e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002860 <main+0x238>)
 80026e6:	edd3 6a04 	vldr	s13, [r3, #16]
 80026ea:	ed93 7a05 	vldr	s14, [r3, #20]
 80026ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80026f2:	eddf 1a62 	vldr	s3, [pc, #392]	@ 800287c <main+0x254>
 80026f6:	eeb0 0a66 	vmov.f32	s0, s13
 80026fa:	eef0 0a47 	vmov.f32	s1, s14
 80026fe:	eeb0 1a67 	vmov.f32	s2, s15
 8002702:	f7fe fcb5 	bl	8001070 <AHRS_Update_Gyro>

		  AHRS_Update_Acc(imu.accel);
 8002706:	4b56      	ldr	r3, [pc, #344]	@ (8002860 <main+0x238>)
 8002708:	edd3 6a01 	vldr	s13, [r3, #4]
 800270c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002710:	edd3 7a03 	vldr	s15, [r3, #12]
 8002714:	eeb0 0a66 	vmov.f32	s0, s13
 8002718:	eef0 0a47 	vmov.f32	s1, s14
 800271c:	eeb0 1a67 	vmov.f32	s2, s15
 8002720:	f7fe fd32 	bl	8001188 <AHRS_Update_Acc>

		  AHRS_Update_Complementary_Filter(0.95);
 8002724:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8002880 <main+0x258>
 8002728:	f7fe fd8a 	bl	8001240 <AHRS_Update_Complementary_Filter>


	  }

	  if(receiver.dataRdy){
 800272c:	4b48      	ldr	r3, [pc, #288]	@ (8002850 <main+0x228>)
 800272e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8002732:	2b00      	cmp	r3, #0
 8002734:	d05c      	beq.n	80027f0 <main+0x1c8>
		  if(receiver.channels[FLIGHT_MODE_CHANNEL] < 1200){
 8002736:	4b46      	ldr	r3, [pc, #280]	@ (8002850 <main+0x228>)
 8002738:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800273c:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002884 <main+0x25c>
 8002740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002748:	d503      	bpl.n	8002752 <main+0x12a>
			  flight_mode = MANUAL_MODE;
 800274a:	4b4f      	ldr	r3, [pc, #316]	@ (8002888 <main+0x260>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	e01a      	b.n	8002788 <main+0x160>
		  }
		  else if (receiver.channels[FLIGHT_MODE_CHANNEL] >= 1200 &&
 8002752:	4b3f      	ldr	r3, [pc, #252]	@ (8002850 <main+0x228>)
 8002754:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002758:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8002884 <main+0x25c>
 800275c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002764:	db0d      	blt.n	8002782 <main+0x15a>
				  receiver.channels[FLIGHT_MODE_CHANNEL] < 1800){
 8002766:	4b3a      	ldr	r3, [pc, #232]	@ (8002850 <main+0x228>)
 8002768:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
		  else if (receiver.channels[FLIGHT_MODE_CHANNEL] >= 1200 &&
 800276c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800288c <main+0x264>
 8002770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002778:	d503      	bpl.n	8002782 <main+0x15a>
			  flight_mode = STABILIZED_MODE;
 800277a:	4b43      	ldr	r3, [pc, #268]	@ (8002888 <main+0x260>)
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e002      	b.n	8002788 <main+0x160>
		  }
		  else{
			  flight_mode = ACRO_MODE;
 8002782:	4b41      	ldr	r3, [pc, #260]	@ (8002888 <main+0x260>)
 8002784:	2202      	movs	r2, #2
 8002786:	701a      	strb	r2, [r3, #0]
		  }

		  if(flight_mode == ACRO_MODE) Acro_Mode(receiver);
 8002788:	4b3f      	ldr	r3, [pc, #252]	@ (8002888 <main+0x260>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d10c      	bne.n	80027aa <main+0x182>
 8002790:	4c2f      	ldr	r4, [pc, #188]	@ (8002850 <main+0x228>)
 8002792:	4668      	mov	r0, sp
 8002794:	f104 0310 	add.w	r3, r4, #16
 8002798:	2258      	movs	r2, #88	@ 0x58
 800279a:	4619      	mov	r1, r3
 800279c:	f00d fe8f 	bl	80104be <memcpy>
 80027a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027a4:	f7fe fe6c 	bl	8001480 <Acro_Mode>
 80027a8:	e022      	b.n	80027f0 <main+0x1c8>
		  else if (flight_mode == STABILIZED_MODE) Stabilized_Mode(receiver);
 80027aa:	4b37      	ldr	r3, [pc, #220]	@ (8002888 <main+0x260>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d10c      	bne.n	80027cc <main+0x1a4>
 80027b2:	4c27      	ldr	r4, [pc, #156]	@ (8002850 <main+0x228>)
 80027b4:	4668      	mov	r0, sp
 80027b6:	f104 0310 	add.w	r3, r4, #16
 80027ba:	2258      	movs	r2, #88	@ 0x58
 80027bc:	4619      	mov	r1, r3
 80027be:	f00d fe7e 	bl	80104be <memcpy>
 80027c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027c6:	f7fe fd93 	bl	80012f0 <Stabilized_Mode>
 80027ca:	e011      	b.n	80027f0 <main+0x1c8>
		  else if(flight_mode == MANUAL_MODE) Manual_Mode(receiver, outputs);
 80027cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002888 <main+0x260>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10d      	bne.n	80027f0 <main+0x1c8>
 80027d4:	4c1e      	ldr	r4, [pc, #120]	@ (8002850 <main+0x228>)
 80027d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002890 <main+0x268>)
 80027d8:	9316      	str	r3, [sp, #88]	@ 0x58
 80027da:	4668      	mov	r0, sp
 80027dc:	f104 0310 	add.w	r3, r4, #16
 80027e0:	2258      	movs	r2, #88	@ 0x58
 80027e2:	4619      	mov	r1, r3
 80027e4:	f00d fe6b 	bl	80104be <memcpy>
 80027e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027ec:	f7fe ff2c 	bl	8001648 <Manual_Mode>

	  }

	  //if(imu.dataRdy && receiver.dataRdy){
		  if(flight_mode == ACRO_MODE || flight_mode == STABILIZED_MODE){
 80027f0:	4b25      	ldr	r3, [pc, #148]	@ (8002888 <main+0x260>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d003      	beq.n	8002800 <main+0x1d8>
 80027f8:	4b23      	ldr	r3, [pc, #140]	@ (8002888 <main+0x260>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d11d      	bne.n	800283c <main+0x214>
			  PID_Update(ref, attitude, DELTA_T);
 8002800:	4b24      	ldr	r3, [pc, #144]	@ (8002894 <main+0x26c>)
 8002802:	ed93 5a00 	vldr	s10, [r3]
 8002806:	edd3 5a01 	vldr	s11, [r3, #4]
 800280a:	ed93 6a02 	vldr	s12, [r3, #8]
 800280e:	4b22      	ldr	r3, [pc, #136]	@ (8002898 <main+0x270>)
 8002810:	edd3 6a00 	vldr	s13, [r3]
 8002814:	ed93 7a01 	vldr	s14, [r3, #4]
 8002818:	edd3 7a02 	vldr	s15, [r3, #8]
 800281c:	ed9f 3a17 	vldr	s6, [pc, #92]	@ 800287c <main+0x254>
 8002820:	eef0 1a45 	vmov.f32	s3, s10
 8002824:	eeb0 2a65 	vmov.f32	s4, s11
 8002828:	eef0 2a46 	vmov.f32	s5, s12
 800282c:	eeb0 0a66 	vmov.f32	s0, s13
 8002830:	eef0 0a47 	vmov.f32	s1, s14
 8002834:	eeb0 1a67 	vmov.f32	s2, s15
 8002838:	f7ff f9da 	bl	8001bf0 <PID_Update>
		  }
		  Servo_Update(&htim2, &htim3, outputs);
 800283c:	4a14      	ldr	r2, [pc, #80]	@ (8002890 <main+0x268>)
 800283e:	490b      	ldr	r1, [pc, #44]	@ (800286c <main+0x244>)
 8002840:	480b      	ldr	r0, [pc, #44]	@ (8002870 <main+0x248>)
 8002842:	f7ff fe35 	bl	80024b0 <Servo_Update>

	  //sprintf(usbBuffer, "w%fwa%fab%fbc%fc\r\n", q.w, q.x, q.y, q.z);
	  //sprintf(usbBuffer, "%f, %f\r\n", roll, pitch);
	  //CDC_Transmit_FS((uint8_t *) usbBuffer, strlen(usbBuffer));

	  HAL_Delay(DELTA_T*1000);
 8002846:	200a      	movs	r0, #10
 8002848:	f001 f96e 	bl	8003b28 <HAL_Delay>
	  vbat = 0.00886230468f * battery; // 3.3/4096*11
 800284c:	e738      	b.n	80026c0 <main+0x98>
 800284e:	bf00      	nop
 8002850:	2000078c 	.word	0x2000078c
 8002854:	200005f0 	.word	0x200005f0
 8002858:	20000788 	.word	0x20000788
 800285c:	20000434 	.word	0x20000434
 8002860:	200007f4 	.word	0x200007f4
 8002864:	2000082c 	.word	0x2000082c
 8002868:	20000338 	.word	0x20000338
 800286c:	200005a4 	.word	0x200005a4
 8002870:	20000558 	.word	0x20000558
 8002874:	3c113333 	.word	0x3c113333
 8002878:	20000830 	.word	0x20000830
 800287c:	3c23d70a 	.word	0x3c23d70a
 8002880:	3f733333 	.word	0x3f733333
 8002884:	44960000 	.word	0x44960000
 8002888:	20000854 	.word	0x20000854
 800288c:	44e10000 	.word	0x44e10000
 8002890:	20000834 	.word	0x20000834
 8002894:	20000308 	.word	0x20000308
 8002898:	20000314 	.word	0x20000314

0800289c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b094      	sub	sp, #80	@ 0x50
 80028a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028a2:	f107 0320 	add.w	r3, r7, #32
 80028a6:	2230      	movs	r2, #48	@ 0x30
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f00d fd77 	bl	801039e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028b0:	f107 030c 	add.w	r3, r7, #12
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c0:	4b2a      	ldr	r3, [pc, #168]	@ (800296c <SystemClock_Config+0xd0>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	4a29      	ldr	r2, [pc, #164]	@ (800296c <SystemClock_Config+0xd0>)
 80028c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80028cc:	4b27      	ldr	r3, [pc, #156]	@ (800296c <SystemClock_Config+0xd0>)
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028d8:	4b25      	ldr	r3, [pc, #148]	@ (8002970 <SystemClock_Config+0xd4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a24      	ldr	r2, [pc, #144]	@ (8002970 <SystemClock_Config+0xd4>)
 80028de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4b22      	ldr	r3, [pc, #136]	@ (8002970 <SystemClock_Config+0xd4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028f0:	2301      	movs	r3, #1
 80028f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028fa:	2302      	movs	r3, #2
 80028fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002904:	2304      	movs	r3, #4
 8002906:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002908:	23d8      	movs	r3, #216	@ 0xd8
 800290a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800290c:	2302      	movs	r3, #2
 800290e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002910:	2309      	movs	r3, #9
 8002912:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002914:	f107 0320 	add.w	r3, r7, #32
 8002918:	4618      	mov	r0, r3
 800291a:	f004 f8cf 	bl	8006abc <HAL_RCC_OscConfig>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002924:	f000 fba4 	bl	8003070 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002928:	f004 f878 	bl	8006a1c <HAL_PWREx_EnableOverDrive>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002932:	f000 fb9d 	bl	8003070 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002936:	230f      	movs	r3, #15
 8002938:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800293a:	2302      	movs	r3, #2
 800293c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002942:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002946:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800294c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800294e:	f107 030c 	add.w	r3, r7, #12
 8002952:	2107      	movs	r1, #7
 8002954:	4618      	mov	r0, r3
 8002956:	f004 fb55 	bl	8007004 <HAL_RCC_ClockConfig>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002960:	f000 fb86 	bl	8003070 <Error_Handler>
  }
}
 8002964:	bf00      	nop
 8002966:	3750      	adds	r7, #80	@ 0x50
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	40007000 	.word	0x40007000

08002974 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800297a:	463b      	mov	r3, r7
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002986:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <MX_ADC1_Init+0x98>)
 8002988:	4a21      	ldr	r2, [pc, #132]	@ (8002a10 <MX_ADC1_Init+0x9c>)
 800298a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800298c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a0c <MX_ADC1_Init+0x98>)
 800298e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002992:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002994:	4b1d      	ldr	r3, [pc, #116]	@ (8002a0c <MX_ADC1_Init+0x98>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800299a:	4b1c      	ldr	r3, [pc, #112]	@ (8002a0c <MX_ADC1_Init+0x98>)
 800299c:	2200      	movs	r2, #0
 800299e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80029a0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a0c <MX_ADC1_Init+0x98>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029a6:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <MX_ADC1_Init+0x98>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029ae:	4b17      	ldr	r3, [pc, #92]	@ (8002a0c <MX_ADC1_Init+0x98>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029b4:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <MX_ADC1_Init+0x98>)
 80029b6:	4a17      	ldr	r2, [pc, #92]	@ (8002a14 <MX_ADC1_Init+0xa0>)
 80029b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029ba:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <MX_ADC1_Init+0x98>)
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80029c0:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <MX_ADC1_Init+0x98>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80029c6:	4b11      	ldr	r3, [pc, #68]	@ (8002a0c <MX_ADC1_Init+0x98>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029ce:	4b0f      	ldr	r3, [pc, #60]	@ (8002a0c <MX_ADC1_Init+0x98>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029d4:	480d      	ldr	r0, [pc, #52]	@ (8002a0c <MX_ADC1_Init+0x98>)
 80029d6:	f001 f8cb 	bl	8003b70 <HAL_ADC_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80029e0:	f000 fb46 	bl	8003070 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80029e4:	230a      	movs	r3, #10
 80029e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029e8:	2301      	movs	r3, #1
 80029ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80029ec:	2307      	movs	r3, #7
 80029ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029f0:	463b      	mov	r3, r7
 80029f2:	4619      	mov	r1, r3
 80029f4:	4805      	ldr	r0, [pc, #20]	@ (8002a0c <MX_ADC1_Init+0x98>)
 80029f6:	f001 fa1b 	bl	8003e30 <HAL_ADC_ConfigChannel>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002a00:	f000 fb36 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a04:	bf00      	nop
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000338 	.word	0x20000338
 8002a10:	40012000 	.word	0x40012000
 8002a14:	0f000001 	.word	0x0f000001

08002a18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a8c <MX_I2C1_Init+0x74>)
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002a90 <MX_I2C1_Init+0x78>)
 8002a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002a22:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <MX_I2C1_Init+0x74>)
 8002a24:	4a1b      	ldr	r2, [pc, #108]	@ (8002a94 <MX_I2C1_Init+0x7c>)
 8002a26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a28:	4b18      	ldr	r3, [pc, #96]	@ (8002a8c <MX_I2C1_Init+0x74>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a2e:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <MX_I2C1_Init+0x74>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a34:	4b15      	ldr	r3, [pc, #84]	@ (8002a8c <MX_I2C1_Init+0x74>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a3a:	4b14      	ldr	r3, [pc, #80]	@ (8002a8c <MX_I2C1_Init+0x74>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a40:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <MX_I2C1_Init+0x74>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a46:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <MX_I2C1_Init+0x74>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <MX_I2C1_Init+0x74>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a52:	480e      	ldr	r0, [pc, #56]	@ (8002a8c <MX_I2C1_Init+0x74>)
 8002a54:	f002 fc24 	bl	80052a0 <HAL_I2C_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a5e:	f000 fb07 	bl	8003070 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a62:	2100      	movs	r1, #0
 8002a64:	4809      	ldr	r0, [pc, #36]	@ (8002a8c <MX_I2C1_Init+0x74>)
 8002a66:	f002 fcb7 	bl	80053d8 <HAL_I2CEx_ConfigAnalogFilter>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a70:	f000 fafe 	bl	8003070 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a74:	2100      	movs	r1, #0
 8002a76:	4805      	ldr	r0, [pc, #20]	@ (8002a8c <MX_I2C1_Init+0x74>)
 8002a78:	f002 fcf9 	bl	800546e <HAL_I2CEx_ConfigDigitalFilter>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a82:	f000 faf5 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200003e0 	.word	0x200003e0
 8002a90:	40005400 	.word	0x40005400
 8002a94:	20404768 	.word	0x20404768

08002a98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002b10 <MX_SPI1_Init+0x78>)
 8002aa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002aa4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002aa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aaa:	4b18      	ldr	r3, [pc, #96]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ab0:	4b16      	ldr	r3, [pc, #88]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002ab2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002ab6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ab8:	4b14      	ldr	r3, [pc, #80]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002abe:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ac4:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002acc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002ace:	2210      	movs	r2, #16
 8002ad0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ade:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002ae4:	4b09      	ldr	r3, [pc, #36]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002aea:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002af0:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002af2:	2208      	movs	r2, #8
 8002af4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002af6:	4805      	ldr	r0, [pc, #20]	@ (8002b0c <MX_SPI1_Init+0x74>)
 8002af8:	f004 fff4 	bl	8007ae4 <HAL_SPI_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b02:	f000 fab5 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000434 	.word	0x20000434
 8002b10:	40013000 	.word	0x40013000

08002b14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08e      	sub	sp, #56	@ 0x38
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b34:	463b      	mov	r3, r7
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
 8002b3e:	60da      	str	r2, [r3, #12]
 8002b40:	611a      	str	r2, [r3, #16]
 8002b42:	615a      	str	r2, [r3, #20]
 8002b44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b46:	4b3e      	ldr	r3, [pc, #248]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002b48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 8002b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002b50:	223b      	movs	r2, #59	@ 0x3b
 8002b52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b54:	4b3a      	ldr	r3, [pc, #232]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000-1;
 8002b5a:	4b39      	ldr	r3, [pc, #228]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002b5c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8002b60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b62:	4b37      	ldr	r3, [pc, #220]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b68:	4b35      	ldr	r3, [pc, #212]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b6e:	4834      	ldr	r0, [pc, #208]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002b70:	f006 fad2 	bl	8009118 <HAL_TIM_Base_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002b7a:	f000 fa79 	bl	8003070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b88:	4619      	mov	r1, r3
 8002b8a:	482d      	ldr	r0, [pc, #180]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002b8c:	f006 fd8a 	bl	80096a4 <HAL_TIM_ConfigClockSource>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002b96:	f000 fa6b 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b9a:	4829      	ldr	r0, [pc, #164]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002b9c:	f006 fb13 	bl	80091c6 <HAL_TIM_PWM_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002ba6:	f000 fa63 	bl	8003070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bb2:	f107 031c 	add.w	r3, r7, #28
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4821      	ldr	r0, [pc, #132]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002bba:	f007 fa01 	bl	8009fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002bc4:	f000 fa54 	bl	8003070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc8:	2360      	movs	r3, #96	@ 0x60
 8002bca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bd8:	463b      	mov	r3, r7
 8002bda:	2200      	movs	r2, #0
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4818      	ldr	r0, [pc, #96]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002be0:	f006 fc4c 	bl	800947c <HAL_TIM_PWM_ConfigChannel>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002bea:	f000 fa41 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bee:	463b      	mov	r3, r7
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4812      	ldr	r0, [pc, #72]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002bf6:	f006 fc41 	bl	800947c <HAL_TIM_PWM_ConfigChannel>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002c00:	f000 fa36 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c04:	463b      	mov	r3, r7
 8002c06:	2208      	movs	r2, #8
 8002c08:	4619      	mov	r1, r3
 8002c0a:	480d      	ldr	r0, [pc, #52]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002c0c:	f006 fc36 	bl	800947c <HAL_TIM_PWM_ConfigChannel>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8002c16:	f000 fa2b 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c1a:	463b      	mov	r3, r7
 8002c1c:	220c      	movs	r2, #12
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4807      	ldr	r0, [pc, #28]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002c22:	f006 fc2b 	bl	800947c <HAL_TIM_PWM_ConfigChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8002c2c:	f000 fa20 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c30:	4803      	ldr	r0, [pc, #12]	@ (8002c40 <MX_TIM2_Init+0x12c>)
 8002c32:	f000 fbfb 	bl	800342c <HAL_TIM_MspPostInit>

}
 8002c36:	bf00      	nop
 8002c38:	3738      	adds	r7, #56	@ 0x38
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000558 	.word	0x20000558

08002c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08e      	sub	sp, #56	@ 0x38
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c58:	f107 031c 	add.w	r3, r7, #28
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c64:	463b      	mov	r3, r7
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	60da      	str	r2, [r3, #12]
 8002c70:	611a      	str	r2, [r3, #16]
 8002c72:	615a      	str	r2, [r3, #20]
 8002c74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c76:	4b3d      	ldr	r3, [pc, #244]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002c78:	4a3d      	ldr	r2, [pc, #244]	@ (8002d70 <MX_TIM3_Init+0x12c>)
 8002c7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1;
 8002c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002c7e:	223b      	movs	r2, #59	@ 0x3b
 8002c80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c82:	4b3a      	ldr	r3, [pc, #232]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 36000-1;
 8002c88:	4b38      	ldr	r3, [pc, #224]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002c8a:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8002c8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c90:	4b36      	ldr	r3, [pc, #216]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c96:	4b35      	ldr	r3, [pc, #212]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c9c:	4833      	ldr	r0, [pc, #204]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002c9e:	f006 fa3b 	bl	8009118 <HAL_TIM_Base_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002ca8:	f000 f9e2 	bl	8003070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	482c      	ldr	r0, [pc, #176]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002cba:	f006 fcf3 	bl	80096a4 <HAL_TIM_ConfigClockSource>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002cc4:	f000 f9d4 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cc8:	4828      	ldr	r0, [pc, #160]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002cca:	f006 fa7c 	bl	80091c6 <HAL_TIM_PWM_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002cd4:	f000 f9cc 	bl	8003070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ce0:	f107 031c 	add.w	r3, r7, #28
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4821      	ldr	r0, [pc, #132]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002ce8:	f007 f96a 	bl	8009fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002cf2:	f000 f9bd 	bl	8003070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cf6:	2360      	movs	r3, #96	@ 0x60
 8002cf8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d06:	463b      	mov	r3, r7
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4817      	ldr	r0, [pc, #92]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002d0e:	f006 fbb5 	bl	800947c <HAL_TIM_PWM_ConfigChannel>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002d18:	f000 f9aa 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d1c:	463b      	mov	r3, r7
 8002d1e:	2204      	movs	r2, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	4812      	ldr	r0, [pc, #72]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002d24:	f006 fbaa 	bl	800947c <HAL_TIM_PWM_ConfigChannel>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002d2e:	f000 f99f 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d32:	463b      	mov	r3, r7
 8002d34:	2208      	movs	r2, #8
 8002d36:	4619      	mov	r1, r3
 8002d38:	480c      	ldr	r0, [pc, #48]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002d3a:	f006 fb9f 	bl	800947c <HAL_TIM_PWM_ConfigChannel>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002d44:	f000 f994 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d48:	463b      	mov	r3, r7
 8002d4a:	220c      	movs	r2, #12
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4807      	ldr	r0, [pc, #28]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002d50:	f006 fb94 	bl	800947c <HAL_TIM_PWM_ConfigChannel>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002d5a:	f000 f989 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d5e:	4803      	ldr	r0, [pc, #12]	@ (8002d6c <MX_TIM3_Init+0x128>)
 8002d60:	f000 fb64 	bl	800342c <HAL_TIM_MspPostInit>

}
 8002d64:	bf00      	nop
 8002d66:	3738      	adds	r7, #56	@ 0x38
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	200005a4 	.word	0x200005a4
 8002d70:	40000400 	.word	0x40000400

08002d74 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002d78:	4b17      	ldr	r3, [pc, #92]	@ (8002dd8 <MX_UART4_Init+0x64>)
 8002d7a:	4a18      	ldr	r2, [pc, #96]	@ (8002ddc <MX_UART4_Init+0x68>)
 8002d7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 8002d7e:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <MX_UART4_Init+0x64>)
 8002d80:	4a17      	ldr	r2, [pc, #92]	@ (8002de0 <MX_UART4_Init+0x6c>)
 8002d82:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8002d84:	4b14      	ldr	r3, [pc, #80]	@ (8002dd8 <MX_UART4_Init+0x64>)
 8002d86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8002d8c:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <MX_UART4_Init+0x64>)
 8002d8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d92:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8002d94:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <MX_UART4_Init+0x64>)
 8002d96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <MX_UART4_Init+0x64>)
 8002d9e:	2204      	movs	r2, #4
 8002da0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da2:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd8 <MX_UART4_Init+0x64>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <MX_UART4_Init+0x64>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dae:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <MX_UART4_Init+0x64>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8002db4:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <MX_UART4_Init+0x64>)
 8002db6:	2202      	movs	r2, #2
 8002db8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8002dba:	4b07      	ldr	r3, [pc, #28]	@ (8002dd8 <MX_UART4_Init+0x64>)
 8002dbc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002dc2:	4805      	ldr	r0, [pc, #20]	@ (8002dd8 <MX_UART4_Init+0x64>)
 8002dc4:	f007 f98a 	bl	800a0dc <HAL_UART_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8002dce:	f000 f94f 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200005f0 	.word	0x200005f0
 8002ddc:	40004c00 	.word	0x40004c00
 8002de0:	000186a0 	.word	0x000186a0

08002de4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002de8:	4b14      	ldr	r3, [pc, #80]	@ (8002e3c <MX_UART5_Init+0x58>)
 8002dea:	4a15      	ldr	r2, [pc, #84]	@ (8002e40 <MX_UART5_Init+0x5c>)
 8002dec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002dee:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <MX_UART5_Init+0x58>)
 8002df0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002df4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002df6:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <MX_UART5_Init+0x58>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e3c <MX_UART5_Init+0x58>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e02:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <MX_UART5_Init+0x58>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e08:	4b0c      	ldr	r3, [pc, #48]	@ (8002e3c <MX_UART5_Init+0x58>)
 8002e0a:	220c      	movs	r2, #12
 8002e0c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <MX_UART5_Init+0x58>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e14:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <MX_UART5_Init+0x58>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e1a:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <MX_UART5_Init+0x58>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e20:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <MX_UART5_Init+0x58>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e26:	4805      	ldr	r0, [pc, #20]	@ (8002e3c <MX_UART5_Init+0x58>)
 8002e28:	f007 f958 	bl	800a0dc <HAL_UART_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002e32:	f000 f91d 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000678 	.word	0x20000678
 8002e40:	40005000 	.word	0x40005000

08002e44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002e48:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <MX_USART6_UART_Init+0x58>)
 8002e4a:	4a15      	ldr	r2, [pc, #84]	@ (8002ea0 <MX_USART6_UART_Init+0x5c>)
 8002e4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002e4e:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <MX_USART6_UART_Init+0x58>)
 8002e50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002e56:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <MX_USART6_UART_Init+0x58>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e9c <MX_USART6_UART_Init+0x58>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002e62:	4b0e      	ldr	r3, [pc, #56]	@ (8002e9c <MX_USART6_UART_Init+0x58>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002e68:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <MX_USART6_UART_Init+0x58>)
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <MX_USART6_UART_Init+0x58>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e74:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <MX_USART6_UART_Init+0x58>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e7a:	4b08      	ldr	r3, [pc, #32]	@ (8002e9c <MX_USART6_UART_Init+0x58>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <MX_USART6_UART_Init+0x58>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002e86:	4805      	ldr	r0, [pc, #20]	@ (8002e9c <MX_USART6_UART_Init+0x58>)
 8002e88:	f007 f928 	bl	800a0dc <HAL_UART_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002e92:	f000 f8ed 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000700 	.word	0x20000700
 8002ea0:	40011400 	.word	0x40011400

08002ea4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002eaa:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <MX_DMA_Init+0x58>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	4a13      	ldr	r2, [pc, #76]	@ (8002efc <MX_DMA_Init+0x58>)
 8002eb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eb6:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <MX_DMA_Init+0x58>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	2038      	movs	r0, #56	@ 0x38
 8002ec8:	f001 fb63 	bl	8004592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ecc:	2038      	movs	r0, #56	@ 0x38
 8002ece:	f001 fb7c 	bl	80045ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	203b      	movs	r0, #59	@ 0x3b
 8002ed8:	f001 fb5b 	bl	8004592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002edc:	203b      	movs	r0, #59	@ 0x3b
 8002ede:	f001 fb74 	bl	80045ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	203c      	movs	r0, #60	@ 0x3c
 8002ee8:	f001 fb53 	bl	8004592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002eec:	203c      	movs	r0, #60	@ 0x3c
 8002eee:	f001 fb6c 	bl	80045ca <HAL_NVIC_EnableIRQ>

}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800

08002f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	@ 0x28
 8002f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	60da      	str	r2, [r3, #12]
 8002f14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f16:	4b3d      	ldr	r3, [pc, #244]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	4a3c      	ldr	r2, [pc, #240]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f22:	4b3a      	ldr	r3, [pc, #232]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2e:	4b37      	ldr	r3, [pc, #220]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	4a36      	ldr	r2, [pc, #216]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f34:	f043 0304 	orr.w	r3, r3, #4
 8002f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3a:	4b34      	ldr	r3, [pc, #208]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f46:	4b31      	ldr	r3, [pc, #196]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	4a30      	ldr	r2, [pc, #192]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f52:	4b2e      	ldr	r3, [pc, #184]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	4a2a      	ldr	r2, [pc, #168]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f6a:	4b28      	ldr	r3, [pc, #160]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f76:	4b25      	ldr	r3, [pc, #148]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	4a24      	ldr	r2, [pc, #144]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f7c:	f043 0308 	orr.w	r3, r3, #8
 8002f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f82:	4b22      	ldr	r3, [pc, #136]	@ (800300c <MX_GPIO_Init+0x10c>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2108      	movs	r1, #8
 8002f92:	481f      	ldr	r0, [pc, #124]	@ (8003010 <MX_GPIO_Init+0x110>)
 8002f94:	f002 f952 	bl	800523c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2110      	movs	r1, #16
 8002f9c:	481d      	ldr	r0, [pc, #116]	@ (8003014 <MX_GPIO_Init+0x114>)
 8002f9e:	f002 f94d 	bl	800523c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb2:	f107 0314 	add.w	r3, r7, #20
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4815      	ldr	r0, [pc, #84]	@ (8003010 <MX_GPIO_Init+0x110>)
 8002fba:	f001 ffa3 	bl	8004f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	480f      	ldr	r0, [pc, #60]	@ (8003014 <MX_GPIO_Init+0x114>)
 8002fd6:	f001 ff95 	bl	8004f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002fda:	2310      	movs	r3, #16
 8002fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fde:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002fe8:	f107 0314 	add.w	r3, r7, #20
 8002fec:	4619      	mov	r1, r3
 8002fee:	4808      	ldr	r0, [pc, #32]	@ (8003010 <MX_GPIO_Init+0x110>)
 8002ff0:	f001 ff88 	bl	8004f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	200a      	movs	r0, #10
 8002ffa:	f001 faca 	bl	8004592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002ffe:	200a      	movs	r0, #10
 8003000:	f001 fae3 	bl	80045ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003004:	bf00      	nop
 8003006:	3728      	adds	r7, #40	@ 0x28
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40023800 	.word	0x40023800
 8003010:	40020800 	.word	0x40020800
 8003014:	40020000 	.word	0x40020000

08003018 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800301e:	463b      	mov	r3, r7
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800302a:	f001 fae9 	bl	8004600 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800302e:	2301      	movs	r3, #1
 8003030:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003032:	2300      	movs	r3, #0
 8003034:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003036:	2300      	movs	r3, #0
 8003038:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800303a:	231f      	movs	r3, #31
 800303c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800303e:	2387      	movs	r3, #135	@ 0x87
 8003040:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003042:	2300      	movs	r3, #0
 8003044:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003046:	2300      	movs	r3, #0
 8003048:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800304a:	2301      	movs	r3, #1
 800304c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800304e:	2301      	movs	r3, #1
 8003050:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003052:	2300      	movs	r3, #0
 8003054:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800305a:	463b      	mov	r3, r7
 800305c:	4618      	mov	r0, r3
 800305e:	f001 fb07 	bl	8004670 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003062:	2004      	movs	r0, #4
 8003064:	f001 fae4 	bl	8004630 <HAL_MPU_Enable>

}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003074:	b672      	cpsid	i
}
 8003076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003078:	bf00      	nop
 800307a:	e7fd      	b.n	8003078 <Error_Handler+0x8>

0800307c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	4b0f      	ldr	r3, [pc, #60]	@ (80030c0 <HAL_MspInit+0x44>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	4a0e      	ldr	r2, [pc, #56]	@ (80030c0 <HAL_MspInit+0x44>)
 8003088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800308c:	6413      	str	r3, [r2, #64]	@ 0x40
 800308e:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <HAL_MspInit+0x44>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309a:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <HAL_MspInit+0x44>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	4a08      	ldr	r2, [pc, #32]	@ (80030c0 <HAL_MspInit+0x44>)
 80030a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030a6:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <HAL_MspInit+0x44>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800

080030c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	@ 0x28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a2d      	ldr	r2, [pc, #180]	@ (8003198 <HAL_ADC_MspInit+0xd4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d153      	bne.n	800318e <HAL_ADC_MspInit+0xca>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030e6:	4b2d      	ldr	r3, [pc, #180]	@ (800319c <HAL_ADC_MspInit+0xd8>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	4a2c      	ldr	r2, [pc, #176]	@ (800319c <HAL_ADC_MspInit+0xd8>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030f2:	4b2a      	ldr	r3, [pc, #168]	@ (800319c <HAL_ADC_MspInit+0xd8>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030fe:	4b27      	ldr	r3, [pc, #156]	@ (800319c <HAL_ADC_MspInit+0xd8>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	4a26      	ldr	r2, [pc, #152]	@ (800319c <HAL_ADC_MspInit+0xd8>)
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	6313      	str	r3, [r2, #48]	@ 0x30
 800310a:	4b24      	ldr	r3, [pc, #144]	@ (800319c <HAL_ADC_MspInit+0xd8>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003116:	2301      	movs	r3, #1
 8003118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800311a:	2303      	movs	r3, #3
 800311c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003122:	f107 0314 	add.w	r3, r7, #20
 8003126:	4619      	mov	r1, r3
 8003128:	481d      	ldr	r0, [pc, #116]	@ (80031a0 <HAL_ADC_MspInit+0xdc>)
 800312a:	f001 feeb 	bl	8004f04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800312e:	4b1d      	ldr	r3, [pc, #116]	@ (80031a4 <HAL_ADC_MspInit+0xe0>)
 8003130:	4a1d      	ldr	r2, [pc, #116]	@ (80031a8 <HAL_ADC_MspInit+0xe4>)
 8003132:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003134:	4b1b      	ldr	r3, [pc, #108]	@ (80031a4 <HAL_ADC_MspInit+0xe0>)
 8003136:	2200      	movs	r2, #0
 8003138:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800313a:	4b1a      	ldr	r3, [pc, #104]	@ (80031a4 <HAL_ADC_MspInit+0xe0>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003140:	4b18      	ldr	r3, [pc, #96]	@ (80031a4 <HAL_ADC_MspInit+0xe0>)
 8003142:	2200      	movs	r2, #0
 8003144:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003146:	4b17      	ldr	r3, [pc, #92]	@ (80031a4 <HAL_ADC_MspInit+0xe0>)
 8003148:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800314c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800314e:	4b15      	ldr	r3, [pc, #84]	@ (80031a4 <HAL_ADC_MspInit+0xe0>)
 8003150:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003154:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003156:	4b13      	ldr	r3, [pc, #76]	@ (80031a4 <HAL_ADC_MspInit+0xe0>)
 8003158:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800315c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800315e:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <HAL_ADC_MspInit+0xe0>)
 8003160:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003164:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003166:	4b0f      	ldr	r3, [pc, #60]	@ (80031a4 <HAL_ADC_MspInit+0xe0>)
 8003168:	2200      	movs	r2, #0
 800316a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800316c:	4b0d      	ldr	r3, [pc, #52]	@ (80031a4 <HAL_ADC_MspInit+0xe0>)
 800316e:	2200      	movs	r2, #0
 8003170:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003172:	480c      	ldr	r0, [pc, #48]	@ (80031a4 <HAL_ADC_MspInit+0xe0>)
 8003174:	f001 fabc 	bl	80046f0 <HAL_DMA_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800317e:	f7ff ff77 	bl	8003070 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a07      	ldr	r2, [pc, #28]	@ (80031a4 <HAL_ADC_MspInit+0xe0>)
 8003186:	639a      	str	r2, [r3, #56]	@ 0x38
 8003188:	4a06      	ldr	r2, [pc, #24]	@ (80031a4 <HAL_ADC_MspInit+0xe0>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800318e:	bf00      	nop
 8003190:	3728      	adds	r7, #40	@ 0x28
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40012000 	.word	0x40012000
 800319c:	40023800 	.word	0x40023800
 80031a0:	40020800 	.word	0x40020800
 80031a4:	20000380 	.word	0x20000380
 80031a8:	40026470 	.word	0x40026470

080031ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b0aa      	sub	sp, #168	@ 0xa8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	2280      	movs	r2, #128	@ 0x80
 80031ca:	2100      	movs	r1, #0
 80031cc:	4618      	mov	r0, r3
 80031ce:	f00d f8e6 	bl	801039e <memset>
  if(hi2c->Instance==I2C1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a21      	ldr	r2, [pc, #132]	@ (800325c <HAL_I2C_MspInit+0xb0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d13b      	bne.n	8003254 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80031dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80031e2:	2300      	movs	r3, #0
 80031e4:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031e6:	f107 0314 	add.w	r3, r7, #20
 80031ea:	4618      	mov	r0, r3
 80031ec:	f004 f930 	bl	8007450 <HAL_RCCEx_PeriphCLKConfig>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80031f6:	f7ff ff3b 	bl	8003070 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fa:	4b19      	ldr	r3, [pc, #100]	@ (8003260 <HAL_I2C_MspInit+0xb4>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	4a18      	ldr	r2, [pc, #96]	@ (8003260 <HAL_I2C_MspInit+0xb4>)
 8003200:	f043 0302 	orr.w	r3, r3, #2
 8003204:	6313      	str	r3, [r2, #48]	@ 0x30
 8003206:	4b16      	ldr	r3, [pc, #88]	@ (8003260 <HAL_I2C_MspInit+0xb4>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003212:	23c0      	movs	r3, #192	@ 0xc0
 8003214:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003218:	2312      	movs	r3, #18
 800321a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003224:	2303      	movs	r3, #3
 8003226:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800322a:	2304      	movs	r3, #4
 800322c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003230:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003234:	4619      	mov	r1, r3
 8003236:	480b      	ldr	r0, [pc, #44]	@ (8003264 <HAL_I2C_MspInit+0xb8>)
 8003238:	f001 fe64 	bl	8004f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800323c:	4b08      	ldr	r3, [pc, #32]	@ (8003260 <HAL_I2C_MspInit+0xb4>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	4a07      	ldr	r2, [pc, #28]	@ (8003260 <HAL_I2C_MspInit+0xb4>)
 8003242:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003246:	6413      	str	r3, [r2, #64]	@ 0x40
 8003248:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <HAL_I2C_MspInit+0xb4>)
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003254:	bf00      	nop
 8003256:	37a8      	adds	r7, #168	@ 0xa8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40005400 	.word	0x40005400
 8003260:	40023800 	.word	0x40023800
 8003264:	40020400 	.word	0x40020400

08003268 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	@ 0x28
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003270:	f107 0314 	add.w	r3, r7, #20
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a49      	ldr	r2, [pc, #292]	@ (80033ac <HAL_SPI_MspInit+0x144>)
 8003286:	4293      	cmp	r3, r2
 8003288:	f040 808c 	bne.w	80033a4 <HAL_SPI_MspInit+0x13c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800328c:	4b48      	ldr	r3, [pc, #288]	@ (80033b0 <HAL_SPI_MspInit+0x148>)
 800328e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003290:	4a47      	ldr	r2, [pc, #284]	@ (80033b0 <HAL_SPI_MspInit+0x148>)
 8003292:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003296:	6453      	str	r3, [r2, #68]	@ 0x44
 8003298:	4b45      	ldr	r3, [pc, #276]	@ (80033b0 <HAL_SPI_MspInit+0x148>)
 800329a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a4:	4b42      	ldr	r3, [pc, #264]	@ (80033b0 <HAL_SPI_MspInit+0x148>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a8:	4a41      	ldr	r2, [pc, #260]	@ (80033b0 <HAL_SPI_MspInit+0x148>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b0:	4b3f      	ldr	r3, [pc, #252]	@ (80033b0 <HAL_SPI_MspInit+0x148>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80032bc:	23e0      	movs	r3, #224	@ 0xe0
 80032be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c0:	2302      	movs	r3, #2
 80032c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c8:	2303      	movs	r3, #3
 80032ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032cc:	2305      	movs	r3, #5
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d0:	f107 0314 	add.w	r3, r7, #20
 80032d4:	4619      	mov	r1, r3
 80032d6:	4837      	ldr	r0, [pc, #220]	@ (80033b4 <HAL_SPI_MspInit+0x14c>)
 80032d8:	f001 fe14 	bl	8004f04 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80032dc:	4b36      	ldr	r3, [pc, #216]	@ (80033b8 <HAL_SPI_MspInit+0x150>)
 80032de:	4a37      	ldr	r2, [pc, #220]	@ (80033bc <HAL_SPI_MspInit+0x154>)
 80032e0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80032e2:	4b35      	ldr	r3, [pc, #212]	@ (80033b8 <HAL_SPI_MspInit+0x150>)
 80032e4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80032e8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032ea:	4b33      	ldr	r3, [pc, #204]	@ (80033b8 <HAL_SPI_MspInit+0x150>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f0:	4b31      	ldr	r3, [pc, #196]	@ (80033b8 <HAL_SPI_MspInit+0x150>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032f6:	4b30      	ldr	r3, [pc, #192]	@ (80033b8 <HAL_SPI_MspInit+0x150>)
 80032f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032fc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032fe:	4b2e      	ldr	r3, [pc, #184]	@ (80033b8 <HAL_SPI_MspInit+0x150>)
 8003300:	2200      	movs	r2, #0
 8003302:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003304:	4b2c      	ldr	r3, [pc, #176]	@ (80033b8 <HAL_SPI_MspInit+0x150>)
 8003306:	2200      	movs	r2, #0
 8003308:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800330a:	4b2b      	ldr	r3, [pc, #172]	@ (80033b8 <HAL_SPI_MspInit+0x150>)
 800330c:	2200      	movs	r2, #0
 800330e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003310:	4b29      	ldr	r3, [pc, #164]	@ (80033b8 <HAL_SPI_MspInit+0x150>)
 8003312:	2200      	movs	r2, #0
 8003314:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003316:	4b28      	ldr	r3, [pc, #160]	@ (80033b8 <HAL_SPI_MspInit+0x150>)
 8003318:	2200      	movs	r2, #0
 800331a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800331c:	4826      	ldr	r0, [pc, #152]	@ (80033b8 <HAL_SPI_MspInit+0x150>)
 800331e:	f001 f9e7 	bl	80046f0 <HAL_DMA_Init>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8003328:	f7ff fea2 	bl	8003070 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a22      	ldr	r2, [pc, #136]	@ (80033b8 <HAL_SPI_MspInit+0x150>)
 8003330:	659a      	str	r2, [r3, #88]	@ 0x58
 8003332:	4a21      	ldr	r2, [pc, #132]	@ (80033b8 <HAL_SPI_MspInit+0x150>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003338:	4b21      	ldr	r3, [pc, #132]	@ (80033c0 <HAL_SPI_MspInit+0x158>)
 800333a:	4a22      	ldr	r2, [pc, #136]	@ (80033c4 <HAL_SPI_MspInit+0x15c>)
 800333c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800333e:	4b20      	ldr	r3, [pc, #128]	@ (80033c0 <HAL_SPI_MspInit+0x158>)
 8003340:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003344:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003346:	4b1e      	ldr	r3, [pc, #120]	@ (80033c0 <HAL_SPI_MspInit+0x158>)
 8003348:	2240      	movs	r2, #64	@ 0x40
 800334a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800334c:	4b1c      	ldr	r3, [pc, #112]	@ (80033c0 <HAL_SPI_MspInit+0x158>)
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003352:	4b1b      	ldr	r3, [pc, #108]	@ (80033c0 <HAL_SPI_MspInit+0x158>)
 8003354:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003358:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800335a:	4b19      	ldr	r3, [pc, #100]	@ (80033c0 <HAL_SPI_MspInit+0x158>)
 800335c:	2200      	movs	r2, #0
 800335e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003360:	4b17      	ldr	r3, [pc, #92]	@ (80033c0 <HAL_SPI_MspInit+0x158>)
 8003362:	2200      	movs	r2, #0
 8003364:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003366:	4b16      	ldr	r3, [pc, #88]	@ (80033c0 <HAL_SPI_MspInit+0x158>)
 8003368:	2200      	movs	r2, #0
 800336a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800336c:	4b14      	ldr	r3, [pc, #80]	@ (80033c0 <HAL_SPI_MspInit+0x158>)
 800336e:	2200      	movs	r2, #0
 8003370:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003372:	4b13      	ldr	r3, [pc, #76]	@ (80033c0 <HAL_SPI_MspInit+0x158>)
 8003374:	2200      	movs	r2, #0
 8003376:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003378:	4811      	ldr	r0, [pc, #68]	@ (80033c0 <HAL_SPI_MspInit+0x158>)
 800337a:	f001 f9b9 	bl	80046f0 <HAL_DMA_Init>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 8003384:	f7ff fe74 	bl	8003070 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a0d      	ldr	r2, [pc, #52]	@ (80033c0 <HAL_SPI_MspInit+0x158>)
 800338c:	655a      	str	r2, [r3, #84]	@ 0x54
 800338e:	4a0c      	ldr	r2, [pc, #48]	@ (80033c0 <HAL_SPI_MspInit+0x158>)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003394:	2200      	movs	r2, #0
 8003396:	2100      	movs	r1, #0
 8003398:	2023      	movs	r0, #35	@ 0x23
 800339a:	f001 f8fa 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800339e:	2023      	movs	r0, #35	@ 0x23
 80033a0:	f001 f913 	bl	80045ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80033a4:	bf00      	nop
 80033a6:	3728      	adds	r7, #40	@ 0x28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40013000 	.word	0x40013000
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40020000 	.word	0x40020000
 80033b8:	20000498 	.word	0x20000498
 80033bc:	40026410 	.word	0x40026410
 80033c0:	200004f8 	.word	0x200004f8
 80033c4:	40026458 	.word	0x40026458

080033c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d8:	d10c      	bne.n	80033f4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033da:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <HAL_TIM_Base_MspInit+0x5c>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	4a11      	ldr	r2, [pc, #68]	@ (8003424 <HAL_TIM_Base_MspInit+0x5c>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003424 <HAL_TIM_Base_MspInit+0x5c>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80033f2:	e010      	b.n	8003416 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003428 <HAL_TIM_Base_MspInit+0x60>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10b      	bne.n	8003416 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033fe:	4b09      	ldr	r3, [pc, #36]	@ (8003424 <HAL_TIM_Base_MspInit+0x5c>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	4a08      	ldr	r2, [pc, #32]	@ (8003424 <HAL_TIM_Base_MspInit+0x5c>)
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	6413      	str	r3, [r2, #64]	@ 0x40
 800340a:	4b06      	ldr	r3, [pc, #24]	@ (8003424 <HAL_TIM_Base_MspInit+0x5c>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800
 8003428:	40000400 	.word	0x40000400

0800342c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	@ 0x28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344c:	d139      	bne.n	80034c2 <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	4b2f      	ldr	r3, [pc, #188]	@ (800350c <HAL_TIM_MspPostInit+0xe0>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	4a2e      	ldr	r2, [pc, #184]	@ (800350c <HAL_TIM_MspPostInit+0xe0>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6313      	str	r3, [r2, #48]	@ 0x30
 800345a:	4b2c      	ldr	r3, [pc, #176]	@ (800350c <HAL_TIM_MspPostInit+0xe0>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003466:	4b29      	ldr	r3, [pc, #164]	@ (800350c <HAL_TIM_MspPostInit+0xe0>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	4a28      	ldr	r2, [pc, #160]	@ (800350c <HAL_TIM_MspPostInit+0xe0>)
 800346c:	f043 0302 	orr.w	r3, r3, #2
 8003470:	6313      	str	r3, [r2, #48]	@ 0x30
 8003472:	4b26      	ldr	r3, [pc, #152]	@ (800350c <HAL_TIM_MspPostInit+0xe0>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800347e:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348c:	2300      	movs	r3, #0
 800348e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003490:	2301      	movs	r3, #1
 8003492:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	4619      	mov	r1, r3
 800349a:	481d      	ldr	r0, [pc, #116]	@ (8003510 <HAL_TIM_MspPostInit+0xe4>)
 800349c:	f001 fd32 	bl	8004f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034a0:	2308      	movs	r3, #8
 80034a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ac:	2300      	movs	r3, #0
 80034ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034b0:	2301      	movs	r3, #1
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b4:	f107 0314 	add.w	r3, r7, #20
 80034b8:	4619      	mov	r1, r3
 80034ba:	4816      	ldr	r0, [pc, #88]	@ (8003514 <HAL_TIM_MspPostInit+0xe8>)
 80034bc:	f001 fd22 	bl	8004f04 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034c0:	e020      	b.n	8003504 <HAL_TIM_MspPostInit+0xd8>
  else if(htim->Instance==TIM3)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a14      	ldr	r2, [pc, #80]	@ (8003518 <HAL_TIM_MspPostInit+0xec>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d11b      	bne.n	8003504 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034cc:	4b0f      	ldr	r3, [pc, #60]	@ (800350c <HAL_TIM_MspPostInit+0xe0>)
 80034ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d0:	4a0e      	ldr	r2, [pc, #56]	@ (800350c <HAL_TIM_MspPostInit+0xe0>)
 80034d2:	f043 0302 	orr.w	r3, r3, #2
 80034d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d8:	4b0c      	ldr	r3, [pc, #48]	@ (800350c <HAL_TIM_MspPostInit+0xe0>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80034e4:	2333      	movs	r3, #51	@ 0x33
 80034e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	2302      	movs	r3, #2
 80034ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034f4:	2302      	movs	r3, #2
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	4619      	mov	r1, r3
 80034fe:	4805      	ldr	r0, [pc, #20]	@ (8003514 <HAL_TIM_MspPostInit+0xe8>)
 8003500:	f001 fd00 	bl	8004f04 <HAL_GPIO_Init>
}
 8003504:	bf00      	nop
 8003506:	3728      	adds	r7, #40	@ 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	40020000 	.word	0x40020000
 8003514:	40020400 	.word	0x40020400
 8003518:	40000400 	.word	0x40000400

0800351c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b0b0      	sub	sp, #192	@ 0xc0
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003524:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003534:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003538:	2280      	movs	r2, #128	@ 0x80
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f00c ff2e 	bl	801039e <memset>
  if(huart->Instance==UART4)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a89      	ldr	r2, [pc, #548]	@ (800376c <HAL_UART_MspInit+0x250>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d166      	bne.n	800361a <HAL_UART_MspInit+0xfe>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800354c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003552:	2300      	movs	r3, #0
 8003554:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003556:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800355a:	4618      	mov	r0, r3
 800355c:	f003 ff78 	bl	8007450 <HAL_RCCEx_PeriphCLKConfig>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003566:	f7ff fd83 	bl	8003070 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800356a:	4b81      	ldr	r3, [pc, #516]	@ (8003770 <HAL_UART_MspInit+0x254>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	4a80      	ldr	r2, [pc, #512]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003570:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003574:	6413      	str	r3, [r2, #64]	@ 0x40
 8003576:	4b7e      	ldr	r3, [pc, #504]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800357e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003580:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	4b7b      	ldr	r3, [pc, #492]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	4a7a      	ldr	r2, [pc, #488]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6313      	str	r3, [r2, #48]	@ 0x30
 800358e:	4b78      	ldr	r3, [pc, #480]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800359a:	4b75      	ldr	r3, [pc, #468]	@ (8003770 <HAL_UART_MspInit+0x254>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	4a74      	ldr	r2, [pc, #464]	@ (8003770 <HAL_UART_MspInit+0x254>)
 80035a0:	f043 0304 	orr.w	r3, r3, #4
 80035a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a6:	4b72      	ldr	r3, [pc, #456]	@ (8003770 <HAL_UART_MspInit+0x254>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80035b2:	2302      	movs	r3, #2
 80035b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b8:	2302      	movs	r3, #2
 80035ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c4:	2303      	movs	r3, #3
 80035c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035ca:	2308      	movs	r3, #8
 80035cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80035d4:	4619      	mov	r1, r3
 80035d6:	4867      	ldr	r0, [pc, #412]	@ (8003774 <HAL_UART_MspInit+0x258>)
 80035d8:	f001 fc94 	bl	8004f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f0:	2303      	movs	r3, #3
 80035f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035f6:	2308      	movs	r3, #8
 80035f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035fc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003600:	4619      	mov	r1, r3
 8003602:	485d      	ldr	r0, [pc, #372]	@ (8003778 <HAL_UART_MspInit+0x25c>)
 8003604:	f001 fc7e 	bl	8004f04 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003608:	2200      	movs	r2, #0
 800360a:	2100      	movs	r1, #0
 800360c:	2034      	movs	r0, #52	@ 0x34
 800360e:	f000 ffc0 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003612:	2034      	movs	r0, #52	@ 0x34
 8003614:	f000 ffd9 	bl	80045ca <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8003618:	e0a4      	b.n	8003764 <HAL_UART_MspInit+0x248>
  else if(huart->Instance==UART5)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a57      	ldr	r2, [pc, #348]	@ (800377c <HAL_UART_MspInit+0x260>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d15e      	bne.n	80036e2 <HAL_UART_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003624:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800362a:	2300      	movs	r3, #0
 800362c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800362e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003632:	4618      	mov	r0, r3
 8003634:	f003 ff0c 	bl	8007450 <HAL_RCCEx_PeriphCLKConfig>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_UART_MspInit+0x126>
      Error_Handler();
 800363e:	f7ff fd17 	bl	8003070 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003642:	4b4b      	ldr	r3, [pc, #300]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	4a4a      	ldr	r2, [pc, #296]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003648:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800364c:	6413      	str	r3, [r2, #64]	@ 0x40
 800364e:	4b48      	ldr	r3, [pc, #288]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800365a:	4b45      	ldr	r3, [pc, #276]	@ (8003770 <HAL_UART_MspInit+0x254>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	4a44      	ldr	r2, [pc, #272]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003660:	f043 0304 	orr.w	r3, r3, #4
 8003664:	6313      	str	r3, [r2, #48]	@ 0x30
 8003666:	4b42      	ldr	r3, [pc, #264]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003672:	4b3f      	ldr	r3, [pc, #252]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003676:	4a3e      	ldr	r2, [pc, #248]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003678:	f043 0308 	orr.w	r3, r3, #8
 800367c:	6313      	str	r3, [r2, #48]	@ 0x30
 800367e:	4b3c      	ldr	r3, [pc, #240]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800368a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800368e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003692:	2302      	movs	r3, #2
 8003694:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800369e:	2303      	movs	r3, #3
 80036a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80036a4:	2308      	movs	r3, #8
 80036a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036aa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80036ae:	4619      	mov	r1, r3
 80036b0:	4831      	ldr	r0, [pc, #196]	@ (8003778 <HAL_UART_MspInit+0x25c>)
 80036b2:	f001 fc27 	bl	8004f04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036b6:	2304      	movs	r3, #4
 80036b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036bc:	2302      	movs	r3, #2
 80036be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c8:	2303      	movs	r3, #3
 80036ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80036ce:	2308      	movs	r3, #8
 80036d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036d4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80036d8:	4619      	mov	r1, r3
 80036da:	4829      	ldr	r0, [pc, #164]	@ (8003780 <HAL_UART_MspInit+0x264>)
 80036dc:	f001 fc12 	bl	8004f04 <HAL_GPIO_Init>
}
 80036e0:	e040      	b.n	8003764 <HAL_UART_MspInit+0x248>
  else if(huart->Instance==USART6)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a27      	ldr	r2, [pc, #156]	@ (8003784 <HAL_UART_MspInit+0x268>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d13b      	bne.n	8003764 <HAL_UART_MspInit+0x248>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80036ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80036f2:	2300      	movs	r3, #0
 80036f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036fa:	4618      	mov	r0, r3
 80036fc:	f003 fea8 	bl	8007450 <HAL_RCCEx_PeriphCLKConfig>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 8003706:	f7ff fcb3 	bl	8003070 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800370a:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <HAL_UART_MspInit+0x254>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	4a18      	ldr	r2, [pc, #96]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003710:	f043 0320 	orr.w	r3, r3, #32
 8003714:	6453      	str	r3, [r2, #68]	@ 0x44
 8003716:	4b16      	ldr	r3, [pc, #88]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003722:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	4a12      	ldr	r2, [pc, #72]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	6313      	str	r3, [r2, #48]	@ 0x30
 800372e:	4b10      	ldr	r3, [pc, #64]	@ (8003770 <HAL_UART_MspInit+0x254>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800373a:	23c0      	movs	r3, #192	@ 0xc0
 800373c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003740:	2302      	movs	r3, #2
 8003742:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374c:	2303      	movs	r3, #3
 800374e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003752:	2308      	movs	r3, #8
 8003754:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003758:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800375c:	4619      	mov	r1, r3
 800375e:	4806      	ldr	r0, [pc, #24]	@ (8003778 <HAL_UART_MspInit+0x25c>)
 8003760:	f001 fbd0 	bl	8004f04 <HAL_GPIO_Init>
}
 8003764:	bf00      	nop
 8003766:	37c0      	adds	r7, #192	@ 0xc0
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40004c00 	.word	0x40004c00
 8003770:	40023800 	.word	0x40023800
 8003774:	40020000 	.word	0x40020000
 8003778:	40020800 	.word	0x40020800
 800377c:	40005000 	.word	0x40005000
 8003780:	40020c00 	.word	0x40020c00
 8003784:	40011400 	.word	0x40011400

08003788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800378c:	bf00      	nop
 800378e:	e7fd      	b.n	800378c <NMI_Handler+0x4>

08003790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003794:	bf00      	nop
 8003796:	e7fd      	b.n	8003794 <HardFault_Handler+0x4>

08003798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800379c:	bf00      	nop
 800379e:	e7fd      	b.n	800379c <MemManage_Handler+0x4>

080037a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037a4:	bf00      	nop
 80037a6:	e7fd      	b.n	80037a4 <BusFault_Handler+0x4>

080037a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037ac:	bf00      	nop
 80037ae:	e7fd      	b.n	80037ac <UsageFault_Handler+0x4>

080037b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037be:	b480      	push	{r7}
 80037c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037de:	f000 f983 	bl	8003ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 80037ea:	2010      	movs	r0, #16
 80037ec:	f001 fd40 	bl	8005270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80037f0:	bf00      	nop
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80037f8:	4802      	ldr	r0, [pc, #8]	@ (8003804 <SPI1_IRQHandler+0x10>)
 80037fa:	f005 f871 	bl	80088e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000434 	.word	0x20000434

08003808 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800380c:	4802      	ldr	r0, [pc, #8]	@ (8003818 <UART4_IRQHandler+0x10>)
 800380e:	f006 fcb3 	bl	800a178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	200005f0 	.word	0x200005f0

0800381c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003820:	4802      	ldr	r0, [pc, #8]	@ (800382c <DMA2_Stream0_IRQHandler+0x10>)
 8003822:	f001 f905 	bl	8004a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000498 	.word	0x20000498

08003830 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003834:	4802      	ldr	r0, [pc, #8]	@ (8003840 <DMA2_Stream3_IRQHandler+0x10>)
 8003836:	f001 f8fb 	bl	8004a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	200004f8 	.word	0x200004f8

08003844 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003848:	4802      	ldr	r0, [pc, #8]	@ (8003854 <DMA2_Stream4_IRQHandler+0x10>)
 800384a:	f001 f8f1 	bl	8004a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000380 	.word	0x20000380

08003858 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800385c:	4802      	ldr	r0, [pc, #8]	@ (8003868 <OTG_FS_IRQHandler+0x10>)
 800385e:	f001 ff8a 	bl	8005776 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20001d40 	.word	0x20001d40

0800386c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return 1;
 8003870:	2301      	movs	r3, #1
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <_kill>:

int _kill(int pid, int sig)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003886:	f00c fded 	bl	8010464 <__errno>
 800388a:	4603      	mov	r3, r0
 800388c:	2216      	movs	r2, #22
 800388e:	601a      	str	r2, [r3, #0]
  return -1;
 8003890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <_exit>:

void _exit (int status)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038a4:	f04f 31ff 	mov.w	r1, #4294967295
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff ffe7 	bl	800387c <_kill>
  while (1) {}    /* Make sure we hang here */
 80038ae:	bf00      	nop
 80038b0:	e7fd      	b.n	80038ae <_exit+0x12>

080038b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b086      	sub	sp, #24
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	e00a      	b.n	80038da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038c4:	f3af 8000 	nop.w
 80038c8:	4601      	mov	r1, r0
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	60ba      	str	r2, [r7, #8]
 80038d0:	b2ca      	uxtb	r2, r1
 80038d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	3301      	adds	r3, #1
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	429a      	cmp	r2, r3
 80038e0:	dbf0      	blt.n	80038c4 <_read+0x12>
  }

  return len;
 80038e2:	687b      	ldr	r3, [r7, #4]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	e009      	b.n	8003912 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	60ba      	str	r2, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	3301      	adds	r3, #1
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	429a      	cmp	r2, r3
 8003918:	dbf1      	blt.n	80038fe <_write+0x12>
  }
  return len;
 800391a:	687b      	ldr	r3, [r7, #4]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <_close>:

int _close(int file)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800392c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800394c:	605a      	str	r2, [r3, #4]
  return 0;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <_isatty>:

int _isatty(int file)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003964:	2301      	movs	r3, #1
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003972:	b480      	push	{r7}
 8003974:	b085      	sub	sp, #20
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003994:	4a14      	ldr	r2, [pc, #80]	@ (80039e8 <_sbrk+0x5c>)
 8003996:	4b15      	ldr	r3, [pc, #84]	@ (80039ec <_sbrk+0x60>)
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039a0:	4b13      	ldr	r3, [pc, #76]	@ (80039f0 <_sbrk+0x64>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d102      	bne.n	80039ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039a8:	4b11      	ldr	r3, [pc, #68]	@ (80039f0 <_sbrk+0x64>)
 80039aa:	4a12      	ldr	r2, [pc, #72]	@ (80039f4 <_sbrk+0x68>)
 80039ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039ae:	4b10      	ldr	r3, [pc, #64]	@ (80039f0 <_sbrk+0x64>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4413      	add	r3, r2
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d207      	bcs.n	80039cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039bc:	f00c fd52 	bl	8010464 <__errno>
 80039c0:	4603      	mov	r3, r0
 80039c2:	220c      	movs	r2, #12
 80039c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	e009      	b.n	80039e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039cc:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <_sbrk+0x64>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039d2:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <_sbrk+0x64>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	4a05      	ldr	r2, [pc, #20]	@ (80039f0 <_sbrk+0x64>)
 80039dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039de:	68fb      	ldr	r3, [r7, #12]
 }
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20040000 	.word	0x20040000
 80039ec:	00000400 	.word	0x00000400
 80039f0:	20000858 	.word	0x20000858
 80039f4:	20002370 	.word	0x20002370

080039f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039fc:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <SystemInit+0x20>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a02:	4a05      	ldr	r2, [pc, #20]	@ (8003a18 <SystemInit+0x20>)
 8003a04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a0c:	bf00      	nop
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8003a1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8003a20:	f7ff ffea 	bl	80039f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a24:	480c      	ldr	r0, [pc, #48]	@ (8003a58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a26:	490d      	ldr	r1, [pc, #52]	@ (8003a5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a28:	4a0d      	ldr	r2, [pc, #52]	@ (8003a60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a2c:	e002      	b.n	8003a34 <LoopCopyDataInit>

08003a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a32:	3304      	adds	r3, #4

08003a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a38:	d3f9      	bcc.n	8003a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8003a68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a40:	e001      	b.n	8003a46 <LoopFillZerobss>

08003a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a44:	3204      	adds	r2, #4

08003a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a48:	d3fb      	bcc.n	8003a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a4a:	f00c fd11 	bl	8010470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a4e:	f7fe fdeb 	bl	8002628 <main>
  bx  lr    
 8003a52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a54:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a5c:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8003a60:	080129d0 	.word	0x080129d0
  ldr r2, =_sbss
 8003a64:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8003a68:	2000236c 	.word	0x2000236c

08003a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a6c:	e7fe      	b.n	8003a6c <ADC_IRQHandler>

08003a6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a72:	2003      	movs	r0, #3
 8003a74:	f000 fd82 	bl	800457c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a78:	200f      	movs	r0, #15
 8003a7a:	f000 f805 	bl	8003a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a7e:	f7ff fafd 	bl	800307c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a90:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <HAL_InitTick+0x54>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b12      	ldr	r3, [pc, #72]	@ (8003ae0 <HAL_InitTick+0x58>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fd9d 	bl	80045e6 <HAL_SYSTICK_Config>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00e      	b.n	8003ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b0f      	cmp	r3, #15
 8003aba:	d80a      	bhi.n	8003ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003abc:	2200      	movs	r2, #0
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	f000 fd65 	bl	8004592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ac8:	4a06      	ldr	r2, [pc, #24]	@ (8003ae4 <HAL_InitTick+0x5c>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	20000008 	.word	0x20000008
 8003ae4:	20000004 	.word	0x20000004

08003ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003aec:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <HAL_IncTick+0x20>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	4b06      	ldr	r3, [pc, #24]	@ (8003b0c <HAL_IncTick+0x24>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4413      	add	r3, r2
 8003af8:	4a04      	ldr	r2, [pc, #16]	@ (8003b0c <HAL_IncTick+0x24>)
 8003afa:	6013      	str	r3, [r2, #0]
}
 8003afc:	bf00      	nop
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000008 	.word	0x20000008
 8003b0c:	2000085c 	.word	0x2000085c

08003b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return uwTick;
 8003b14:	4b03      	ldr	r3, [pc, #12]	@ (8003b24 <HAL_GetTick+0x14>)
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	2000085c 	.word	0x2000085c

08003b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b30:	f7ff ffee 	bl	8003b10 <HAL_GetTick>
 8003b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d005      	beq.n	8003b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b42:	4b0a      	ldr	r3, [pc, #40]	@ (8003b6c <HAL_Delay+0x44>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b4e:	bf00      	nop
 8003b50:	f7ff ffde 	bl	8003b10 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d8f7      	bhi.n	8003b50 <HAL_Delay+0x28>
  {
  }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000008 	.word	0x20000008

08003b70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e031      	b.n	8003bea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff fa98 	bl	80030c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d116      	bne.n	8003bdc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bb2:	4b10      	ldr	r3, [pc, #64]	@ (8003bf4 <HAL_ADC_Init+0x84>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	f043 0202 	orr.w	r2, r3, #2
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa90 	bl	80040e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f023 0303 	bic.w	r3, r3, #3
 8003bd2:	f043 0201 	orr.w	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bda:	e001      	b.n	8003be0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	ffffeefd 	.word	0xffffeefd

08003bf8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_ADC_Start_DMA+0x22>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e0d6      	b.n	8003dc8 <HAL_ADC_Start_DMA+0x1d0>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d018      	beq.n	8003c62 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003c40:	4b63      	ldr	r3, [pc, #396]	@ (8003dd0 <HAL_ADC_Start_DMA+0x1d8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a63      	ldr	r2, [pc, #396]	@ (8003dd4 <HAL_ADC_Start_DMA+0x1dc>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0c9a      	lsrs	r2, r3, #18
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4413      	add	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8003c54:	e002      	b.n	8003c5c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f9      	bne.n	8003c56 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	f040 809e 	bne.w	8003dae <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c76:	4b58      	ldr	r3, [pc, #352]	@ (8003dd8 <HAL_ADC_Start_DMA+0x1e0>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cac:	d106      	bne.n	8003cbc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	f023 0206 	bic.w	r2, r3, #6
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003cba:	e002      	b.n	8003cc2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cce:	4a43      	ldr	r2, [pc, #268]	@ (8003ddc <HAL_ADC_Start_DMA+0x1e4>)
 8003cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd6:	4a42      	ldr	r2, [pc, #264]	@ (8003de0 <HAL_ADC_Start_DMA+0x1e8>)
 8003cd8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cde:	4a41      	ldr	r2, [pc, #260]	@ (8003de4 <HAL_ADC_Start_DMA+0x1ec>)
 8003ce0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003cea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003cfa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	334c      	adds	r3, #76	@ 0x4c
 8003d16:	4619      	mov	r1, r3
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f000 fd96 	bl	800484c <HAL_DMA_Start_IT>
 8003d20:	4603      	mov	r3, r0
 8003d22:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003d24:	4b30      	ldr	r3, [pc, #192]	@ (8003de8 <HAL_ADC_Start_DMA+0x1f0>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10f      	bne.n	8003d50 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d143      	bne.n	8003dc6 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d4c:	609a      	str	r2, [r3, #8]
 8003d4e:	e03a      	b.n	8003dc6 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a25      	ldr	r2, [pc, #148]	@ (8003dec <HAL_ADC_Start_DMA+0x1f4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d10e      	bne.n	8003d78 <HAL_ADC_Start_DMA+0x180>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d107      	bne.n	8003d78 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d76:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003d78:	4b1b      	ldr	r3, [pc, #108]	@ (8003de8 <HAL_ADC_Start_DMA+0x1f0>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d120      	bne.n	8003dc6 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a19      	ldr	r2, [pc, #100]	@ (8003df0 <HAL_ADC_Start_DMA+0x1f8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d11b      	bne.n	8003dc6 <HAL_ADC_Start_DMA+0x1ce>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d114      	bne.n	8003dc6 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	e00b      	b.n	8003dc6 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	f043 0210 	orr.w	r2, r3, #16
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbe:	f043 0201 	orr.w	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	431bde83 	.word	0x431bde83
 8003dd8:	fffff8fe 	.word	0xfffff8fe
 8003ddc:	080042d9 	.word	0x080042d9
 8003de0:	08004393 	.word	0x08004393
 8003de4:	080043af 	.word	0x080043af
 8003de8:	40012300 	.word	0x40012300
 8003dec:	40012000 	.word	0x40012000
 8003df0:	40012200 	.word	0x40012200

08003df4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x1c>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e13a      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x292>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b09      	cmp	r3, #9
 8003e5a:	d93a      	bls.n	8003ed2 <HAL_ADC_ConfigChannel+0xa2>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e64:	d035      	beq.n	8003ed2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68d9      	ldr	r1, [r3, #12]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	4613      	mov	r3, r2
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	4413      	add	r3, r2
 8003e7a:	3b1e      	subs	r3, #30
 8003e7c:	2207      	movs	r2, #7
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43da      	mvns	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	400a      	ands	r2, r1
 8003e8a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a8f      	ldr	r2, [pc, #572]	@ (80040d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d10a      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68d9      	ldr	r1, [r3, #12]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	061a      	lsls	r2, r3, #24
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003eaa:	e039      	b.n	8003f20 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68d9      	ldr	r1, [r3, #12]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4403      	add	r3, r0
 8003ec4:	3b1e      	subs	r3, #30
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ed0:	e026      	b.n	8003f20 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6919      	ldr	r1, [r3, #16]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	2207      	movs	r2, #7
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43da      	mvns	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	400a      	ands	r2, r1
 8003ef8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6919      	ldr	r1, [r3, #16]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	4403      	add	r3, r0
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	409a      	lsls	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b06      	cmp	r3, #6
 8003f26:	d824      	bhi.n	8003f72 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	3b05      	subs	r3, #5
 8003f3a:	221f      	movs	r2, #31
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43da      	mvns	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	400a      	ands	r2, r1
 8003f48:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	4618      	mov	r0, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	3b05      	subs	r3, #5
 8003f64:	fa00 f203 	lsl.w	r2, r0, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f70:	e04c      	b.n	800400c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b0c      	cmp	r3, #12
 8003f78:	d824      	bhi.n	8003fc4 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	3b23      	subs	r3, #35	@ 0x23
 8003f8c:	221f      	movs	r2, #31
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43da      	mvns	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	400a      	ands	r2, r1
 8003f9a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	4618      	mov	r0, r3
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3b23      	subs	r3, #35	@ 0x23
 8003fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fc2:	e023      	b.n	800400c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3b41      	subs	r3, #65	@ 0x41
 8003fd6:	221f      	movs	r2, #31
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43da      	mvns	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	400a      	ands	r2, r1
 8003fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3b41      	subs	r3, #65	@ 0x41
 8004000:	fa00 f203 	lsl.w	r2, r0, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a30      	ldr	r2, [pc, #192]	@ (80040d4 <HAL_ADC_ConfigChannel+0x2a4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d10a      	bne.n	800402c <HAL_ADC_ConfigChannel+0x1fc>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800401e:	d105      	bne.n	800402c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004020:	4b2d      	ldr	r3, [pc, #180]	@ (80040d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4a2c      	ldr	r2, [pc, #176]	@ (80040d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004026:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800402a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a28      	ldr	r2, [pc, #160]	@ (80040d4 <HAL_ADC_ConfigChannel+0x2a4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d10f      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x226>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b12      	cmp	r3, #18
 800403c:	d10b      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800403e:	4b26      	ldr	r3, [pc, #152]	@ (80040d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4a25      	ldr	r2, [pc, #148]	@ (80040d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004044:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004048:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800404a:	4b23      	ldr	r3, [pc, #140]	@ (80040d8 <HAL_ADC_ConfigChannel+0x2a8>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4a22      	ldr	r2, [pc, #136]	@ (80040d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004050:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004054:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1e      	ldr	r2, [pc, #120]	@ (80040d4 <HAL_ADC_ConfigChannel+0x2a4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d12b      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x288>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1a      	ldr	r2, [pc, #104]	@ (80040d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <HAL_ADC_ConfigChannel+0x242>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b11      	cmp	r3, #17
 8004070:	d122      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004072:	4b19      	ldr	r3, [pc, #100]	@ (80040d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4a18      	ldr	r2, [pc, #96]	@ (80040d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004078:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800407c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800407e:	4b16      	ldr	r3, [pc, #88]	@ (80040d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4a15      	ldr	r2, [pc, #84]	@ (80040d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004084:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004088:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a10      	ldr	r2, [pc, #64]	@ (80040d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d111      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004094:	4b11      	ldr	r3, [pc, #68]	@ (80040dc <HAL_ADC_ConfigChannel+0x2ac>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a11      	ldr	r2, [pc, #68]	@ (80040e0 <HAL_ADC_ConfigChannel+0x2b0>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0c9a      	lsrs	r2, r3, #18
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80040aa:	e002      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f9      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	10000012 	.word	0x10000012
 80040d4:	40012000 	.word	0x40012000
 80040d8:	40012300 	.word	0x40012300
 80040dc:	20000000 	.word	0x20000000
 80040e0:	431bde83 	.word	0x431bde83

080040e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80040ec:	4b78      	ldr	r3, [pc, #480]	@ (80042d0 <ADC_Init+0x1ec>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a77      	ldr	r2, [pc, #476]	@ (80042d0 <ADC_Init+0x1ec>)
 80040f2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80040f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80040f8:	4b75      	ldr	r3, [pc, #468]	@ (80042d0 <ADC_Init+0x1ec>)
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4973      	ldr	r1, [pc, #460]	@ (80042d0 <ADC_Init+0x1ec>)
 8004102:	4313      	orrs	r3, r2
 8004104:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6859      	ldr	r1, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	021a      	lsls	r2, r3, #8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800415a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6899      	ldr	r1, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004172:	4a58      	ldr	r2, [pc, #352]	@ (80042d4 <ADC_Init+0x1f0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d022      	beq.n	80041be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004186:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6899      	ldr	r1, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6899      	ldr	r1, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	e00f      	b.n	80041de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0202 	bic.w	r2, r2, #2
 80041ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6899      	ldr	r1, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	005a      	lsls	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01b      	beq.n	8004244 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800421a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800422a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6859      	ldr	r1, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	3b01      	subs	r3, #1
 8004238:	035a      	lsls	r2, r3, #13
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	e007      	b.n	8004254 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004252:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004262:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	3b01      	subs	r3, #1
 8004270:	051a      	lsls	r2, r3, #20
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6899      	ldr	r1, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004296:	025a      	lsls	r2, r3, #9
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6899      	ldr	r1, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	029a      	lsls	r2, r3, #10
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	609a      	str	r2, [r3, #8]
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	40012300 	.word	0x40012300
 80042d4:	0f000001 	.word	0x0f000001

080042d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d13c      	bne.n	800436c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d12b      	bne.n	8004364 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004310:	2b00      	cmp	r3, #0
 8004312:	d127      	bne.n	8004364 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800431e:	2b00      	cmp	r3, #0
 8004320:	d006      	beq.n	8004330 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800432c:	2b00      	cmp	r3, #0
 800432e:	d119      	bne.n	8004364 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0220 	bic.w	r2, r2, #32
 800433e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435c:	f043 0201 	orr.w	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7ff fd45 	bl	8003df4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800436a:	e00e      	b.n	800438a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff fd4f 	bl	8003e1c <HAL_ADC_ErrorCallback>
}
 800437e:	e004      	b.n	800438a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	4798      	blx	r3
}
 800438a:	bf00      	nop
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f7ff fd31 	bl	8003e08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2240      	movs	r2, #64	@ 0x40
 80043c0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c6:	f043 0204 	orr.w	r2, r3, #4
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff fd24 	bl	8003e1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043ec:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <__NVIC_SetPriorityGrouping+0x40>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043f8:	4013      	ands	r3, r2
 80043fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004404:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <__NVIC_SetPriorityGrouping+0x44>)
 8004406:	4313      	orrs	r3, r2
 8004408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800440a:	4a04      	ldr	r2, [pc, #16]	@ (800441c <__NVIC_SetPriorityGrouping+0x40>)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	60d3      	str	r3, [r2, #12]
}
 8004410:	bf00      	nop
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	e000ed00 	.word	0xe000ed00
 8004420:	05fa0000 	.word	0x05fa0000

08004424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004428:	4b04      	ldr	r3, [pc, #16]	@ (800443c <__NVIC_GetPriorityGrouping+0x18>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	0a1b      	lsrs	r3, r3, #8
 800442e:	f003 0307 	and.w	r3, r3, #7
}
 8004432:	4618      	mov	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	e000ed00 	.word	0xe000ed00

08004440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800444a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444e:	2b00      	cmp	r3, #0
 8004450:	db0b      	blt.n	800446a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	f003 021f 	and.w	r2, r3, #31
 8004458:	4907      	ldr	r1, [pc, #28]	@ (8004478 <__NVIC_EnableIRQ+0x38>)
 800445a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2001      	movs	r0, #1
 8004462:	fa00 f202 	lsl.w	r2, r0, r2
 8004466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	e000e100 	.word	0xe000e100

0800447c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	6039      	str	r1, [r7, #0]
 8004486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448c:	2b00      	cmp	r3, #0
 800448e:	db0a      	blt.n	80044a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	b2da      	uxtb	r2, r3
 8004494:	490c      	ldr	r1, [pc, #48]	@ (80044c8 <__NVIC_SetPriority+0x4c>)
 8004496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449a:	0112      	lsls	r2, r2, #4
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	440b      	add	r3, r1
 80044a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044a4:	e00a      	b.n	80044bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	4908      	ldr	r1, [pc, #32]	@ (80044cc <__NVIC_SetPriority+0x50>)
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	3b04      	subs	r3, #4
 80044b4:	0112      	lsls	r2, r2, #4
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	440b      	add	r3, r1
 80044ba:	761a      	strb	r2, [r3, #24]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000e100 	.word	0xe000e100
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b089      	sub	sp, #36	@ 0x24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f1c3 0307 	rsb	r3, r3, #7
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	bf28      	it	cs
 80044ee:	2304      	movcs	r3, #4
 80044f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3304      	adds	r3, #4
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d902      	bls.n	8004500 <NVIC_EncodePriority+0x30>
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3b03      	subs	r3, #3
 80044fe:	e000      	b.n	8004502 <NVIC_EncodePriority+0x32>
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004504:	f04f 32ff 	mov.w	r2, #4294967295
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43da      	mvns	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	401a      	ands	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004518:	f04f 31ff 	mov.w	r1, #4294967295
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	fa01 f303 	lsl.w	r3, r1, r3
 8004522:	43d9      	mvns	r1, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004528:	4313      	orrs	r3, r2
         );
}
 800452a:	4618      	mov	r0, r3
 800452c:	3724      	adds	r7, #36	@ 0x24
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3b01      	subs	r3, #1
 8004544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004548:	d301      	bcc.n	800454e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800454a:	2301      	movs	r3, #1
 800454c:	e00f      	b.n	800456e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800454e:	4a0a      	ldr	r2, [pc, #40]	@ (8004578 <SysTick_Config+0x40>)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3b01      	subs	r3, #1
 8004554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004556:	210f      	movs	r1, #15
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	f7ff ff8e 	bl	800447c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <SysTick_Config+0x40>)
 8004562:	2200      	movs	r2, #0
 8004564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004566:	4b04      	ldr	r3, [pc, #16]	@ (8004578 <SysTick_Config+0x40>)
 8004568:	2207      	movs	r2, #7
 800456a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	e000e010 	.word	0xe000e010

0800457c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ff29 	bl	80043dc <__NVIC_SetPriorityGrouping>
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004592:	b580      	push	{r7, lr}
 8004594:	b086      	sub	sp, #24
 8004596:	af00      	add	r7, sp, #0
 8004598:	4603      	mov	r3, r0
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
 800459e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045a4:	f7ff ff3e 	bl	8004424 <__NVIC_GetPriorityGrouping>
 80045a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	68b9      	ldr	r1, [r7, #8]
 80045ae:	6978      	ldr	r0, [r7, #20]
 80045b0:	f7ff ff8e 	bl	80044d0 <NVIC_EncodePriority>
 80045b4:	4602      	mov	r2, r0
 80045b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ba:	4611      	mov	r1, r2
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff ff5d 	bl	800447c <__NVIC_SetPriority>
}
 80045c2:	bf00      	nop
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	4603      	mov	r3, r0
 80045d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff ff31 	bl	8004440 <__NVIC_EnableIRQ>
}
 80045de:	bf00      	nop
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff ffa2 	bl	8004538 <SysTick_Config>
 80045f4:	4603      	mov	r3, r0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004604:	f3bf 8f5f 	dmb	sy
}
 8004608:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800460a:	4b07      	ldr	r3, [pc, #28]	@ (8004628 <HAL_MPU_Disable+0x28>)
 800460c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460e:	4a06      	ldr	r2, [pc, #24]	@ (8004628 <HAL_MPU_Disable+0x28>)
 8004610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004614:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004616:	4b05      	ldr	r3, [pc, #20]	@ (800462c <HAL_MPU_Disable+0x2c>)
 8004618:	2200      	movs	r2, #0
 800461a:	605a      	str	r2, [r3, #4]
}
 800461c:	bf00      	nop
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	e000ed00 	.word	0xe000ed00
 800462c:	e000ed90 	.word	0xe000ed90

08004630 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004638:	4a0b      	ldr	r2, [pc, #44]	@ (8004668 <HAL_MPU_Enable+0x38>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004642:	4b0a      	ldr	r3, [pc, #40]	@ (800466c <HAL_MPU_Enable+0x3c>)
 8004644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004646:	4a09      	ldr	r2, [pc, #36]	@ (800466c <HAL_MPU_Enable+0x3c>)
 8004648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800464c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800464e:	f3bf 8f4f 	dsb	sy
}
 8004652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004654:	f3bf 8f6f 	isb	sy
}
 8004658:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	e000ed90 	.word	0xe000ed90
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	785a      	ldrb	r2, [r3, #1]
 800467c:	4b1b      	ldr	r3, [pc, #108]	@ (80046ec <HAL_MPU_ConfigRegion+0x7c>)
 800467e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004680:	4b1a      	ldr	r3, [pc, #104]	@ (80046ec <HAL_MPU_ConfigRegion+0x7c>)
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	4a19      	ldr	r2, [pc, #100]	@ (80046ec <HAL_MPU_ConfigRegion+0x7c>)
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800468c:	4a17      	ldr	r2, [pc, #92]	@ (80046ec <HAL_MPU_ConfigRegion+0x7c>)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	7b1b      	ldrb	r3, [r3, #12]
 8004698:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	7adb      	ldrb	r3, [r3, #11]
 800469e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	7a9b      	ldrb	r3, [r3, #10]
 80046a6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80046a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	7b5b      	ldrb	r3, [r3, #13]
 80046ae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80046b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	7b9b      	ldrb	r3, [r3, #14]
 80046b6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80046b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	7bdb      	ldrb	r3, [r3, #15]
 80046be:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80046c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	7a5b      	ldrb	r3, [r3, #9]
 80046c6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80046c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	7a1b      	ldrb	r3, [r3, #8]
 80046ce:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80046d0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	7812      	ldrb	r2, [r2, #0]
 80046d6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046d8:	4a04      	ldr	r2, [pc, #16]	@ (80046ec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046da:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046dc:	6113      	str	r3, [r2, #16]
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	e000ed90 	.word	0xe000ed90

080046f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046fc:	f7ff fa08 	bl	8003b10 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e099      	b.n	8004840 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800472c:	e00f      	b.n	800474e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800472e:	f7ff f9ef 	bl	8003b10 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b05      	cmp	r3, #5
 800473a:	d908      	bls.n	800474e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2203      	movs	r2, #3
 8004746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e078      	b.n	8004840 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e8      	bne.n	800472e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4b38      	ldr	r3, [pc, #224]	@ (8004848 <HAL_DMA_Init+0x158>)
 8004768:	4013      	ands	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800477a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004786:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004792:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d107      	bne.n	80047b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b0:	4313      	orrs	r3, r2
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0307 	bic.w	r3, r3, #7
 80047ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d117      	bne.n	8004812 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00e      	beq.n	8004812 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fb09 	bl	8004e0c <DMA_CheckFifoParam>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2240      	movs	r2, #64	@ 0x40
 8004804:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800480e:	2301      	movs	r3, #1
 8004810:	e016      	b.n	8004840 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fac0 	bl	8004da0 <DMA_CalcBaseAndBitshift>
 8004820:	4603      	mov	r3, r0
 8004822:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004828:	223f      	movs	r2, #63	@ 0x3f
 800482a:	409a      	lsls	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	e010803f 	.word	0xe010803f

0800484c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004862:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_DMA_Start_IT+0x26>
 800486e:	2302      	movs	r3, #2
 8004870:	e048      	b.n	8004904 <HAL_DMA_Start_IT+0xb8>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d137      	bne.n	80048f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2202      	movs	r2, #2
 800488a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 fa52 	bl	8004d44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a4:	223f      	movs	r2, #63	@ 0x3f
 80048a6:	409a      	lsls	r2, r3
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0216 	orr.w	r2, r2, #22
 80048ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d007      	beq.n	80048e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0208 	orr.w	r2, r2, #8
 80048e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e005      	b.n	8004902 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048fe:	2302      	movs	r3, #2
 8004900:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004902:	7dfb      	ldrb	r3, [r7, #23]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004918:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800491a:	f7ff f8f9 	bl	8003b10 <HAL_GetTick>
 800491e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d008      	beq.n	800493e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2280      	movs	r2, #128	@ 0x80
 8004930:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e052      	b.n	80049e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0216 	bic.w	r2, r2, #22
 800494c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800495c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	d103      	bne.n	800496e <HAL_DMA_Abort+0x62>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0208 	bic.w	r2, r2, #8
 800497c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800498e:	e013      	b.n	80049b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004990:	f7ff f8be 	bl	8003b10 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b05      	cmp	r3, #5
 800499c:	d90c      	bls.n	80049b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2203      	movs	r2, #3
 80049a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e015      	b.n	80049e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e4      	bne.n	8004990 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ca:	223f      	movs	r2, #63	@ 0x3f
 80049cc:	409a      	lsls	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d004      	beq.n	8004a0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2280      	movs	r2, #128	@ 0x80
 8004a04:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e00c      	b.n	8004a24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2205      	movs	r2, #5
 8004a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0201 	bic.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004a3c:	4b8e      	ldr	r3, [pc, #568]	@ (8004c78 <HAL_DMA_IRQHandler+0x248>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a8e      	ldr	r2, [pc, #568]	@ (8004c7c <HAL_DMA_IRQHandler+0x24c>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	0a9b      	lsrs	r3, r3, #10
 8004a48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d01a      	beq.n	8004a9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d013      	beq.n	8004a9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0204 	bic.w	r2, r2, #4
 8004a82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a88:	2208      	movs	r2, #8
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a94:	f043 0201 	orr.w	r2, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	409a      	lsls	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d012      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00b      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004abe:	2201      	movs	r2, #1
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aca:	f043 0202 	orr.w	r2, r3, #2
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d012      	beq.n	8004b08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00b      	beq.n	8004b08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af4:	2204      	movs	r2, #4
 8004af6:	409a      	lsls	r2, r3
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b00:	f043 0204 	orr.w	r2, r3, #4
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0c:	2210      	movs	r2, #16
 8004b0e:	409a      	lsls	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d043      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d03c      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	409a      	lsls	r2, r3
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d018      	beq.n	8004b72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d108      	bne.n	8004b60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d024      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	4798      	blx	r3
 8004b5e:	e01f      	b.n	8004ba0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01b      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	4798      	blx	r3
 8004b70:	e016      	b.n	8004ba0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d107      	bne.n	8004b90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0208 	bic.w	r2, r2, #8
 8004b8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 808f 	beq.w	8004cd0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8087 	beq.w	8004cd0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b05      	cmp	r3, #5
 8004bd8:	d136      	bne.n	8004c48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0216 	bic.w	r2, r2, #22
 8004be8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695a      	ldr	r2, [r3, #20]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bf8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d103      	bne.n	8004c0a <HAL_DMA_IRQHandler+0x1da>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d007      	beq.n	8004c1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0208 	bic.w	r2, r2, #8
 8004c18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1e:	223f      	movs	r2, #63	@ 0x3f
 8004c20:	409a      	lsls	r2, r3
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d07e      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	4798      	blx	r3
        }
        return;
 8004c46:	e079      	b.n	8004d3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01d      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10d      	bne.n	8004c80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d031      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	4798      	blx	r3
 8004c74:	e02c      	b.n	8004cd0 <HAL_DMA_IRQHandler+0x2a0>
 8004c76:	bf00      	nop
 8004c78:	20000000 	.word	0x20000000
 8004c7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d023      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	4798      	blx	r3
 8004c90:	e01e      	b.n	8004cd0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10f      	bne.n	8004cc0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0210 	bic.w	r2, r2, #16
 8004cae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d032      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d022      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2205      	movs	r2, #5
 8004ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d307      	bcc.n	8004d18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f2      	bne.n	8004cfc <HAL_DMA_IRQHandler+0x2cc>
 8004d16:	e000      	b.n	8004d1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	4798      	blx	r3
 8004d3a:	e000      	b.n	8004d3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d3c:	bf00      	nop
    }
  }
}
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b40      	cmp	r3, #64	@ 0x40
 8004d70:	d108      	bne.n	8004d84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d82:	e007      	b.n	8004d94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	60da      	str	r2, [r3, #12]
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	3b10      	subs	r3, #16
 8004db0:	4a13      	ldr	r2, [pc, #76]	@ (8004e00 <DMA_CalcBaseAndBitshift+0x60>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	091b      	lsrs	r3, r3, #4
 8004db8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dba:	4a12      	ldr	r2, [pc, #72]	@ (8004e04 <DMA_CalcBaseAndBitshift+0x64>)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d908      	bls.n	8004de0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e08 <DMA_CalcBaseAndBitshift+0x68>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	1d1a      	adds	r2, r3, #4
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	659a      	str	r2, [r3, #88]	@ 0x58
 8004dde:	e006      	b.n	8004dee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	4b08      	ldr	r3, [pc, #32]	@ (8004e08 <DMA_CalcBaseAndBitshift+0x68>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	aaaaaaab 	.word	0xaaaaaaab
 8004e04:	080125f8 	.word	0x080125f8
 8004e08:	fffffc00 	.word	0xfffffc00

08004e0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d11f      	bne.n	8004e66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d856      	bhi.n	8004eda <DMA_CheckFifoParam+0xce>
 8004e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e34 <DMA_CheckFifoParam+0x28>)
 8004e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e32:	bf00      	nop
 8004e34:	08004e45 	.word	0x08004e45
 8004e38:	08004e57 	.word	0x08004e57
 8004e3c:	08004e45 	.word	0x08004e45
 8004e40:	08004edb 	.word	0x08004edb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d046      	beq.n	8004ede <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e54:	e043      	b.n	8004ede <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e5e:	d140      	bne.n	8004ee2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e64:	e03d      	b.n	8004ee2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e6e:	d121      	bne.n	8004eb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d837      	bhi.n	8004ee6 <DMA_CheckFifoParam+0xda>
 8004e76:	a201      	add	r2, pc, #4	@ (adr r2, 8004e7c <DMA_CheckFifoParam+0x70>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004e8d 	.word	0x08004e8d
 8004e80:	08004e93 	.word	0x08004e93
 8004e84:	08004e8d 	.word	0x08004e8d
 8004e88:	08004ea5 	.word	0x08004ea5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e90:	e030      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d025      	beq.n	8004eea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea2:	e022      	b.n	8004eea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004eac:	d11f      	bne.n	8004eee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004eb2:	e01c      	b.n	8004eee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d903      	bls.n	8004ec2 <DMA_CheckFifoParam+0xb6>
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d003      	beq.n	8004ec8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ec0:	e018      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec6:	e015      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00e      	beq.n	8004ef2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed8:	e00b      	b.n	8004ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8004eda:	bf00      	nop
 8004edc:	e00a      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ede:	bf00      	nop
 8004ee0:	e008      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ee2:	bf00      	nop
 8004ee4:	e006      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e004      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8004eea:	bf00      	nop
 8004eec:	e002      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004eee:	bf00      	nop
 8004ef0:	e000      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ef2:	bf00      	nop
    }
  } 
  
  return status; 
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop

08004f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b089      	sub	sp, #36	@ 0x24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f16:	2300      	movs	r3, #0
 8004f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
 8004f22:	e169      	b.n	80051f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f24:	2201      	movs	r2, #1
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4013      	ands	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	f040 8158 	bne.w	80051f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d005      	beq.n	8004f5a <HAL_GPIO_Init+0x56>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d130      	bne.n	8004fbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	2203      	movs	r2, #3
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f90:	2201      	movs	r2, #1
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	f003 0201 	and.w	r2, r3, #1
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d017      	beq.n	8004ff8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	2203      	movs	r2, #3
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d123      	bne.n	800504c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	08da      	lsrs	r2, r3, #3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3208      	adds	r2, #8
 800500c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	220f      	movs	r2, #15
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	4013      	ands	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	08da      	lsrs	r2, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3208      	adds	r2, #8
 8005046:	69b9      	ldr	r1, [r7, #24]
 8005048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	2203      	movs	r2, #3
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 0203 	and.w	r2, r3, #3
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80b2 	beq.w	80051f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800508e:	4b60      	ldr	r3, [pc, #384]	@ (8005210 <HAL_GPIO_Init+0x30c>)
 8005090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005092:	4a5f      	ldr	r2, [pc, #380]	@ (8005210 <HAL_GPIO_Init+0x30c>)
 8005094:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005098:	6453      	str	r3, [r2, #68]	@ 0x44
 800509a:	4b5d      	ldr	r3, [pc, #372]	@ (8005210 <HAL_GPIO_Init+0x30c>)
 800509c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80050a6:	4a5b      	ldr	r2, [pc, #364]	@ (8005214 <HAL_GPIO_Init+0x310>)
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	089b      	lsrs	r3, r3, #2
 80050ac:	3302      	adds	r3, #2
 80050ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	220f      	movs	r2, #15
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43db      	mvns	r3, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4013      	ands	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a52      	ldr	r2, [pc, #328]	@ (8005218 <HAL_GPIO_Init+0x314>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d02b      	beq.n	800512a <HAL_GPIO_Init+0x226>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a51      	ldr	r2, [pc, #324]	@ (800521c <HAL_GPIO_Init+0x318>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d025      	beq.n	8005126 <HAL_GPIO_Init+0x222>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a50      	ldr	r2, [pc, #320]	@ (8005220 <HAL_GPIO_Init+0x31c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d01f      	beq.n	8005122 <HAL_GPIO_Init+0x21e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a4f      	ldr	r2, [pc, #316]	@ (8005224 <HAL_GPIO_Init+0x320>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d019      	beq.n	800511e <HAL_GPIO_Init+0x21a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a4e      	ldr	r2, [pc, #312]	@ (8005228 <HAL_GPIO_Init+0x324>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d013      	beq.n	800511a <HAL_GPIO_Init+0x216>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a4d      	ldr	r2, [pc, #308]	@ (800522c <HAL_GPIO_Init+0x328>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00d      	beq.n	8005116 <HAL_GPIO_Init+0x212>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a4c      	ldr	r2, [pc, #304]	@ (8005230 <HAL_GPIO_Init+0x32c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d007      	beq.n	8005112 <HAL_GPIO_Init+0x20e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a4b      	ldr	r2, [pc, #300]	@ (8005234 <HAL_GPIO_Init+0x330>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d101      	bne.n	800510e <HAL_GPIO_Init+0x20a>
 800510a:	2307      	movs	r3, #7
 800510c:	e00e      	b.n	800512c <HAL_GPIO_Init+0x228>
 800510e:	2308      	movs	r3, #8
 8005110:	e00c      	b.n	800512c <HAL_GPIO_Init+0x228>
 8005112:	2306      	movs	r3, #6
 8005114:	e00a      	b.n	800512c <HAL_GPIO_Init+0x228>
 8005116:	2305      	movs	r3, #5
 8005118:	e008      	b.n	800512c <HAL_GPIO_Init+0x228>
 800511a:	2304      	movs	r3, #4
 800511c:	e006      	b.n	800512c <HAL_GPIO_Init+0x228>
 800511e:	2303      	movs	r3, #3
 8005120:	e004      	b.n	800512c <HAL_GPIO_Init+0x228>
 8005122:	2302      	movs	r3, #2
 8005124:	e002      	b.n	800512c <HAL_GPIO_Init+0x228>
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <HAL_GPIO_Init+0x228>
 800512a:	2300      	movs	r3, #0
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	f002 0203 	and.w	r2, r2, #3
 8005132:	0092      	lsls	r2, r2, #2
 8005134:	4093      	lsls	r3, r2
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	4313      	orrs	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800513c:	4935      	ldr	r1, [pc, #212]	@ (8005214 <HAL_GPIO_Init+0x310>)
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	089b      	lsrs	r3, r3, #2
 8005142:	3302      	adds	r3, #2
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800514a:	4b3b      	ldr	r3, [pc, #236]	@ (8005238 <HAL_GPIO_Init+0x334>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	43db      	mvns	r3, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4013      	ands	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800516e:	4a32      	ldr	r2, [pc, #200]	@ (8005238 <HAL_GPIO_Init+0x334>)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005174:	4b30      	ldr	r3, [pc, #192]	@ (8005238 <HAL_GPIO_Init+0x334>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	43db      	mvns	r3, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005198:	4a27      	ldr	r2, [pc, #156]	@ (8005238 <HAL_GPIO_Init+0x334>)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800519e:	4b26      	ldr	r3, [pc, #152]	@ (8005238 <HAL_GPIO_Init+0x334>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	43db      	mvns	r3, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005238 <HAL_GPIO_Init+0x334>)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005238 <HAL_GPIO_Init+0x334>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051ec:	4a12      	ldr	r2, [pc, #72]	@ (8005238 <HAL_GPIO_Init+0x334>)
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	3301      	adds	r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	2b0f      	cmp	r3, #15
 80051fc:	f67f ae92 	bls.w	8004f24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	3724      	adds	r7, #36	@ 0x24
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40023800 	.word	0x40023800
 8005214:	40013800 	.word	0x40013800
 8005218:	40020000 	.word	0x40020000
 800521c:	40020400 	.word	0x40020400
 8005220:	40020800 	.word	0x40020800
 8005224:	40020c00 	.word	0x40020c00
 8005228:	40021000 	.word	0x40021000
 800522c:	40021400 	.word	0x40021400
 8005230:	40021800 	.word	0x40021800
 8005234:	40021c00 	.word	0x40021c00
 8005238:	40013c00 	.word	0x40013c00

0800523c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	807b      	strh	r3, [r7, #2]
 8005248:	4613      	mov	r3, r2
 800524a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800524c:	787b      	ldrb	r3, [r7, #1]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005252:	887a      	ldrh	r2, [r7, #2]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005258:	e003      	b.n	8005262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800525a:	887b      	ldrh	r3, [r7, #2]
 800525c:	041a      	lsls	r2, r3, #16
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	619a      	str	r2, [r3, #24]
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800527a:	4b08      	ldr	r3, [pc, #32]	@ (800529c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800527c:	695a      	ldr	r2, [r3, #20]
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	4013      	ands	r3, r2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d006      	beq.n	8005294 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005286:	4a05      	ldr	r2, [pc, #20]	@ (800529c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005288:	88fb      	ldrh	r3, [r7, #6]
 800528a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	4618      	mov	r0, r3
 8005290:	f7fd f994 	bl	80025bc <HAL_GPIO_EXTI_Callback>
  }
}
 8005294:	bf00      	nop
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40013c00 	.word	0x40013c00

080052a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e08b      	b.n	80053ca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fd ff70 	bl	80031ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2224      	movs	r2, #36	@ 0x24
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0201 	bic.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80052f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005300:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d107      	bne.n	800531a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005316:	609a      	str	r2, [r3, #8]
 8005318:	e006      	b.n	8005328 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005326:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d108      	bne.n	8005342 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800533e:	605a      	str	r2, [r3, #4]
 8005340:	e007      	b.n	8005352 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005350:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6859      	ldr	r1, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	4b1d      	ldr	r3, [pc, #116]	@ (80053d4 <HAL_I2C_Init+0x134>)
 800535e:	430b      	orrs	r3, r1
 8005360:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005370:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69d9      	ldr	r1, [r3, #28]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1a      	ldr	r2, [r3, #32]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	02008000 	.word	0x02008000

080053d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d138      	bne.n	8005460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e032      	b.n	8005462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2224      	movs	r2, #36	@ 0x24
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800542a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6819      	ldr	r1, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	e000      	b.n	8005462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005460:	2302      	movs	r3, #2
  }
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b20      	cmp	r3, #32
 8005482:	d139      	bne.n	80054f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800548e:	2302      	movs	r3, #2
 8005490:	e033      	b.n	80054fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2224      	movs	r2, #36	@ 0x24
 800549e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0201 	bic.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80054c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	e000      	b.n	80054fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054f8:	2302      	movs	r3, #2
  }
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b086      	sub	sp, #24
 800550a:	af02      	add	r7, sp, #8
 800550c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e108      	b.n	800572a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f009 fda8 	bl	800f088 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2203      	movs	r2, #3
 800553c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005546:	d102      	bne.n	800554e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f006 f981 	bl	800b85a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	7c1a      	ldrb	r2, [r3, #16]
 8005560:	f88d 2000 	strb.w	r2, [sp]
 8005564:	3304      	adds	r3, #4
 8005566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005568:	f006 f838 	bl	800b5dc <USB_CoreInit>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d005      	beq.n	800557e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e0d5      	b.n	800572a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2100      	movs	r1, #0
 8005584:	4618      	mov	r0, r3
 8005586:	f006 f979 	bl	800b87c <USB_SetCurrentMode>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0c6      	b.n	800572a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800559c:	2300      	movs	r3, #0
 800559e:	73fb      	strb	r3, [r7, #15]
 80055a0:	e04a      	b.n	8005638 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80055a2:	7bfa      	ldrb	r2, [r7, #15]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	3315      	adds	r3, #21
 80055b2:	2201      	movs	r2, #1
 80055b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80055b6:	7bfa      	ldrb	r2, [r7, #15]
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	3314      	adds	r3, #20
 80055c6:	7bfa      	ldrb	r2, [r7, #15]
 80055c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80055ca:	7bfa      	ldrb	r2, [r7, #15]
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	b298      	uxth	r0, r3
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	332e      	adds	r3, #46	@ 0x2e
 80055de:	4602      	mov	r2, r0
 80055e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80055e2:	7bfa      	ldrb	r2, [r7, #15]
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	3318      	adds	r3, #24
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80055f6:	7bfa      	ldrb	r2, [r7, #15]
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	331c      	adds	r3, #28
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800560a:	7bfa      	ldrb	r2, [r7, #15]
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	3320      	adds	r3, #32
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800561e:	7bfa      	ldrb	r2, [r7, #15]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	3324      	adds	r3, #36	@ 0x24
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	3301      	adds	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	791b      	ldrb	r3, [r3, #4]
 800563c:	7bfa      	ldrb	r2, [r7, #15]
 800563e:	429a      	cmp	r2, r3
 8005640:	d3af      	bcc.n	80055a2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
 8005646:	e044      	b.n	80056d2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005648:	7bfa      	ldrb	r2, [r7, #15]
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	4613      	mov	r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800565a:	2200      	movs	r2, #0
 800565c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800565e:	7bfa      	ldrb	r2, [r7, #15]
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005670:	7bfa      	ldrb	r2, [r7, #15]
 8005672:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005674:	7bfa      	ldrb	r2, [r7, #15]
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005686:	2200      	movs	r2, #0
 8005688:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800568a:	7bfa      	ldrb	r2, [r7, #15]
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80056a0:	7bfa      	ldrb	r2, [r7, #15]
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	4613      	mov	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80056b6:	7bfa      	ldrb	r2, [r7, #15]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	3301      	adds	r3, #1
 80056d0:	73fb      	strb	r3, [r7, #15]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	791b      	ldrb	r3, [r3, #4]
 80056d6:	7bfa      	ldrb	r2, [r7, #15]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d3b5      	bcc.n	8005648 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	7c1a      	ldrb	r2, [r3, #16]
 80056e4:	f88d 2000 	strb.w	r2, [sp]
 80056e8:	3304      	adds	r3, #4
 80056ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056ec:	f006 f912 	bl	800b914 <USB_DevInit>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e013      	b.n	800572a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	7b1b      	ldrb	r3, [r3, #12]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d102      	bne.n	800571e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 f95b 	bl	80069d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f007 f967 	bl	800c9f6 <USB_DevDisconnect>

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_PCD_Start+0x16>
 8005744:	2302      	movs	r3, #2
 8005746:	e012      	b.n	800576e <HAL_PCD_Start+0x3c>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4618      	mov	r0, r3
 8005756:	f006 f86f 	bl	800b838 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f007 f928 	bl	800c9b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005776:	b590      	push	{r4, r7, lr}
 8005778:	b08d      	sub	sp, #52	@ 0x34
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4618      	mov	r0, r3
 800578e:	f007 f9e6 	bl	800cb5e <USB_GetMode>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	f040 84b9 	bne.w	800610c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f007 f94a 	bl	800ca38 <USB_ReadInterrupts>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 84af 	beq.w	800610a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	0a1b      	lsrs	r3, r3, #8
 80057b6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f007 f937 	bl	800ca38 <USB_ReadInterrupts>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d107      	bne.n	80057e4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695a      	ldr	r2, [r3, #20]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f002 0202 	and.w	r2, r2, #2
 80057e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f007 f925 	bl	800ca38 <USB_ReadInterrupts>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b10      	cmp	r3, #16
 80057f6:	d161      	bne.n	80058bc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0210 	bic.w	r2, r2, #16
 8005806:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	f003 020f 	and.w	r2, r3, #15
 8005814:	4613      	mov	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	4413      	add	r3, r2
 8005824:	3304      	adds	r3, #4
 8005826:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800582e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005832:	d124      	bne.n	800587e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800583a:	4013      	ands	r3, r2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d035      	beq.n	80058ac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800584a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800584e:	b29b      	uxth	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	6a38      	ldr	r0, [r7, #32]
 8005854:	f006 ff5c 	bl	800c710 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	091b      	lsrs	r3, r3, #4
 8005860:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005864:	441a      	add	r2, r3
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	091b      	lsrs	r3, r3, #4
 8005872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005876:	441a      	add	r2, r3
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	615a      	str	r2, [r3, #20]
 800587c:	e016      	b.n	80058ac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005884:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005888:	d110      	bne.n	80058ac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005890:	2208      	movs	r2, #8
 8005892:	4619      	mov	r1, r3
 8005894:	6a38      	ldr	r0, [r7, #32]
 8005896:	f006 ff3b 	bl	800c710 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	695a      	ldr	r2, [r3, #20]
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	091b      	lsrs	r3, r3, #4
 80058a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058a6:	441a      	add	r2, r3
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0210 	orr.w	r2, r2, #16
 80058ba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f007 f8b9 	bl	800ca38 <USB_ReadInterrupts>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80058d0:	f040 80a7 	bne.w	8005a22 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f007 f8be 	bl	800ca5e <USB_ReadDevAllOutEpInterrupt>
 80058e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80058e4:	e099      	b.n	8005a1a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80058e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 808e 	beq.w	8005a0e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	4611      	mov	r1, r2
 80058fc:	4618      	mov	r0, r3
 80058fe:	f007 f8e2 	bl	800cac6 <USB_ReadDevOutEPInterrupt>
 8005902:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00c      	beq.n	8005928 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591a:	461a      	mov	r2, r3
 800591c:	2301      	movs	r3, #1
 800591e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005920:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fed0 	bl	80066c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00c      	beq.n	800594c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800593e:	461a      	mov	r2, r3
 8005940:	2308      	movs	r3, #8
 8005942:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005944:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 ffa6 	bl	8006898 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f003 0310 	and.w	r3, r3, #16
 8005952:	2b00      	cmp	r3, #0
 8005954:	d008      	beq.n	8005968 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005962:	461a      	mov	r2, r3
 8005964:	2310      	movs	r3, #16
 8005966:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d030      	beq.n	80059d4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800597a:	2b80      	cmp	r3, #128	@ 0x80
 800597c:	d109      	bne.n	8005992 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800598c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005990:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005994:	4613      	mov	r3, r2
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	4413      	add	r3, r2
 80059a4:	3304      	adds	r3, #4
 80059a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	78db      	ldrb	r3, [r3, #3]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d108      	bne.n	80059c2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2200      	movs	r2, #0
 80059b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80059b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f009 fc87 	bl	800f2d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ce:	461a      	mov	r2, r3
 80059d0:	2302      	movs	r3, #2
 80059d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d008      	beq.n	80059f0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ea:	461a      	mov	r2, r3
 80059ec:	2320      	movs	r3, #32
 80059ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a06:	461a      	mov	r2, r3
 8005a08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a0c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	3301      	adds	r3, #1
 8005a12:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a16:	085b      	lsrs	r3, r3, #1
 8005a18:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f47f af62 	bne.w	80058e6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f007 f806 	bl	800ca38 <USB_ReadInterrupts>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a36:	f040 80db 	bne.w	8005bf0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f007 f827 	bl	800ca92 <USB_ReadDevAllInEpInterrupt>
 8005a44:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005a4a:	e0cd      	b.n	8005be8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 80c2 	beq.w	8005bdc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	4611      	mov	r1, r2
 8005a62:	4618      	mov	r0, r3
 8005a64:	f007 f84d 	bl	800cb02 <USB_ReadDevInEPInterrupt>
 8005a68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d057      	beq.n	8005b24 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	69f9      	ldr	r1, [r7, #28]
 8005a90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a94:	4013      	ands	r3, r2
 8005a96:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	799b      	ldrb	r3, [r3, #6]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d132      	bne.n	8005b18 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	440b      	add	r3, r1
 8005ac0:	3320      	adds	r3, #32
 8005ac2:	6819      	ldr	r1, [r3, #0]
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4403      	add	r3, r0
 8005ad2:	331c      	adds	r3, #28
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4419      	add	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005adc:	4613      	mov	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4403      	add	r3, r0
 8005ae6:	3320      	adds	r3, #32
 8005ae8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d113      	bne.n	8005b18 <HAL_PCD_IRQHandler+0x3a2>
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af4:	4613      	mov	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	3324      	adds	r3, #36	@ 0x24
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d108      	bne.n	8005b18 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b10:	461a      	mov	r2, r3
 8005b12:	2101      	movs	r1, #1
 8005b14:	f007 f856 	bl	800cbc4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f009 fb51 	bl	800f1c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d008      	beq.n	8005b40 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f003 0310 	and.w	r3, r3, #16
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d008      	beq.n	8005b5c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b56:	461a      	mov	r2, r3
 8005b58:	2310      	movs	r3, #16
 8005b5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d008      	beq.n	8005b78 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b72:	461a      	mov	r2, r3
 8005b74:	2340      	movs	r3, #64	@ 0x40
 8005b76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d023      	beq.n	8005bca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005b82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b84:	6a38      	ldr	r0, [r7, #32]
 8005b86:	f006 f835 	bl	800bbf4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	3310      	adds	r3, #16
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	4413      	add	r3, r2
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	78db      	ldrb	r3, [r3, #3]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d108      	bne.n	8005bb8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f009 fb9e 	bl	800f2f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005bd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fcea 	bl	80065b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	3301      	adds	r3, #1
 8005be0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f47f af2e 	bne.w	8005a4c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f006 ff1f 	bl	800ca38 <USB_ReadInterrupts>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c04:	d122      	bne.n	8005c4c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c14:	f023 0301 	bic.w	r3, r3, #1
 8005c18:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d108      	bne.n	8005c36 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f009 fd1c 	bl	800f66c <HAL_PCDEx_LPM_Callback>
 8005c34:	e002      	b.n	8005c3c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f009 fb3c 	bl	800f2b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695a      	ldr	r2, [r3, #20]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f006 fef1 	bl	800ca38 <USB_ReadInterrupts>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c60:	d112      	bne.n	8005c88 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d102      	bne.n	8005c78 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f009 faf8 	bl	800f268 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695a      	ldr	r2, [r3, #20]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f006 fed3 	bl	800ca38 <USB_ReadInterrupts>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c9c:	d121      	bne.n	8005ce2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695a      	ldr	r2, [r3, #20]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005cac:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d111      	bne.n	8005cdc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc6:	089b      	lsrs	r3, r3, #2
 8005cc8:	f003 020f 	and.w	r2, r3, #15
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f009 fcc9 	bl	800f66c <HAL_PCDEx_LPM_Callback>
 8005cda:	e002      	b.n	8005ce2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f009 fac3 	bl	800f268 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f006 fea6 	bl	800ca38 <USB_ReadInterrupts>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cf6:	f040 80b7 	bne.w	8005e68 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2110      	movs	r1, #16
 8005d14:	4618      	mov	r0, r3
 8005d16:	f005 ff6d 	bl	800bbf4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d1e:	e046      	b.n	8005dae <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d32:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d44:	0151      	lsls	r1, r2, #5
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	440a      	add	r2, r1
 8005d4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d60:	461a      	mov	r2, r3
 8005d62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d66:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d98:	0151      	lsls	r1, r2, #5
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	440a      	add	r2, r1
 8005d9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005da2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005da6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005daa:	3301      	adds	r3, #1
 8005dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	791b      	ldrb	r3, [r3, #4]
 8005db2:	461a      	mov	r2, r3
 8005db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d3b2      	bcc.n	8005d20 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dc8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005dcc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	7bdb      	ldrb	r3, [r3, #15]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d016      	beq.n	8005e04 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005de6:	f043 030b 	orr.w	r3, r3, #11
 8005dea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dfc:	f043 030b 	orr.w	r3, r3, #11
 8005e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e02:	e015      	b.n	8005e30 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e0a:	695a      	ldr	r2, [r3, #20]
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e12:	4619      	mov	r1, r3
 8005e14:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e2a:	f043 030b 	orr.w	r3, r3, #11
 8005e2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e3e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005e42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6818      	ldr	r0, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e52:	461a      	mov	r2, r3
 8005e54:	f006 feb6 	bl	800cbc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	695a      	ldr	r2, [r3, #20]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005e66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f006 fde3 	bl	800ca38 <USB_ReadInterrupts>
 8005e72:	4603      	mov	r3, r0
 8005e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e7c:	d123      	bne.n	8005ec6 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f006 fe7a 	bl	800cb7c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f005 ff2a 	bl	800bce6 <USB_GetDevSpeed>
 8005e92:	4603      	mov	r3, r0
 8005e94:	461a      	mov	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681c      	ldr	r4, [r3, #0]
 8005e9e:	f001 faa3 	bl	80073e8 <HAL_RCC_GetHCLKFreq>
 8005ea2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f005 fc22 	bl	800b6f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f009 f9b0 	bl	800f216 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f006 fdb4 	bl	800ca38 <USB_ReadInterrupts>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	d10a      	bne.n	8005ef0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f009 f98d 	bl	800f1fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695a      	ldr	r2, [r3, #20]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f002 0208 	and.w	r2, r2, #8
 8005eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f006 fd9f 	bl	800ca38 <USB_ReadInterrupts>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f00:	2b80      	cmp	r3, #128	@ 0x80
 8005f02:	d123      	bne.n	8005f4c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f10:	2301      	movs	r3, #1
 8005f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f14:	e014      	b.n	8005f40 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d105      	bne.n	8005f3a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fb0a 	bl	800654e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	791b      	ldrb	r3, [r3, #4]
 8005f44:	461a      	mov	r2, r3
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d3e4      	bcc.n	8005f16 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f006 fd71 	bl	800ca38 <USB_ReadInterrupts>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f60:	d13c      	bne.n	8005fdc <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f62:	2301      	movs	r3, #1
 8005f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f66:	e02b      	b.n	8005fc0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	3318      	adds	r3, #24
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d115      	bne.n	8005fba <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005f8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	da12      	bge.n	8005fba <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f98:	4613      	mov	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	3317      	adds	r3, #23
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 faca 	bl	800654e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	791b      	ldrb	r3, [r3, #4]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d3cd      	bcc.n	8005f68 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695a      	ldr	r2, [r3, #20]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f006 fd29 	bl	800ca38 <USB_ReadInterrupts>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ff0:	d156      	bne.n	80060a0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ff6:	e045      	b.n	8006084 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800600c:	4613      	mov	r3, r2
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d12e      	bne.n	800607e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006020:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006022:	2b00      	cmp	r3, #0
 8006024:	da2b      	bge.n	800607e <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	0c1a      	lsrs	r2, r3, #16
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006030:	4053      	eors	r3, r2
 8006032:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006036:	2b00      	cmp	r3, #0
 8006038:	d121      	bne.n	800607e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800603e:	4613      	mov	r3, r2
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800604c:	2201      	movs	r2, #1
 800604e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800607a:	6053      	str	r3, [r2, #4]
            break;
 800607c:	e008      	b.n	8006090 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	3301      	adds	r3, #1
 8006082:	627b      	str	r3, [r7, #36]	@ 0x24
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	791b      	ldrb	r3, [r3, #4]
 8006088:	461a      	mov	r2, r3
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	4293      	cmp	r3, r2
 800608e:	d3b3      	bcc.n	8005ff8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695a      	ldr	r2, [r3, #20]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800609e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f006 fcc7 	bl	800ca38 <USB_ReadInterrupts>
 80060aa:	4603      	mov	r3, r0
 80060ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80060b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b4:	d10a      	bne.n	80060cc <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f009 f92e 	bl	800f318 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695a      	ldr	r2, [r3, #20]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80060ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f006 fcb1 	bl	800ca38 <USB_ReadInterrupts>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b04      	cmp	r3, #4
 80060de:	d115      	bne.n	800610c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f009 f91e 	bl	800f334 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6859      	ldr	r1, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	430a      	orrs	r2, r1
 8006106:	605a      	str	r2, [r3, #4]
 8006108:	e000      	b.n	800610c <HAL_PCD_IRQHandler+0x996>
      return;
 800610a:	bf00      	nop
    }
  }
}
 800610c:	3734      	adds	r7, #52	@ 0x34
 800610e:	46bd      	mov	sp, r7
 8006110:	bd90      	pop	{r4, r7, pc}

08006112 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	460b      	mov	r3, r1
 800611c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_PCD_SetAddress+0x1a>
 8006128:	2302      	movs	r3, #2
 800612a:	e012      	b.n	8006152 <HAL_PCD_SetAddress+0x40>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	78fa      	ldrb	r2, [r7, #3]
 8006138:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	78fa      	ldrb	r2, [r7, #3]
 8006140:	4611      	mov	r1, r2
 8006142:	4618      	mov	r0, r3
 8006144:	f006 fc10 	bl	800c968 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b084      	sub	sp, #16
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	4608      	mov	r0, r1
 8006164:	4611      	mov	r1, r2
 8006166:	461a      	mov	r2, r3
 8006168:	4603      	mov	r3, r0
 800616a:	70fb      	strb	r3, [r7, #3]
 800616c:	460b      	mov	r3, r1
 800616e:	803b      	strh	r3, [r7, #0]
 8006170:	4613      	mov	r3, r2
 8006172:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800617c:	2b00      	cmp	r3, #0
 800617e:	da0f      	bge.n	80061a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	f003 020f 	and.w	r2, r3, #15
 8006186:	4613      	mov	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	3310      	adds	r3, #16
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	4413      	add	r3, r2
 8006194:	3304      	adds	r3, #4
 8006196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	705a      	strb	r2, [r3, #1]
 800619e:	e00f      	b.n	80061c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	f003 020f 	and.w	r2, r3, #15
 80061a6:	4613      	mov	r3, r2
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	4413      	add	r3, r2
 80061b6:	3304      	adds	r3, #4
 80061b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80061cc:	883b      	ldrh	r3, [r7, #0]
 80061ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	78ba      	ldrb	r2, [r7, #2]
 80061da:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	785b      	ldrb	r3, [r3, #1]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d004      	beq.n	80061ee <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	461a      	mov	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80061ee:	78bb      	ldrb	r3, [r7, #2]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d102      	bne.n	80061fa <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_PCD_EP_Open+0xae>
 8006204:	2302      	movs	r3, #2
 8006206:	e00e      	b.n	8006226 <HAL_PCD_EP_Open+0xcc>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68f9      	ldr	r1, [r7, #12]
 8006216:	4618      	mov	r0, r3
 8006218:	f005 fd8a 	bl	800bd30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006224:	7afb      	ldrb	r3, [r7, #11]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	460b      	mov	r3, r1
 8006238:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800623a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800623e:	2b00      	cmp	r3, #0
 8006240:	da0f      	bge.n	8006262 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006242:	78fb      	ldrb	r3, [r7, #3]
 8006244:	f003 020f 	and.w	r2, r3, #15
 8006248:	4613      	mov	r3, r2
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	4413      	add	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	3310      	adds	r3, #16
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	4413      	add	r3, r2
 8006256:	3304      	adds	r3, #4
 8006258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	705a      	strb	r2, [r3, #1]
 8006260:	e00f      	b.n	8006282 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	f003 020f 	and.w	r2, r3, #15
 8006268:	4613      	mov	r3, r2
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	4413      	add	r3, r2
 8006278:	3304      	adds	r3, #4
 800627a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	f003 030f 	and.w	r3, r3, #15
 8006288:	b2da      	uxtb	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_PCD_EP_Close+0x6e>
 8006298:	2302      	movs	r3, #2
 800629a:	e00e      	b.n	80062ba <HAL_PCD_EP_Close+0x8c>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68f9      	ldr	r1, [r7, #12]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f005 fdc8 	bl	800be40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b086      	sub	sp, #24
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
 80062ce:	460b      	mov	r3, r1
 80062d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062d2:	7afb      	ldrb	r3, [r7, #11]
 80062d4:	f003 020f 	and.w	r2, r3, #15
 80062d8:	4613      	mov	r3, r2
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4413      	add	r3, r2
 80062e8:	3304      	adds	r3, #4
 80062ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2200      	movs	r2, #0
 80062fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2200      	movs	r2, #0
 8006302:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006304:	7afb      	ldrb	r3, [r7, #11]
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	b2da      	uxtb	r2, r3
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	799b      	ldrb	r3, [r3, #6]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d102      	bne.n	800631e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	799b      	ldrb	r3, [r3, #6]
 8006326:	461a      	mov	r2, r3
 8006328:	6979      	ldr	r1, [r7, #20]
 800632a:	f005 fe65 	bl	800bff8 <USB_EPStartXfer>

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	f003 020f 	and.w	r2, r3, #15
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	4613      	mov	r3, r2
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	4413      	add	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	440b      	add	r3, r1
 8006356:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800635a:	681b      	ldr	r3, [r3, #0]
}
 800635c:	4618      	mov	r0, r3
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	607a      	str	r2, [r7, #4]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	460b      	mov	r3, r1
 8006376:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006378:	7afb      	ldrb	r3, [r7, #11]
 800637a:	f003 020f 	and.w	r2, r3, #15
 800637e:	4613      	mov	r3, r2
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	3310      	adds	r3, #16
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	3304      	adds	r3, #4
 800638e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2200      	movs	r2, #0
 80063a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2201      	movs	r2, #1
 80063a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063a8:	7afb      	ldrb	r3, [r7, #11]
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	799b      	ldrb	r3, [r3, #6]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d102      	bne.n	80063c2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6818      	ldr	r0, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	799b      	ldrb	r3, [r3, #6]
 80063ca:	461a      	mov	r2, r3
 80063cc:	6979      	ldr	r1, [r7, #20]
 80063ce:	f005 fe13 	bl	800bff8 <USB_EPStartXfer>

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	7912      	ldrb	r2, [r2, #4]
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d901      	bls.n	80063fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e04f      	b.n	800649a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	da0f      	bge.n	8006422 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	f003 020f 	and.w	r2, r3, #15
 8006408:	4613      	mov	r3, r2
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	4413      	add	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	3310      	adds	r3, #16
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	4413      	add	r3, r2
 8006416:	3304      	adds	r3, #4
 8006418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	705a      	strb	r2, [r3, #1]
 8006420:	e00d      	b.n	800643e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006422:	78fa      	ldrb	r2, [r7, #3]
 8006424:	4613      	mov	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	4413      	add	r3, r2
 8006434:	3304      	adds	r3, #4
 8006436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	b2da      	uxtb	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_PCD_EP_SetStall+0x82>
 800645a:	2302      	movs	r3, #2
 800645c:	e01d      	b.n	800649a <HAL_PCD_EP_SetStall+0xbe>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68f9      	ldr	r1, [r7, #12]
 800646c:	4618      	mov	r0, r3
 800646e:	f006 f9a7 	bl	800c7c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006472:	78fb      	ldrb	r3, [r7, #3]
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	2b00      	cmp	r3, #0
 800647a:	d109      	bne.n	8006490 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6818      	ldr	r0, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	7999      	ldrb	r1, [r3, #6]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800648a:	461a      	mov	r2, r3
 800648c:	f006 fb9a 	bl	800cbc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80064ae:	78fb      	ldrb	r3, [r7, #3]
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	7912      	ldrb	r2, [r2, #4]
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d901      	bls.n	80064c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e042      	b.n	8006546 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80064c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	da0f      	bge.n	80064e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	f003 020f 	and.w	r2, r3, #15
 80064ce:	4613      	mov	r3, r2
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	3310      	adds	r3, #16
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	4413      	add	r3, r2
 80064dc:	3304      	adds	r3, #4
 80064de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	705a      	strb	r2, [r3, #1]
 80064e6:	e00f      	b.n	8006508 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	f003 020f 	and.w	r2, r3, #15
 80064ee:	4613      	mov	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	3304      	adds	r3, #4
 8006500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	b2da      	uxtb	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_PCD_EP_ClrStall+0x86>
 8006524:	2302      	movs	r3, #2
 8006526:	e00e      	b.n	8006546 <HAL_PCD_EP_ClrStall+0xa4>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68f9      	ldr	r1, [r7, #12]
 8006536:	4618      	mov	r0, r3
 8006538:	f006 f9b0 	bl	800c89c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	460b      	mov	r3, r1
 8006558:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800655a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800655e:	2b00      	cmp	r3, #0
 8006560:	da0c      	bge.n	800657c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	f003 020f 	and.w	r2, r3, #15
 8006568:	4613      	mov	r3, r2
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	4413      	add	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	3310      	adds	r3, #16
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	4413      	add	r3, r2
 8006576:	3304      	adds	r3, #4
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	e00c      	b.n	8006596 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	f003 020f 	and.w	r2, r3, #15
 8006582:	4613      	mov	r3, r2
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	4413      	add	r3, r2
 8006592:	3304      	adds	r3, #4
 8006594:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68f9      	ldr	r1, [r7, #12]
 800659c:	4618      	mov	r0, r3
 800659e:	f005 ffcf 	bl	800c540 <USB_EPStopXfer>
 80065a2:	4603      	mov	r3, r0
 80065a4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80065a6:	7afb      	ldrb	r3, [r7, #11]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	@ 0x28
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	4613      	mov	r3, r2
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	3310      	adds	r3, #16
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	4413      	add	r3, r2
 80065d4:	3304      	adds	r3, #4
 80065d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	695a      	ldr	r2, [r3, #20]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d901      	bls.n	80065e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e06b      	b.n	80066c0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	69fa      	ldr	r2, [r7, #28]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d902      	bls.n	8006604 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	3303      	adds	r3, #3
 8006608:	089b      	lsrs	r3, r3, #2
 800660a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800660c:	e02a      	b.n	8006664 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	69fa      	ldr	r2, [r7, #28]
 8006620:	429a      	cmp	r2, r3
 8006622:	d902      	bls.n	800662a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	3303      	adds	r3, #3
 800662e:	089b      	lsrs	r3, r3, #2
 8006630:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	68d9      	ldr	r1, [r3, #12]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	4603      	mov	r3, r0
 8006646:	6978      	ldr	r0, [r7, #20]
 8006648:	f006 f824 	bl	800c694 <USB_WritePacket>

    ep->xfer_buff  += len;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	441a      	add	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	695a      	ldr	r2, [r3, #20]
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	441a      	add	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	429a      	cmp	r2, r3
 8006678:	d809      	bhi.n	800668e <PCD_WriteEmptyTxFifo+0xde>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	695a      	ldr	r2, [r3, #20]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006682:	429a      	cmp	r2, r3
 8006684:	d203      	bcs.n	800668e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1bf      	bne.n	800660e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	429a      	cmp	r2, r3
 8006698:	d811      	bhi.n	80066be <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	f003 030f 	and.w	r3, r3, #15
 80066a0:	2201      	movs	r2, #1
 80066a2:	fa02 f303 	lsl.w	r3, r2, r3
 80066a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	43db      	mvns	r3, r3
 80066b4:	6939      	ldr	r1, [r7, #16]
 80066b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066ba:	4013      	ands	r3, r2
 80066bc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3720      	adds	r7, #32
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	333c      	adds	r3, #60	@ 0x3c
 80066e0:	3304      	adds	r3, #4
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	799b      	ldrb	r3, [r3, #6]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d17b      	bne.n	80067f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b00      	cmp	r3, #0
 8006706:	d015      	beq.n	8006734 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	4a61      	ldr	r2, [pc, #388]	@ (8006890 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	f240 80b9 	bls.w	8006884 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 80b3 	beq.w	8006884 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800672a:	461a      	mov	r2, r3
 800672c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006730:	6093      	str	r3, [r2, #8]
 8006732:	e0a7      	b.n	8006884 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	d009      	beq.n	8006752 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800674a:	461a      	mov	r2, r3
 800674c:	2320      	movs	r3, #32
 800674e:	6093      	str	r3, [r2, #8]
 8006750:	e098      	b.n	8006884 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006758:	2b00      	cmp	r3, #0
 800675a:	f040 8093 	bne.w	8006884 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	4a4b      	ldr	r2, [pc, #300]	@ (8006890 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d90f      	bls.n	8006786 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677c:	461a      	mov	r2, r3
 800677e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006782:	6093      	str	r3, [r2, #8]
 8006784:	e07e      	b.n	8006884 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	4613      	mov	r3, r2
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	4413      	add	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	4413      	add	r3, r2
 8006798:	3304      	adds	r3, #4
 800679a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6a1a      	ldr	r2, [r3, #32]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	0159      	lsls	r1, r3, #5
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	440b      	add	r3, r1
 80067a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067b2:	1ad2      	subs	r2, r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d114      	bne.n	80067e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d109      	bne.n	80067da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067d0:	461a      	mov	r2, r3
 80067d2:	2101      	movs	r1, #1
 80067d4:	f006 f9f6 	bl	800cbc4 <USB_EP0_OutStart>
 80067d8:	e006      	b.n	80067e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	441a      	add	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	4619      	mov	r1, r3
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f008 fcce 	bl	800f190 <HAL_PCD_DataOutStageCallback>
 80067f4:	e046      	b.n	8006884 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	4a26      	ldr	r2, [pc, #152]	@ (8006894 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d124      	bne.n	8006848 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00a      	beq.n	800681e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006814:	461a      	mov	r2, r3
 8006816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800681a:	6093      	str	r3, [r2, #8]
 800681c:	e032      	b.n	8006884 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d008      	beq.n	800683a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006834:	461a      	mov	r2, r3
 8006836:	2320      	movs	r3, #32
 8006838:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	b2db      	uxtb	r3, r3
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f008 fca5 	bl	800f190 <HAL_PCD_DataOutStageCallback>
 8006846:	e01d      	b.n	8006884 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d114      	bne.n	8006878 <PCD_EP_OutXfrComplete_int+0x1b0>
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	4613      	mov	r3, r2
 8006854:	00db      	lsls	r3, r3, #3
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d108      	bne.n	8006878 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006870:	461a      	mov	r2, r3
 8006872:	2100      	movs	r1, #0
 8006874:	f006 f9a6 	bl	800cbc4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f008 fc86 	bl	800f190 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3720      	adds	r7, #32
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	4f54300a 	.word	0x4f54300a
 8006894:	4f54310a 	.word	0x4f54310a

08006898 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	333c      	adds	r3, #60	@ 0x3c
 80068b0:	3304      	adds	r3, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4a15      	ldr	r2, [pc, #84]	@ (8006920 <PCD_EP_OutSetupPacket_int+0x88>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d90e      	bls.n	80068ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d009      	beq.n	80068ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e4:	461a      	mov	r2, r3
 80068e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f008 fc3d 	bl	800f16c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006920 <PCD_EP_OutSetupPacket_int+0x88>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d90c      	bls.n	8006914 <PCD_EP_OutSetupPacket_int+0x7c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	799b      	ldrb	r3, [r3, #6]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d108      	bne.n	8006914 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800690c:	461a      	mov	r2, r3
 800690e:	2101      	movs	r1, #1
 8006910:	f006 f958 	bl	800cbc4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	4f54300a 	.word	0x4f54300a

08006924 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	70fb      	strb	r3, [r7, #3]
 8006930:	4613      	mov	r3, r2
 8006932:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d107      	bne.n	8006952 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006942:	883b      	ldrh	r3, [r7, #0]
 8006944:	0419      	lsls	r1, r3, #16
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	430a      	orrs	r2, r1
 800694e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006950:	e028      	b.n	80069a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006958:	0c1b      	lsrs	r3, r3, #16
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	4413      	add	r3, r2
 800695e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006960:	2300      	movs	r3, #0
 8006962:	73fb      	strb	r3, [r7, #15]
 8006964:	e00d      	b.n	8006982 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	3340      	adds	r3, #64	@ 0x40
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	0c1b      	lsrs	r3, r3, #16
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	4413      	add	r3, r2
 800697a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	3301      	adds	r3, #1
 8006980:	73fb      	strb	r3, [r7, #15]
 8006982:	7bfa      	ldrb	r2, [r7, #15]
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	3b01      	subs	r3, #1
 8006988:	429a      	cmp	r2, r3
 800698a:	d3ec      	bcc.n	8006966 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800698c:	883b      	ldrh	r3, [r7, #0]
 800698e:	0418      	lsls	r0, r3, #16
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6819      	ldr	r1, [r3, #0]
 8006994:	78fb      	ldrb	r3, [r7, #3]
 8006996:	3b01      	subs	r3, #1
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	4302      	orrs	r2, r0
 800699c:	3340      	adds	r3, #64	@ 0x40
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	440b      	add	r3, r1
 80069a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	460b      	mov	r3, r1
 80069bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	887a      	ldrh	r2, [r7, #2]
 80069c4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a02:	4b05      	ldr	r3, [pc, #20]	@ (8006a18 <HAL_PCDEx_ActivateLPM+0x44>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	10000003 	.word	0x10000003

08006a1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006a26:	4b23      	ldr	r3, [pc, #140]	@ (8006ab4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2a:	4a22      	ldr	r2, [pc, #136]	@ (8006ab4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a32:	4b20      	ldr	r3, [pc, #128]	@ (8006ab4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ab8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1d      	ldr	r2, [pc, #116]	@ (8006ab8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a4a:	f7fd f861 	bl	8003b10 <HAL_GetTick>
 8006a4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a50:	e009      	b.n	8006a66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a52:	f7fd f85d 	bl	8003b10 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a60:	d901      	bls.n	8006a66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e022      	b.n	8006aac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a66:	4b14      	ldr	r3, [pc, #80]	@ (8006ab8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a72:	d1ee      	bne.n	8006a52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006a74:	4b10      	ldr	r3, [pc, #64]	@ (8006ab8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a0f      	ldr	r2, [pc, #60]	@ (8006ab8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a80:	f7fd f846 	bl	8003b10 <HAL_GetTick>
 8006a84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a86:	e009      	b.n	8006a9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a88:	f7fd f842 	bl	8003b10 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a96:	d901      	bls.n	8006a9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e007      	b.n	8006aac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a9c:	4b06      	ldr	r3, [pc, #24]	@ (8006ab8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aa8:	d1ee      	bne.n	8006a88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	40007000 	.word	0x40007000

08006abc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e291      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 8087 	beq.w	8006bee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ae0:	4b96      	ldr	r3, [pc, #600]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f003 030c 	and.w	r3, r3, #12
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d00c      	beq.n	8006b06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aec:	4b93      	ldr	r3, [pc, #588]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 030c 	and.w	r3, r3, #12
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d112      	bne.n	8006b1e <HAL_RCC_OscConfig+0x62>
 8006af8:	4b90      	ldr	r3, [pc, #576]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b04:	d10b      	bne.n	8006b1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b06:	4b8d      	ldr	r3, [pc, #564]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d06c      	beq.n	8006bec <HAL_RCC_OscConfig+0x130>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d168      	bne.n	8006bec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e26b      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b26:	d106      	bne.n	8006b36 <HAL_RCC_OscConfig+0x7a>
 8006b28:	4b84      	ldr	r3, [pc, #528]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a83      	ldr	r2, [pc, #524]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	e02e      	b.n	8006b94 <HAL_RCC_OscConfig+0xd8>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10c      	bne.n	8006b58 <HAL_RCC_OscConfig+0x9c>
 8006b3e:	4b7f      	ldr	r3, [pc, #508]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a7e      	ldr	r2, [pc, #504]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	4b7c      	ldr	r3, [pc, #496]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a7b      	ldr	r2, [pc, #492]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	e01d      	b.n	8006b94 <HAL_RCC_OscConfig+0xd8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b60:	d10c      	bne.n	8006b7c <HAL_RCC_OscConfig+0xc0>
 8006b62:	4b76      	ldr	r3, [pc, #472]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a75      	ldr	r2, [pc, #468]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	4b73      	ldr	r3, [pc, #460]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a72      	ldr	r2, [pc, #456]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	e00b      	b.n	8006b94 <HAL_RCC_OscConfig+0xd8>
 8006b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a6e      	ldr	r2, [pc, #440]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	4b6c      	ldr	r3, [pc, #432]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a6b      	ldr	r2, [pc, #428]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d013      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9c:	f7fc ffb8 	bl	8003b10 <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ba4:	f7fc ffb4 	bl	8003b10 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b64      	cmp	r3, #100	@ 0x64
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e21f      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bb6:	4b61      	ldr	r3, [pc, #388]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0f0      	beq.n	8006ba4 <HAL_RCC_OscConfig+0xe8>
 8006bc2:	e014      	b.n	8006bee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc4:	f7fc ffa4 	bl	8003b10 <HAL_GetTick>
 8006bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bcc:	f7fc ffa0 	bl	8003b10 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b64      	cmp	r3, #100	@ 0x64
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e20b      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bde:	4b57      	ldr	r3, [pc, #348]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1f0      	bne.n	8006bcc <HAL_RCC_OscConfig+0x110>
 8006bea:	e000      	b.n	8006bee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d069      	beq.n	8006cce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bfa:	4b50      	ldr	r3, [pc, #320]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 030c 	and.w	r3, r3, #12
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00b      	beq.n	8006c1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c06:	4b4d      	ldr	r3, [pc, #308]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 030c 	and.w	r3, r3, #12
 8006c0e:	2b08      	cmp	r3, #8
 8006c10:	d11c      	bne.n	8006c4c <HAL_RCC_OscConfig+0x190>
 8006c12:	4b4a      	ldr	r3, [pc, #296]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d116      	bne.n	8006c4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c1e:	4b47      	ldr	r3, [pc, #284]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <HAL_RCC_OscConfig+0x17a>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d001      	beq.n	8006c36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e1df      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c36:	4b41      	ldr	r3, [pc, #260]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	493d      	ldr	r1, [pc, #244]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c4a:	e040      	b.n	8006cce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d023      	beq.n	8006c9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c54:	4b39      	ldr	r3, [pc, #228]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a38      	ldr	r2, [pc, #224]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006c5a:	f043 0301 	orr.w	r3, r3, #1
 8006c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7fc ff56 	bl	8003b10 <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c68:	f7fc ff52 	bl	8003b10 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e1bd      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c7a:	4b30      	ldr	r3, [pc, #192]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0f0      	beq.n	8006c68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c86:	4b2d      	ldr	r3, [pc, #180]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	4929      	ldr	r1, [pc, #164]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	600b      	str	r3, [r1, #0]
 8006c9a:	e018      	b.n	8006cce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c9c:	4b27      	ldr	r3, [pc, #156]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a26      	ldr	r2, [pc, #152]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006ca2:	f023 0301 	bic.w	r3, r3, #1
 8006ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca8:	f7fc ff32 	bl	8003b10 <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cb0:	f7fc ff2e 	bl	8003b10 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e199      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1f0      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d038      	beq.n	8006d4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d019      	beq.n	8006d16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ce2:	4b16      	ldr	r3, [pc, #88]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ce6:	4a15      	ldr	r2, [pc, #84]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006ce8:	f043 0301 	orr.w	r3, r3, #1
 8006cec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cee:	f7fc ff0f 	bl	8003b10 <HAL_GetTick>
 8006cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cf6:	f7fc ff0b 	bl	8003b10 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e176      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d08:	4b0c      	ldr	r3, [pc, #48]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0f0      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x23a>
 8006d14:	e01a      	b.n	8006d4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d16:	4b09      	ldr	r3, [pc, #36]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d1a:	4a08      	ldr	r2, [pc, #32]	@ (8006d3c <HAL_RCC_OscConfig+0x280>)
 8006d1c:	f023 0301 	bic.w	r3, r3, #1
 8006d20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d22:	f7fc fef5 	bl	8003b10 <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d28:	e00a      	b.n	8006d40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d2a:	f7fc fef1 	bl	8003b10 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d903      	bls.n	8006d40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e15c      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
 8006d3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d40:	4b91      	ldr	r3, [pc, #580]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1ee      	bne.n	8006d2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 80a4 	beq.w	8006ea2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d5a:	4b8b      	ldr	r3, [pc, #556]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10d      	bne.n	8006d82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d66:	4b88      	ldr	r3, [pc, #544]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	4a87      	ldr	r2, [pc, #540]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d72:	4b85      	ldr	r3, [pc, #532]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d7a:	60bb      	str	r3, [r7, #8]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d82:	4b82      	ldr	r3, [pc, #520]	@ (8006f8c <HAL_RCC_OscConfig+0x4d0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d118      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006d8e:	4b7f      	ldr	r3, [pc, #508]	@ (8006f8c <HAL_RCC_OscConfig+0x4d0>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a7e      	ldr	r2, [pc, #504]	@ (8006f8c <HAL_RCC_OscConfig+0x4d0>)
 8006d94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d9a:	f7fc feb9 	bl	8003b10 <HAL_GetTick>
 8006d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006da2:	f7fc feb5 	bl	8003b10 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b64      	cmp	r3, #100	@ 0x64
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e120      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006db4:	4b75      	ldr	r3, [pc, #468]	@ (8006f8c <HAL_RCC_OscConfig+0x4d0>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0f0      	beq.n	8006da2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d106      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x31a>
 8006dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dcc:	4a6e      	ldr	r2, [pc, #440]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006dce:	f043 0301 	orr.w	r3, r3, #1
 8006dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dd4:	e02d      	b.n	8006e32 <HAL_RCC_OscConfig+0x376>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10c      	bne.n	8006df8 <HAL_RCC_OscConfig+0x33c>
 8006dde:	4b6a      	ldr	r3, [pc, #424]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de2:	4a69      	ldr	r2, [pc, #420]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006de4:	f023 0301 	bic.w	r3, r3, #1
 8006de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dea:	4b67      	ldr	r3, [pc, #412]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dee:	4a66      	ldr	r2, [pc, #408]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006df0:	f023 0304 	bic.w	r3, r3, #4
 8006df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006df6:	e01c      	b.n	8006e32 <HAL_RCC_OscConfig+0x376>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	2b05      	cmp	r3, #5
 8006dfe:	d10c      	bne.n	8006e1a <HAL_RCC_OscConfig+0x35e>
 8006e00:	4b61      	ldr	r3, [pc, #388]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e04:	4a60      	ldr	r2, [pc, #384]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006e06:	f043 0304 	orr.w	r3, r3, #4
 8006e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e0c:	4b5e      	ldr	r3, [pc, #376]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e10:	4a5d      	ldr	r2, [pc, #372]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e18:	e00b      	b.n	8006e32 <HAL_RCC_OscConfig+0x376>
 8006e1a:	4b5b      	ldr	r3, [pc, #364]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e1e:	4a5a      	ldr	r2, [pc, #360]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006e20:	f023 0301 	bic.w	r3, r3, #1
 8006e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e26:	4b58      	ldr	r3, [pc, #352]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e2a:	4a57      	ldr	r2, [pc, #348]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006e2c:	f023 0304 	bic.w	r3, r3, #4
 8006e30:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d015      	beq.n	8006e66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3a:	f7fc fe69 	bl	8003b10 <HAL_GetTick>
 8006e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e40:	e00a      	b.n	8006e58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e42:	f7fc fe65 	bl	8003b10 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e0ce      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e58:	4b4b      	ldr	r3, [pc, #300]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0ee      	beq.n	8006e42 <HAL_RCC_OscConfig+0x386>
 8006e64:	e014      	b.n	8006e90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e66:	f7fc fe53 	bl	8003b10 <HAL_GetTick>
 8006e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e6c:	e00a      	b.n	8006e84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e6e:	f7fc fe4f 	bl	8003b10 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d901      	bls.n	8006e84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e0b8      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e84:	4b40      	ldr	r3, [pc, #256]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1ee      	bne.n	8006e6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d105      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e96:	4b3c      	ldr	r3, [pc, #240]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9a:	4a3b      	ldr	r2, [pc, #236]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ea0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80a4 	beq.w	8006ff4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006eac:	4b36      	ldr	r3, [pc, #216]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 030c 	and.w	r3, r3, #12
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d06b      	beq.n	8006f90 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d149      	bne.n	8006f54 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ec0:	4b31      	ldr	r3, [pc, #196]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a30      	ldr	r2, [pc, #192]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006ec6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ecc:	f7fc fe20 	bl	8003b10 <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed4:	f7fc fe1c 	bl	8003b10 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e087      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee6:	4b28      	ldr	r3, [pc, #160]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f0      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	69da      	ldr	r2, [r3, #28]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	019b      	lsls	r3, r3, #6
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f08:	085b      	lsrs	r3, r3, #1
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	041b      	lsls	r3, r3, #16
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f14:	061b      	lsls	r3, r3, #24
 8006f16:	4313      	orrs	r3, r2
 8006f18:	4a1b      	ldr	r2, [pc, #108]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006f1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f1e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f20:	4b19      	ldr	r3, [pc, #100]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a18      	ldr	r2, [pc, #96]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2c:	f7fc fdf0 	bl	8003b10 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f34:	f7fc fdec 	bl	8003b10 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e057      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f46:	4b10      	ldr	r3, [pc, #64]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0f0      	beq.n	8006f34 <HAL_RCC_OscConfig+0x478>
 8006f52:	e04f      	b.n	8006ff4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f54:	4b0c      	ldr	r3, [pc, #48]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a0b      	ldr	r2, [pc, #44]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006f5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f60:	f7fc fdd6 	bl	8003b10 <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f66:	e008      	b.n	8006f7a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f68:	f7fc fdd2 	bl	8003b10 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e03d      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7a:	4b03      	ldr	r3, [pc, #12]	@ (8006f88 <HAL_RCC_OscConfig+0x4cc>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1f0      	bne.n	8006f68 <HAL_RCC_OscConfig+0x4ac>
 8006f86:	e035      	b.n	8006ff4 <HAL_RCC_OscConfig+0x538>
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006f90:	4b1b      	ldr	r3, [pc, #108]	@ (8007000 <HAL_RCC_OscConfig+0x544>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d028      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d121      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d11a      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fc6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d111      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd6:	085b      	lsrs	r3, r3, #1
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d107      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d001      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	40023800 	.word	0x40023800

08007004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e0d0      	b.n	80071be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800701c:	4b6a      	ldr	r3, [pc, #424]	@ (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d910      	bls.n	800704c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702a:	4b67      	ldr	r3, [pc, #412]	@ (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f023 020f 	bic.w	r2, r3, #15
 8007032:	4965      	ldr	r1, [pc, #404]	@ (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	4313      	orrs	r3, r2
 8007038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800703a:	4b63      	ldr	r3, [pc, #396]	@ (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	429a      	cmp	r2, r3
 8007046:	d001      	beq.n	800704c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e0b8      	b.n	80071be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d020      	beq.n	800709a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007064:	4b59      	ldr	r3, [pc, #356]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	4a58      	ldr	r2, [pc, #352]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 800706a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800706e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800707c:	4b53      	ldr	r3, [pc, #332]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	4a52      	ldr	r2, [pc, #328]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007082:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007086:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007088:	4b50      	ldr	r3, [pc, #320]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	494d      	ldr	r1, [pc, #308]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007096:	4313      	orrs	r3, r2
 8007098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d040      	beq.n	8007128 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d107      	bne.n	80070be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ae:	4b47      	ldr	r3, [pc, #284]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d115      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e07f      	b.n	80071be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d107      	bne.n	80070d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070c6:	4b41      	ldr	r3, [pc, #260]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d109      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e073      	b.n	80071be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070d6:	4b3d      	ldr	r3, [pc, #244]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e06b      	b.n	80071be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070e6:	4b39      	ldr	r3, [pc, #228]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f023 0203 	bic.w	r2, r3, #3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	4936      	ldr	r1, [pc, #216]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070f8:	f7fc fd0a 	bl	8003b10 <HAL_GetTick>
 80070fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070fe:	e00a      	b.n	8007116 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007100:	f7fc fd06 	bl	8003b10 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800710e:	4293      	cmp	r3, r2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e053      	b.n	80071be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007116:	4b2d      	ldr	r3, [pc, #180]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 020c 	and.w	r2, r3, #12
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	429a      	cmp	r2, r3
 8007126:	d1eb      	bne.n	8007100 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007128:	4b27      	ldr	r3, [pc, #156]	@ (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d210      	bcs.n	8007158 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007136:	4b24      	ldr	r3, [pc, #144]	@ (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f023 020f 	bic.w	r2, r3, #15
 800713e:	4922      	ldr	r1, [pc, #136]	@ (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	4313      	orrs	r3, r2
 8007144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007146:	4b20      	ldr	r3, [pc, #128]	@ (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d001      	beq.n	8007158 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e032      	b.n	80071be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	d008      	beq.n	8007176 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007164:	4b19      	ldr	r3, [pc, #100]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	4916      	ldr	r1, [pc, #88]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007172:	4313      	orrs	r3, r2
 8007174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0308 	and.w	r3, r3, #8
 800717e:	2b00      	cmp	r3, #0
 8007180:	d009      	beq.n	8007196 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007182:	4b12      	ldr	r3, [pc, #72]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	490e      	ldr	r1, [pc, #56]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007192:	4313      	orrs	r3, r2
 8007194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007196:	f000 f821 	bl	80071dc <HAL_RCC_GetSysClockFreq>
 800719a:	4602      	mov	r2, r0
 800719c:	4b0b      	ldr	r3, [pc, #44]	@ (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	091b      	lsrs	r3, r3, #4
 80071a2:	f003 030f 	and.w	r3, r3, #15
 80071a6:	490a      	ldr	r1, [pc, #40]	@ (80071d0 <HAL_RCC_ClockConfig+0x1cc>)
 80071a8:	5ccb      	ldrb	r3, [r1, r3]
 80071aa:	fa22 f303 	lsr.w	r3, r2, r3
 80071ae:	4a09      	ldr	r2, [pc, #36]	@ (80071d4 <HAL_RCC_ClockConfig+0x1d0>)
 80071b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80071b2:	4b09      	ldr	r3, [pc, #36]	@ (80071d8 <HAL_RCC_ClockConfig+0x1d4>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fc fc66 	bl	8003a88 <HAL_InitTick>

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	40023c00 	.word	0x40023c00
 80071cc:	40023800 	.word	0x40023800
 80071d0:	080125e0 	.word	0x080125e0
 80071d4:	20000000 	.word	0x20000000
 80071d8:	20000004 	.word	0x20000004

080071dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071e0:	b094      	sub	sp, #80	@ 0x50
 80071e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80071e8:	2300      	movs	r3, #0
 80071ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071ec:	2300      	movs	r3, #0
 80071ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071f4:	4b79      	ldr	r3, [pc, #484]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x200>)
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 030c 	and.w	r3, r3, #12
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d00d      	beq.n	800721c <HAL_RCC_GetSysClockFreq+0x40>
 8007200:	2b08      	cmp	r3, #8
 8007202:	f200 80e1 	bhi.w	80073c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <HAL_RCC_GetSysClockFreq+0x34>
 800720a:	2b04      	cmp	r3, #4
 800720c:	d003      	beq.n	8007216 <HAL_RCC_GetSysClockFreq+0x3a>
 800720e:	e0db      	b.n	80073c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007210:	4b73      	ldr	r3, [pc, #460]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007212:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007214:	e0db      	b.n	80073ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007216:	4b73      	ldr	r3, [pc, #460]	@ (80073e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007218:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800721a:	e0d8      	b.n	80073ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800721c:	4b6f      	ldr	r3, [pc, #444]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x200>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007224:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007226:	4b6d      	ldr	r3, [pc, #436]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d063      	beq.n	80072fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007232:	4b6a      	ldr	r3, [pc, #424]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	099b      	lsrs	r3, r3, #6
 8007238:	2200      	movs	r2, #0
 800723a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800723c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800723e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007244:	633b      	str	r3, [r7, #48]	@ 0x30
 8007246:	2300      	movs	r3, #0
 8007248:	637b      	str	r3, [r7, #52]	@ 0x34
 800724a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800724e:	4622      	mov	r2, r4
 8007250:	462b      	mov	r3, r5
 8007252:	f04f 0000 	mov.w	r0, #0
 8007256:	f04f 0100 	mov.w	r1, #0
 800725a:	0159      	lsls	r1, r3, #5
 800725c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007260:	0150      	lsls	r0, r2, #5
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4621      	mov	r1, r4
 8007268:	1a51      	subs	r1, r2, r1
 800726a:	6139      	str	r1, [r7, #16]
 800726c:	4629      	mov	r1, r5
 800726e:	eb63 0301 	sbc.w	r3, r3, r1
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	f04f 0300 	mov.w	r3, #0
 800727c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007280:	4659      	mov	r1, fp
 8007282:	018b      	lsls	r3, r1, #6
 8007284:	4651      	mov	r1, sl
 8007286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800728a:	4651      	mov	r1, sl
 800728c:	018a      	lsls	r2, r1, #6
 800728e:	4651      	mov	r1, sl
 8007290:	ebb2 0801 	subs.w	r8, r2, r1
 8007294:	4659      	mov	r1, fp
 8007296:	eb63 0901 	sbc.w	r9, r3, r1
 800729a:	f04f 0200 	mov.w	r2, #0
 800729e:	f04f 0300 	mov.w	r3, #0
 80072a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072ae:	4690      	mov	r8, r2
 80072b0:	4699      	mov	r9, r3
 80072b2:	4623      	mov	r3, r4
 80072b4:	eb18 0303 	adds.w	r3, r8, r3
 80072b8:	60bb      	str	r3, [r7, #8]
 80072ba:	462b      	mov	r3, r5
 80072bc:	eb49 0303 	adc.w	r3, r9, r3
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	f04f 0300 	mov.w	r3, #0
 80072ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80072ce:	4629      	mov	r1, r5
 80072d0:	024b      	lsls	r3, r1, #9
 80072d2:	4621      	mov	r1, r4
 80072d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80072d8:	4621      	mov	r1, r4
 80072da:	024a      	lsls	r2, r1, #9
 80072dc:	4610      	mov	r0, r2
 80072de:	4619      	mov	r1, r3
 80072e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072e2:	2200      	movs	r2, #0
 80072e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80072ec:	f7f9 fcf4 	bl	8000cd8 <__aeabi_uldivmod>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	4613      	mov	r3, r2
 80072f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072f8:	e058      	b.n	80073ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072fa:	4b38      	ldr	r3, [pc, #224]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x200>)
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	099b      	lsrs	r3, r3, #6
 8007300:	2200      	movs	r2, #0
 8007302:	4618      	mov	r0, r3
 8007304:	4611      	mov	r1, r2
 8007306:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800730a:	623b      	str	r3, [r7, #32]
 800730c:	2300      	movs	r3, #0
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007310:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007314:	4642      	mov	r2, r8
 8007316:	464b      	mov	r3, r9
 8007318:	f04f 0000 	mov.w	r0, #0
 800731c:	f04f 0100 	mov.w	r1, #0
 8007320:	0159      	lsls	r1, r3, #5
 8007322:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007326:	0150      	lsls	r0, r2, #5
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4641      	mov	r1, r8
 800732e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007332:	4649      	mov	r1, r9
 8007334:	eb63 0b01 	sbc.w	fp, r3, r1
 8007338:	f04f 0200 	mov.w	r2, #0
 800733c:	f04f 0300 	mov.w	r3, #0
 8007340:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007344:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007348:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800734c:	ebb2 040a 	subs.w	r4, r2, sl
 8007350:	eb63 050b 	sbc.w	r5, r3, fp
 8007354:	f04f 0200 	mov.w	r2, #0
 8007358:	f04f 0300 	mov.w	r3, #0
 800735c:	00eb      	lsls	r3, r5, #3
 800735e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007362:	00e2      	lsls	r2, r4, #3
 8007364:	4614      	mov	r4, r2
 8007366:	461d      	mov	r5, r3
 8007368:	4643      	mov	r3, r8
 800736a:	18e3      	adds	r3, r4, r3
 800736c:	603b      	str	r3, [r7, #0]
 800736e:	464b      	mov	r3, r9
 8007370:	eb45 0303 	adc.w	r3, r5, r3
 8007374:	607b      	str	r3, [r7, #4]
 8007376:	f04f 0200 	mov.w	r2, #0
 800737a:	f04f 0300 	mov.w	r3, #0
 800737e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007382:	4629      	mov	r1, r5
 8007384:	028b      	lsls	r3, r1, #10
 8007386:	4621      	mov	r1, r4
 8007388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800738c:	4621      	mov	r1, r4
 800738e:	028a      	lsls	r2, r1, #10
 8007390:	4610      	mov	r0, r2
 8007392:	4619      	mov	r1, r3
 8007394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007396:	2200      	movs	r2, #0
 8007398:	61bb      	str	r3, [r7, #24]
 800739a:	61fa      	str	r2, [r7, #28]
 800739c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073a0:	f7f9 fc9a 	bl	8000cd8 <__aeabi_uldivmod>
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	4613      	mov	r3, r2
 80073aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80073ac:	4b0b      	ldr	r3, [pc, #44]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x200>)
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	0c1b      	lsrs	r3, r3, #16
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	3301      	adds	r3, #1
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80073bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073c6:	e002      	b.n	80073ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073c8:	4b05      	ldr	r3, [pc, #20]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80073ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3750      	adds	r7, #80	@ 0x50
 80073d4:	46bd      	mov	sp, r7
 80073d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073da:	bf00      	nop
 80073dc:	40023800 	.word	0x40023800
 80073e0:	00f42400 	.word	0x00f42400
 80073e4:	007a1200 	.word	0x007a1200

080073e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073ec:	4b03      	ldr	r3, [pc, #12]	@ (80073fc <HAL_RCC_GetHCLKFreq+0x14>)
 80073ee:	681b      	ldr	r3, [r3, #0]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000000 	.word	0x20000000

08007400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007404:	f7ff fff0 	bl	80073e8 <HAL_RCC_GetHCLKFreq>
 8007408:	4602      	mov	r2, r0
 800740a:	4b05      	ldr	r3, [pc, #20]	@ (8007420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	0a9b      	lsrs	r3, r3, #10
 8007410:	f003 0307 	and.w	r3, r3, #7
 8007414:	4903      	ldr	r1, [pc, #12]	@ (8007424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007416:	5ccb      	ldrb	r3, [r1, r3]
 8007418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800741c:	4618      	mov	r0, r3
 800741e:	bd80      	pop	{r7, pc}
 8007420:	40023800 	.word	0x40023800
 8007424:	080125f0 	.word	0x080125f0

08007428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800742c:	f7ff ffdc 	bl	80073e8 <HAL_RCC_GetHCLKFreq>
 8007430:	4602      	mov	r2, r0
 8007432:	4b05      	ldr	r3, [pc, #20]	@ (8007448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	0b5b      	lsrs	r3, r3, #13
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	4903      	ldr	r1, [pc, #12]	@ (800744c <HAL_RCC_GetPCLK2Freq+0x24>)
 800743e:	5ccb      	ldrb	r3, [r1, r3]
 8007440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007444:	4618      	mov	r0, r3
 8007446:	bd80      	pop	{r7, pc}
 8007448:	40023800 	.word	0x40023800
 800744c:	080125f0 	.word	0x080125f0

08007450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007458:	2300      	movs	r3, #0
 800745a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800745c:	2300      	movs	r3, #0
 800745e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007464:	2300      	movs	r3, #0
 8007466:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d012      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007474:	4b65      	ldr	r3, [pc, #404]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	4a64      	ldr	r2, [pc, #400]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800747a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800747e:	6093      	str	r3, [r2, #8]
 8007480:	4b62      	ldr	r3, [pc, #392]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	4960      	ldr	r1, [pc, #384]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800748a:	4313      	orrs	r3, r2
 800748c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8007496:	2301      	movs	r3, #1
 8007498:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d017      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074a6:	4b59      	ldr	r3, [pc, #356]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80074a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074b4:	4955      	ldr	r1, [pc, #340]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074c4:	d101      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80074c6:	2301      	movs	r3, #1
 80074c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80074d2:	2301      	movs	r3, #1
 80074d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d017      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80074e2:	4b4a      	ldr	r3, [pc, #296]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80074e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f0:	4946      	ldr	r1, [pc, #280]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007500:	d101      	bne.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8007502:	2301      	movs	r3, #1
 8007504:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800750e:	2301      	movs	r3, #1
 8007510:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0320 	and.w	r3, r3, #32
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 808b 	beq.w	8007636 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007520:	4b3a      	ldr	r3, [pc, #232]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007524:	4a39      	ldr	r2, [pc, #228]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800752a:	6413      	str	r3, [r2, #64]	@ 0x40
 800752c:	4b37      	ldr	r3, [pc, #220]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800752e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007538:	4b35      	ldr	r3, [pc, #212]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a34      	ldr	r2, [pc, #208]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800753e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007544:	f7fc fae4 	bl	8003b10 <HAL_GetTick>
 8007548:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800754a:	e008      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800754c:	f7fc fae0 	bl	8003b10 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b64      	cmp	r3, #100	@ 0x64
 8007558:	d901      	bls.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e2bc      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800755e:	4b2c      	ldr	r3, [pc, #176]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007566:	2b00      	cmp	r3, #0
 8007568:	d0f0      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800756a:	4b28      	ldr	r3, [pc, #160]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800756c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800756e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007572:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d035      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	429a      	cmp	r2, r3
 8007586:	d02e      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007588:	4b20      	ldr	r3, [pc, #128]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800758a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800758c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007590:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007592:	4b1e      	ldr	r3, [pc, #120]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007596:	4a1d      	ldr	r2, [pc, #116]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800759c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800759e:	4b1b      	ldr	r3, [pc, #108]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a2:	4a1a      	ldr	r2, [pc, #104]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80075aa:	4a18      	ldr	r2, [pc, #96]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80075b0:	4b16      	ldr	r3, [pc, #88]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d114      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075bc:	f7fc faa8 	bl	8003b10 <HAL_GetTick>
 80075c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075c2:	e00a      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075c4:	f7fc faa4 	bl	8003b10 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d901      	bls.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e27e      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075da:	4b0c      	ldr	r3, [pc, #48]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0ee      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075f2:	d111      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80075f4:	4b05      	ldr	r3, [pc, #20]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8007600:	4b04      	ldr	r3, [pc, #16]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007602:	400b      	ands	r3, r1
 8007604:	4901      	ldr	r1, [pc, #4]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007606:	4313      	orrs	r3, r2
 8007608:	608b      	str	r3, [r1, #8]
 800760a:	e00b      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800760c:	40023800 	.word	0x40023800
 8007610:	40007000 	.word	0x40007000
 8007614:	0ffffcff 	.word	0x0ffffcff
 8007618:	4ba4      	ldr	r3, [pc, #656]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	4aa3      	ldr	r2, [pc, #652]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800761e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007622:	6093      	str	r3, [r2, #8]
 8007624:	4ba1      	ldr	r3, [pc, #644]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007626:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007630:	499e      	ldr	r1, [pc, #632]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007632:	4313      	orrs	r3, r2
 8007634:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0310 	and.w	r3, r3, #16
 800763e:	2b00      	cmp	r3, #0
 8007640:	d010      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007642:	4b9a      	ldr	r3, [pc, #616]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007648:	4a98      	ldr	r2, [pc, #608]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800764a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800764e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007652:	4b96      	ldr	r3, [pc, #600]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007654:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800765c:	4993      	ldr	r1, [pc, #588]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800765e:	4313      	orrs	r3, r2
 8007660:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00a      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007670:	4b8e      	ldr	r3, [pc, #568]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007676:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800767e:	498b      	ldr	r1, [pc, #556]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007680:	4313      	orrs	r3, r2
 8007682:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00a      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007692:	4b86      	ldr	r3, [pc, #536]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007698:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076a0:	4982      	ldr	r1, [pc, #520]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00a      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076b4:	4b7d      	ldr	r3, [pc, #500]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076c2:	497a      	ldr	r1, [pc, #488]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076d6:	4b75      	ldr	r3, [pc, #468]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076dc:	f023 0203 	bic.w	r2, r3, #3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e4:	4971      	ldr	r1, [pc, #452]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00a      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076f8:	4b6c      	ldr	r3, [pc, #432]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076fe:	f023 020c 	bic.w	r2, r3, #12
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007706:	4969      	ldr	r1, [pc, #420]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007708:	4313      	orrs	r3, r2
 800770a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00a      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800771a:	4b64      	ldr	r3, [pc, #400]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800771c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007720:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007728:	4960      	ldr	r1, [pc, #384]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800772a:	4313      	orrs	r3, r2
 800772c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800773c:	4b5b      	ldr	r3, [pc, #364]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800773e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007742:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800774a:	4958      	ldr	r1, [pc, #352]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800774c:	4313      	orrs	r3, r2
 800774e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800775e:	4b53      	ldr	r3, [pc, #332]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007764:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800776c:	494f      	ldr	r1, [pc, #316]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800776e:	4313      	orrs	r3, r2
 8007770:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00a      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007780:	4b4a      	ldr	r3, [pc, #296]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007786:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800778e:	4947      	ldr	r1, [pc, #284]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007790:	4313      	orrs	r3, r2
 8007792:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80077a2:	4b42      	ldr	r3, [pc, #264]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80077a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b0:	493e      	ldr	r1, [pc, #248]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00a      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80077c4:	4b39      	ldr	r3, [pc, #228]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80077c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077d2:	4936      	ldr	r1, [pc, #216]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d011      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80077e6:	4b31      	ldr	r3, [pc, #196]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80077e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077f4:	492d      	ldr	r1, [pc, #180]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007800:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007804:	d101      	bne.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8007806:	2301      	movs	r3, #1
 8007808:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00a      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007816:	4b25      	ldr	r3, [pc, #148]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800781c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007824:	4921      	ldr	r1, [pc, #132]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007826:	4313      	orrs	r3, r2
 8007828:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00a      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007838:	4b1c      	ldr	r3, [pc, #112]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800783a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800783e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007846:	4919      	ldr	r1, [pc, #100]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007848:	4313      	orrs	r3, r2
 800784a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800785a:	4b14      	ldr	r3, [pc, #80]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800785c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007860:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007868:	4910      	ldr	r1, [pc, #64]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800786a:	4313      	orrs	r3, r2
 800786c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d006      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 809d 	beq.w	80079be <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007884:	4b09      	ldr	r3, [pc, #36]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a08      	ldr	r2, [pc, #32]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800788a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800788e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007890:	f7fc f93e 	bl	8003b10 <HAL_GetTick>
 8007894:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007896:	e00b      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007898:	f7fc f93a 	bl	8003b10 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b64      	cmp	r3, #100	@ 0x64
 80078a4:	d904      	bls.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e116      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80078aa:	bf00      	nop
 80078ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078b0:	4b8b      	ldr	r3, [pc, #556]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1ed      	bne.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d017      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d113      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80078d0:	4b83      	ldr	r3, [pc, #524]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80078d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078d6:	0e1b      	lsrs	r3, r3, #24
 80078d8:	f003 030f 	and.w	r3, r3, #15
 80078dc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	019a      	lsls	r2, r3, #6
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	061b      	lsls	r3, r3, #24
 80078e8:	431a      	orrs	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	071b      	lsls	r3, r3, #28
 80078f0:	497b      	ldr	r1, [pc, #492]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d004      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800790c:	d00a      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007916:	2b00      	cmp	r3, #0
 8007918:	d024      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007922:	d11f      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007924:	4b6e      	ldr	r3, [pc, #440]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007926:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800792a:	0f1b      	lsrs	r3, r3, #28
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	019a      	lsls	r2, r3, #6
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	061b      	lsls	r3, r3, #24
 800793e:	431a      	orrs	r2, r3
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	071b      	lsls	r3, r3, #28
 8007944:	4966      	ldr	r1, [pc, #408]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007946:	4313      	orrs	r3, r2
 8007948:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800794c:	4b64      	ldr	r3, [pc, #400]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800794e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007952:	f023 021f 	bic.w	r2, r3, #31
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	3b01      	subs	r3, #1
 800795c:	4960      	ldr	r1, [pc, #384]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800795e:	4313      	orrs	r3, r2
 8007960:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00d      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	019a      	lsls	r2, r3, #6
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	061b      	lsls	r3, r3, #24
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	071b      	lsls	r3, r3, #28
 8007984:	4956      	ldr	r1, [pc, #344]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800798c:	4b54      	ldr	r3, [pc, #336]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a53      	ldr	r2, [pc, #332]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007992:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007998:	f7fc f8ba 	bl	8003b10 <HAL_GetTick>
 800799c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800799e:	e008      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80079a0:	f7fc f8b6 	bl	8003b10 <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	2b64      	cmp	r3, #100	@ 0x64
 80079ac:	d901      	bls.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e092      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079b2:	4b4b      	ldr	r3, [pc, #300]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0f0      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	f040 8088 	bne.w	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80079c6:	4b46      	ldr	r3, [pc, #280]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a45      	ldr	r2, [pc, #276]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80079cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d2:	f7fc f89d 	bl	8003b10 <HAL_GetTick>
 80079d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079d8:	e008      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80079da:	f7fc f899 	bl	8003b10 <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	2b64      	cmp	r3, #100	@ 0x64
 80079e6:	d901      	bls.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e075      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079ec:	4b3c      	ldr	r3, [pc, #240]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079f8:	d0ef      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d009      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d024      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d120      	bne.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a22:	4b2f      	ldr	r3, [pc, #188]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a28:	0c1b      	lsrs	r3, r3, #16
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	019a      	lsls	r2, r3, #6
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	041b      	lsls	r3, r3, #16
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	061b      	lsls	r3, r3, #24
 8007a42:	4927      	ldr	r1, [pc, #156]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a4a:	4b25      	ldr	r3, [pc, #148]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a50:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	021b      	lsls	r3, r3, #8
 8007a5c:	4920      	ldr	r1, [pc, #128]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d018      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a78:	d113      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a7a:	4b19      	ldr	r3, [pc, #100]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a80:	0e1b      	lsrs	r3, r3, #24
 8007a82:	f003 030f 	and.w	r3, r3, #15
 8007a86:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	019a      	lsls	r2, r3, #6
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	041b      	lsls	r3, r3, #16
 8007a94:	431a      	orrs	r2, r3
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	061b      	lsls	r3, r3, #24
 8007a9a:	4911      	ldr	r1, [pc, #68]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aae:	f7fc f82f 	bl	8003b10 <HAL_GetTick>
 8007ab2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ab4:	e008      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ab6:	f7fc f82b 	bl	8003b10 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	2b64      	cmp	r3, #100	@ 0x64
 8007ac2:	d901      	bls.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e007      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ac8:	4b05      	ldr	r3, [pc, #20]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ad4:	d1ef      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3720      	adds	r7, #32
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	40023800 	.word	0x40023800

08007ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e09d      	b.n	8007c32 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d108      	bne.n	8007b10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b06:	d009      	beq.n	8007b1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	61da      	str	r2, [r3, #28]
 8007b0e:	e005      	b.n	8007b1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d106      	bne.n	8007b3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7fb fb96 	bl	8003268 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b5c:	d902      	bls.n	8007b64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	e002      	b.n	8007b6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007b72:	d007      	beq.n	8007b84 <HAL_SPI_Init+0xa0>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b7c:	d002      	beq.n	8007b84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b94:	431a      	orrs	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bc6:	ea42 0103 	orr.w	r1, r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	0c1b      	lsrs	r3, r3, #16
 8007be0:	f003 0204 	and.w	r2, r3, #4
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be8:	f003 0310 	and.w	r3, r3, #16
 8007bec:	431a      	orrs	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bf2:	f003 0308 	and.w	r3, r3, #8
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007c00:	ea42 0103 	orr.w	r1, r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69da      	ldr	r2, [r3, #28]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b088      	sub	sp, #32
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	603b      	str	r3, [r7, #0]
 8007c46:	4613      	mov	r3, r2
 8007c48:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c4a:	f7fb ff61 	bl	8003b10 <HAL_GetTick>
 8007c4e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007c50:	88fb      	ldrh	r3, [r7, #6]
 8007c52:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d001      	beq.n	8007c64 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007c60:	2302      	movs	r3, #2
 8007c62:	e15c      	b.n	8007f1e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <HAL_SPI_Transmit+0x36>
 8007c6a:	88fb      	ldrh	r3, [r7, #6]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e154      	b.n	8007f1e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d101      	bne.n	8007c82 <HAL_SPI_Transmit+0x48>
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e14d      	b.n	8007f1e <HAL_SPI_Transmit+0x2e4>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2203      	movs	r2, #3
 8007c8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	88fa      	ldrh	r2, [r7, #6]
 8007ca2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	88fa      	ldrh	r2, [r7, #6]
 8007ca8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cd4:	d10f      	bne.n	8007cf6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ce4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d00:	2b40      	cmp	r3, #64	@ 0x40
 8007d02:	d007      	beq.n	8007d14 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d1c:	d952      	bls.n	8007dc4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <HAL_SPI_Transmit+0xf2>
 8007d26:	8b7b      	ldrh	r3, [r7, #26]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d145      	bne.n	8007db8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d30:	881a      	ldrh	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3c:	1c9a      	adds	r2, r3, #2
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d50:	e032      	b.n	8007db8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	f003 0302 	and.w	r3, r3, #2
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d112      	bne.n	8007d86 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d64:	881a      	ldrh	r2, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d70:	1c9a      	adds	r2, r3, #2
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d84:	e018      	b.n	8007db8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d86:	f7fb fec3 	bl	8003b10 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d803      	bhi.n	8007d9e <HAL_SPI_Transmit+0x164>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9c:	d102      	bne.n	8007da4 <HAL_SPI_Transmit+0x16a>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d109      	bne.n	8007db8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e0b2      	b.n	8007f1e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1c7      	bne.n	8007d52 <HAL_SPI_Transmit+0x118>
 8007dc2:	e083      	b.n	8007ecc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <HAL_SPI_Transmit+0x198>
 8007dcc:	8b7b      	ldrh	r3, [r7, #26]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d177      	bne.n	8007ec2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d912      	bls.n	8007e02 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de0:	881a      	ldrh	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dec:	1c9a      	adds	r2, r3, #2
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	3b02      	subs	r3, #2
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e00:	e05f      	b.n	8007ec2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	330c      	adds	r3, #12
 8007e0c:	7812      	ldrb	r2, [r2, #0]
 8007e0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	3b01      	subs	r3, #1
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007e28:	e04b      	b.n	8007ec2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d12b      	bne.n	8007e90 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d912      	bls.n	8007e68 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e46:	881a      	ldrh	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e52:	1c9a      	adds	r2, r3, #2
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	3b02      	subs	r3, #2
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e66:	e02c      	b.n	8007ec2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	330c      	adds	r3, #12
 8007e72:	7812      	ldrb	r2, [r2, #0]
 8007e74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e8e:	e018      	b.n	8007ec2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e90:	f7fb fe3e 	bl	8003b10 <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d803      	bhi.n	8007ea8 <HAL_SPI_Transmit+0x26e>
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea6:	d102      	bne.n	8007eae <HAL_SPI_Transmit+0x274>
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d109      	bne.n	8007ec2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e02d      	b.n	8007f1e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1ae      	bne.n	8007e2a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ecc:	69fa      	ldr	r2, [r7, #28]
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f001 f8b7 	bl	8009044 <SPI_EndRxTxTransaction>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10a      	bne.n	8007f00 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eea:	2300      	movs	r3, #0
 8007eec:	617b      	str	r3, [r7, #20]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	617b      	str	r3, [r7, #20]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	617b      	str	r3, [r7, #20]
 8007efe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e000      	b.n	8007f1e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
  }
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3720      	adds	r7, #32
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b088      	sub	sp, #32
 8007f2a:	af02      	add	r7, sp, #8
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	4613      	mov	r3, r2
 8007f34:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d001      	beq.n	8007f46 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007f42:	2302      	movs	r3, #2
 8007f44:	e123      	b.n	800818e <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <HAL_SPI_Receive+0x2c>
 8007f4c:	88fb      	ldrh	r3, [r7, #6]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e11b      	b.n	800818e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f5e:	d112      	bne.n	8007f86 <HAL_SPI_Receive+0x60>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10e      	bne.n	8007f86 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2204      	movs	r2, #4
 8007f6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f70:	88fa      	ldrh	r2, [r7, #6]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	4613      	mov	r3, r2
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 f90a 	bl	8008196 <HAL_SPI_TransmitReceive>
 8007f82:	4603      	mov	r3, r0
 8007f84:	e103      	b.n	800818e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f86:	f7fb fdc3 	bl	8003b10 <HAL_GetTick>
 8007f8a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d101      	bne.n	8007f9a <HAL_SPI_Receive+0x74>
 8007f96:	2302      	movs	r3, #2
 8007f98:	e0f9      	b.n	800818e <HAL_SPI_Receive+0x268>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2204      	movs	r2, #4
 8007fa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	88fa      	ldrh	r2, [r7, #6]
 8007fba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	88fa      	ldrh	r2, [r7, #6]
 8007fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007fec:	d908      	bls.n	8008000 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007ffc:	605a      	str	r2, [r3, #4]
 8007ffe:	e007      	b.n	8008010 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800800e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008018:	d10f      	bne.n	800803a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008028:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008038:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008044:	2b40      	cmp	r3, #64	@ 0x40
 8008046:	d007      	beq.n	8008058 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008056:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008060:	d875      	bhi.n	800814e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008062:	e037      	b.n	80080d4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b01      	cmp	r3, #1
 8008070:	d117      	bne.n	80080a2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f103 020c 	add.w	r2, r3, #12
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807e:	7812      	ldrb	r2, [r2, #0]
 8008080:	b2d2      	uxtb	r2, r2
 8008082:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008094:	b29b      	uxth	r3, r3
 8008096:	3b01      	subs	r3, #1
 8008098:	b29a      	uxth	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80080a0:	e018      	b.n	80080d4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080a2:	f7fb fd35 	bl	8003b10 <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d803      	bhi.n	80080ba <HAL_SPI_Receive+0x194>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b8:	d102      	bne.n	80080c0 <HAL_SPI_Receive+0x19a>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d109      	bne.n	80080d4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e05c      	b.n	800818e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80080da:	b29b      	uxth	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1c1      	bne.n	8008064 <HAL_SPI_Receive+0x13e>
 80080e0:	e03b      	b.n	800815a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d115      	bne.n	800811c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fa:	b292      	uxth	r2, r2
 80080fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008102:	1c9a      	adds	r2, r3, #2
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800810e:	b29b      	uxth	r3, r3
 8008110:	3b01      	subs	r3, #1
 8008112:	b29a      	uxth	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800811a:	e018      	b.n	800814e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800811c:	f7fb fcf8 	bl	8003b10 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	429a      	cmp	r2, r3
 800812a:	d803      	bhi.n	8008134 <HAL_SPI_Receive+0x20e>
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008132:	d102      	bne.n	800813a <HAL_SPI_Receive+0x214>
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d109      	bne.n	800814e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e01f      	b.n	800818e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1c3      	bne.n	80080e2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fef4 	bl	8008f4c <SPI_EndRxTransaction>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2220      	movs	r2, #32
 800816e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e000      	b.n	800818e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800818c:	2300      	movs	r3, #0
  }
}
 800818e:	4618      	mov	r0, r3
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b08a      	sub	sp, #40	@ 0x28
 800819a:	af00      	add	r7, sp, #0
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	60b9      	str	r1, [r7, #8]
 80081a0:	607a      	str	r2, [r7, #4]
 80081a2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80081a4:	2301      	movs	r3, #1
 80081a6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081a8:	f7fb fcb2 	bl	8003b10 <HAL_GetTick>
 80081ac:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80081b4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80081bc:	887b      	ldrh	r3, [r7, #2]
 80081be:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80081c0:	887b      	ldrh	r3, [r7, #2]
 80081c2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081c4:	7ffb      	ldrb	r3, [r7, #31]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d00c      	beq.n	80081e4 <HAL_SPI_TransmitReceive+0x4e>
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081d0:	d106      	bne.n	80081e0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d102      	bne.n	80081e0 <HAL_SPI_TransmitReceive+0x4a>
 80081da:	7ffb      	ldrb	r3, [r7, #31]
 80081dc:	2b04      	cmp	r3, #4
 80081de:	d001      	beq.n	80081e4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80081e0:	2302      	movs	r3, #2
 80081e2:	e1f3      	b.n	80085cc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d005      	beq.n	80081f6 <HAL_SPI_TransmitReceive+0x60>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <HAL_SPI_TransmitReceive+0x60>
 80081f0:	887b      	ldrh	r3, [r7, #2]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e1e8      	b.n	80085cc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <HAL_SPI_TransmitReceive+0x72>
 8008204:	2302      	movs	r3, #2
 8008206:	e1e1      	b.n	80085cc <HAL_SPI_TransmitReceive+0x436>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b04      	cmp	r3, #4
 800821a:	d003      	beq.n	8008224 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2205      	movs	r2, #5
 8008220:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	887a      	ldrh	r2, [r7, #2]
 8008234:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	887a      	ldrh	r2, [r7, #2]
 800823c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	887a      	ldrh	r2, [r7, #2]
 800824a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	887a      	ldrh	r2, [r7, #2]
 8008250:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008266:	d802      	bhi.n	800826e <HAL_SPI_TransmitReceive+0xd8>
 8008268:	8abb      	ldrh	r3, [r7, #20]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d908      	bls.n	8008280 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800827c:	605a      	str	r2, [r3, #4]
 800827e:	e007      	b.n	8008290 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800828e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800829a:	2b40      	cmp	r3, #64	@ 0x40
 800829c:	d007      	beq.n	80082ae <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80082b6:	f240 8083 	bls.w	80083c0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <HAL_SPI_TransmitReceive+0x132>
 80082c2:	8afb      	ldrh	r3, [r7, #22]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d16f      	bne.n	80083a8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082cc:	881a      	ldrh	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d8:	1c9a      	adds	r2, r3, #2
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	3b01      	subs	r3, #1
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082ec:	e05c      	b.n	80083a8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d11b      	bne.n	8008334 <HAL_SPI_TransmitReceive+0x19e>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008300:	b29b      	uxth	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d016      	beq.n	8008334 <HAL_SPI_TransmitReceive+0x19e>
 8008306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008308:	2b01      	cmp	r3, #1
 800830a:	d113      	bne.n	8008334 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008310:	881a      	ldrh	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831c:	1c9a      	adds	r2, r3, #2
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008326:	b29b      	uxth	r3, r3
 8008328:	3b01      	subs	r3, #1
 800832a:	b29a      	uxth	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b01      	cmp	r3, #1
 8008340:	d11c      	bne.n	800837c <HAL_SPI_TransmitReceive+0x1e6>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d016      	beq.n	800837c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68da      	ldr	r2, [r3, #12]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008358:	b292      	uxth	r2, r2
 800835a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008360:	1c9a      	adds	r2, r3, #2
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800836c:	b29b      	uxth	r3, r3
 800836e:	3b01      	subs	r3, #1
 8008370:	b29a      	uxth	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008378:	2301      	movs	r3, #1
 800837a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800837c:	f7fb fbc8 	bl	8003b10 <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008388:	429a      	cmp	r2, r3
 800838a:	d80d      	bhi.n	80083a8 <HAL_SPI_TransmitReceive+0x212>
 800838c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008392:	d009      	beq.n	80083a8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e111      	b.n	80085cc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d19d      	bne.n	80082ee <HAL_SPI_TransmitReceive+0x158>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d197      	bne.n	80082ee <HAL_SPI_TransmitReceive+0x158>
 80083be:	e0e5      	b.n	800858c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <HAL_SPI_TransmitReceive+0x23a>
 80083c8:	8afb      	ldrh	r3, [r7, #22]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	f040 80d1 	bne.w	8008572 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d912      	bls.n	8008400 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083de:	881a      	ldrh	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ea:	1c9a      	adds	r2, r3, #2
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	3b02      	subs	r3, #2
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80083fe:	e0b8      	b.n	8008572 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	330c      	adds	r3, #12
 800840a:	7812      	ldrb	r2, [r2, #0]
 800840c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800841c:	b29b      	uxth	r3, r3
 800841e:	3b01      	subs	r3, #1
 8008420:	b29a      	uxth	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008426:	e0a4      	b.n	8008572 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f003 0302 	and.w	r3, r3, #2
 8008432:	2b02      	cmp	r3, #2
 8008434:	d134      	bne.n	80084a0 <HAL_SPI_TransmitReceive+0x30a>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800843a:	b29b      	uxth	r3, r3
 800843c:	2b00      	cmp	r3, #0
 800843e:	d02f      	beq.n	80084a0 <HAL_SPI_TransmitReceive+0x30a>
 8008440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008442:	2b01      	cmp	r3, #1
 8008444:	d12c      	bne.n	80084a0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800844a:	b29b      	uxth	r3, r3
 800844c:	2b01      	cmp	r3, #1
 800844e:	d912      	bls.n	8008476 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008454:	881a      	ldrh	r2, [r3, #0]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008460:	1c9a      	adds	r2, r3, #2
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800846a:	b29b      	uxth	r3, r3
 800846c:	3b02      	subs	r3, #2
 800846e:	b29a      	uxth	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008474:	e012      	b.n	800849c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	330c      	adds	r3, #12
 8008480:	7812      	ldrb	r2, [r2, #0]
 8008482:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008492:	b29b      	uxth	r3, r3
 8008494:	3b01      	subs	r3, #1
 8008496:	b29a      	uxth	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d148      	bne.n	8008540 <HAL_SPI_TransmitReceive+0x3aa>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d042      	beq.n	8008540 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d923      	bls.n	800850e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68da      	ldr	r2, [r3, #12]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d0:	b292      	uxth	r2, r2
 80084d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d8:	1c9a      	adds	r2, r3, #2
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	3b02      	subs	r3, #2
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d81f      	bhi.n	800853c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800850a:	605a      	str	r2, [r3, #4]
 800850c:	e016      	b.n	800853c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f103 020c 	add.w	r2, r3, #12
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851a:	7812      	ldrb	r2, [r2, #0]
 800851c:	b2d2      	uxtb	r2, r2
 800851e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008524:	1c5a      	adds	r2, r3, #1
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008530:	b29b      	uxth	r3, r3
 8008532:	3b01      	subs	r3, #1
 8008534:	b29a      	uxth	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800853c:	2301      	movs	r3, #1
 800853e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008540:	f7fb fae6 	bl	8003b10 <HAL_GetTick>
 8008544:	4602      	mov	r2, r0
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800854c:	429a      	cmp	r2, r3
 800854e:	d803      	bhi.n	8008558 <HAL_SPI_TransmitReceive+0x3c2>
 8008550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008556:	d102      	bne.n	800855e <HAL_SPI_TransmitReceive+0x3c8>
 8008558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e02c      	b.n	80085cc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008576:	b29b      	uxth	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	f47f af55 	bne.w	8008428 <HAL_SPI_TransmitReceive+0x292>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008584:	b29b      	uxth	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	f47f af4e 	bne.w	8008428 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800858c:	6a3a      	ldr	r2, [r7, #32]
 800858e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 fd57 	bl	8009044 <SPI_EndRxTxTransaction>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d008      	beq.n	80085ae <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2220      	movs	r2, #32
 80085a0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e00e      	b.n	80085cc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e000      	b.n	80085cc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80085ca:	2300      	movs	r3, #0
  }
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3728      	adds	r7, #40	@ 0x28
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80085e8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80085f0:	7dfb      	ldrb	r3, [r7, #23]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d00c      	beq.n	8008610 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085fc:	d106      	bne.n	800860c <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d102      	bne.n	800860c <HAL_SPI_TransmitReceive_DMA+0x38>
 8008606:	7dfb      	ldrb	r3, [r7, #23]
 8008608:	2b04      	cmp	r3, #4
 800860a:	d001      	beq.n	8008610 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800860c:	2302      	movs	r3, #2
 800860e:	e158      	b.n	80088c2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d005      	beq.n	8008622 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d002      	beq.n	8008622 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800861c:	887b      	ldrh	r3, [r7, #2]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e14d      	b.n	80088c2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800862c:	2b01      	cmp	r3, #1
 800862e:	d101      	bne.n	8008634 <HAL_SPI_TransmitReceive_DMA+0x60>
 8008630:	2302      	movs	r3, #2
 8008632:	e146      	b.n	80088c2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b04      	cmp	r3, #4
 8008646:	d003      	beq.n	8008650 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2205      	movs	r2, #5
 800864c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	887a      	ldrh	r2, [r7, #2]
 8008660:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	887a      	ldrh	r2, [r7, #2]
 8008666:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	887a      	ldrh	r2, [r7, #2]
 8008672:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	887a      	ldrh	r2, [r7, #2]
 800867a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8008698:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086a2:	d908      	bls.n	80086b6 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80086b2:	605a      	str	r2, [r3, #4]
 80086b4:	e06f      	b.n	8008796 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086c4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086d0:	d126      	bne.n	8008720 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10f      	bne.n	80086fe <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80086ec:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80086fc:	e010      	b.n	8008720 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800870c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008712:	b29b      	uxth	r3, r3
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	b29b      	uxth	r3, r3
 8008718:	3301      	adds	r3, #1
 800871a:	b29a      	uxth	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800872a:	d134      	bne.n	8008796 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800873a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008742:	b29b      	uxth	r3, r3
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	d111      	bne.n	8008770 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800875a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008762:	b29b      	uxth	r3, r3
 8008764:	085b      	lsrs	r3, r3, #1
 8008766:	b29a      	uxth	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800876e:	e012      	b.n	8008796 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800877e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008786:	b29b      	uxth	r3, r3
 8008788:	085b      	lsrs	r3, r3, #1
 800878a:	b29b      	uxth	r3, r3
 800878c:	3301      	adds	r3, #1
 800878e:	b29a      	uxth	r2, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d108      	bne.n	80087b4 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087a6:	4a49      	ldr	r2, [pc, #292]	@ (80088cc <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 80087a8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ae:	4a48      	ldr	r2, [pc, #288]	@ (80088d0 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 80087b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80087b2:	e007      	b.n	80087c4 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087b8:	4a46      	ldr	r2, [pc, #280]	@ (80088d4 <HAL_SPI_TransmitReceive_DMA+0x300>)
 80087ba:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087c0:	4a45      	ldr	r2, [pc, #276]	@ (80088d8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80087c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087c8:	4a44      	ldr	r2, [pc, #272]	@ (80088dc <HAL_SPI_TransmitReceive_DMA+0x308>)
 80087ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087d0:	2200      	movs	r2, #0
 80087d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	330c      	adds	r3, #12
 80087de:	4619      	mov	r1, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087ec:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80087ee:	f7fc f82d 	bl	800484c <HAL_DMA_Start_IT>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087fc:	f043 0210 	orr.w	r2, r3, #16
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e058      	b.n	80088c2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f042 0201 	orr.w	r2, r2, #1
 800881e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008824:	2200      	movs	r2, #0
 8008826:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800882c:	2200      	movs	r2, #0
 800882e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008834:	2200      	movs	r2, #0
 8008836:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800883c:	2200      	movs	r2, #0
 800883e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008848:	4619      	mov	r1, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	330c      	adds	r3, #12
 8008850:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008856:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008858:	f7fb fff8 	bl	800484c <HAL_DMA_Start_IT>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008866:	f043 0210 	orr.w	r2, r3, #16
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e023      	b.n	80088c2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008884:	2b40      	cmp	r3, #64	@ 0x40
 8008886:	d007      	beq.n	8008898 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008896:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f042 0220 	orr.w	r2, r2, #32
 80088ae:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f042 0202 	orr.w	r2, r2, #2
 80088be:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	08008c6d 	.word	0x08008c6d
 80088d0:	08008b31 	.word	0x08008b31
 80088d4:	08008c89 	.word	0x08008c89
 80088d8:	08008bdb 	.word	0x08008bdb
 80088dc:	08008ca5 	.word	0x08008ca5

080088e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b088      	sub	sp, #32
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	099b      	lsrs	r3, r3, #6
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10f      	bne.n	8008924 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00a      	beq.n	8008924 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	099b      	lsrs	r3, r3, #6
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	2b00      	cmp	r3, #0
 8008918:	d004      	beq.n	8008924 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	4798      	blx	r3
    return;
 8008922:	e0d7      	b.n	8008ad4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	085b      	lsrs	r3, r3, #1
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00a      	beq.n	8008946 <HAL_SPI_IRQHandler+0x66>
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	09db      	lsrs	r3, r3, #7
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	2b00      	cmp	r3, #0
 800893a:	d004      	beq.n	8008946 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	4798      	blx	r3
    return;
 8008944:	e0c6      	b.n	8008ad4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	095b      	lsrs	r3, r3, #5
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10c      	bne.n	800896c <HAL_SPI_IRQHandler+0x8c>
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	099b      	lsrs	r3, r3, #6
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d106      	bne.n	800896c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	0a1b      	lsrs	r3, r3, #8
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 80b4 	beq.w	8008ad4 <HAL_SPI_IRQHandler+0x1f4>
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	095b      	lsrs	r3, r3, #5
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 80ad 	beq.w	8008ad4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	099b      	lsrs	r3, r3, #6
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	d023      	beq.n	80089ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b03      	cmp	r3, #3
 8008990:	d011      	beq.n	80089b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008996:	f043 0204 	orr.w	r2, r3, #4
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800899e:	2300      	movs	r3, #0
 80089a0:	617b      	str	r3, [r7, #20]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	617b      	str	r3, [r7, #20]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	617b      	str	r3, [r7, #20]
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	e00b      	b.n	80089ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089b6:	2300      	movs	r3, #0
 80089b8:	613b      	str	r3, [r7, #16]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	613b      	str	r3, [r7, #16]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	613b      	str	r3, [r7, #16]
 80089ca:	693b      	ldr	r3, [r7, #16]
        return;
 80089cc:	e082      	b.n	8008ad4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	095b      	lsrs	r3, r3, #5
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d014      	beq.n	8008a04 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089de:	f043 0201 	orr.w	r2, r3, #1
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	60fb      	str	r3, [r7, #12]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	0a1b      	lsrs	r3, r3, #8
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00c      	beq.n	8008a2a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a14:	f043 0208 	orr.w	r2, r3, #8
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60bb      	str	r3, [r7, #8]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	60bb      	str	r3, [r7, #8]
 8008a28:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d04f      	beq.n	8008ad2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008a40:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	f003 0302 	and.w	r3, r3, #2
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d104      	bne.n	8008a5e <HAL_SPI_IRQHandler+0x17e>
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d034      	beq.n	8008ac8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f022 0203 	bic.w	r2, r2, #3
 8008a6c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d011      	beq.n	8008a9a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a7a:	4a18      	ldr	r2, [pc, #96]	@ (8008adc <HAL_SPI_IRQHandler+0x1fc>)
 8008a7c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fb ffb2 	bl	80049ec <HAL_DMA_Abort_IT>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d005      	beq.n	8008a9a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d016      	beq.n	8008ad0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8008adc <HAL_SPI_IRQHandler+0x1fc>)
 8008aa8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fb ff9c 	bl	80049ec <HAL_DMA_Abort_IT>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008abe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008ac6:	e003      	b.n	8008ad0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f827 	bl	8008b1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008ace:	e000      	b.n	8008ad2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008ad0:	bf00      	nop
    return;
 8008ad2:	bf00      	nop
  }
}
 8008ad4:	3720      	adds	r7, #32
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	08008ce5 	.word	0x08008ce5

08008ae0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b3e:	f7fa ffe7 	bl	8003b10 <HAL_GetTick>
 8008b42:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b52:	d03c      	beq.n	8008bce <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	685a      	ldr	r2, [r3, #4]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f022 0220 	bic.w	r2, r2, #32
 8008b62:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10d      	bne.n	8008b88 <SPI_DMAReceiveCplt+0x58>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b74:	d108      	bne.n	8008b88 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 0203 	bic.w	r2, r2, #3
 8008b84:	605a      	str	r2, [r3, #4]
 8008b86:	e007      	b.n	8008b98 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f022 0201 	bic.w	r2, r2, #1
 8008b96:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	2164      	movs	r1, #100	@ 0x64
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 f9d5 	bl	8008f4c <SPI_EndRxTransaction>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2220      	movs	r2, #32
 8008bac:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7ff ffa8 	bl	8008b1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008bcc:	e002      	b.n	8008bd4 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f7ff ff86 	bl	8008ae0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008be6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008be8:	f7fa ff92 	bl	8003b10 <HAL_GetTick>
 8008bec:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bfc:	d030      	beq.n	8008c60 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f022 0220 	bic.w	r2, r2, #32
 8008c0c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	2164      	movs	r1, #100	@ 0x64
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 fa16 	bl	8009044 <SPI_EndRxTxTransaction>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d005      	beq.n	8008c2a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c22:	f043 0220 	orr.w	r2, r3, #32
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 0203 	bic.w	r2, r2, #3
 8008c38:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f7ff ff5f 	bl	8008b1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008c5e:	e002      	b.n	8008c66 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f7f9 fcc1 	bl	80025e8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c78:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f7ff ff3a 	bl	8008af4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c80:	bf00      	nop
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c94:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f7ff ff36 	bl	8008b08 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c9c:	bf00      	nop
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f022 0203 	bic.w	r2, r2, #3
 8008cc0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cc6:	f043 0210 	orr.w	r2, r3, #16
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f7ff ff20 	bl	8008b1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008cdc:	bf00      	nop
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f7ff ff0b 	bl	8008b1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d06:	bf00      	nop
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
	...

08008d10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b088      	sub	sp, #32
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d20:	f7fa fef6 	bl	8003b10 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d28:	1a9b      	subs	r3, r3, r2
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d30:	f7fa feee 	bl	8003b10 <HAL_GetTick>
 8008d34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d36:	4b39      	ldr	r3, [pc, #228]	@ (8008e1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	015b      	lsls	r3, r3, #5
 8008d3c:	0d1b      	lsrs	r3, r3, #20
 8008d3e:	69fa      	ldr	r2, [r7, #28]
 8008d40:	fb02 f303 	mul.w	r3, r2, r3
 8008d44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d46:	e055      	b.n	8008df4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4e:	d051      	beq.n	8008df4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d50:	f7fa fede 	bl	8003b10 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	69fa      	ldr	r2, [r7, #28]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d902      	bls.n	8008d66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d13d      	bne.n	8008de2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008d74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d7e:	d111      	bne.n	8008da4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d88:	d004      	beq.n	8008d94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d92:	d107      	bne.n	8008da4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008da2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dac:	d10f      	bne.n	8008dce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008dcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e018      	b.n	8008e14 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d102      	bne.n	8008dee <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	61fb      	str	r3, [r7, #28]
 8008dec:	e002      	b.n	8008df4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689a      	ldr	r2, [r3, #8]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	bf0c      	ite	eq
 8008e04:	2301      	moveq	r3, #1
 8008e06:	2300      	movne	r3, #0
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d19a      	bne.n	8008d48 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3720      	adds	r7, #32
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20000000 	.word	0x20000000

08008e20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08a      	sub	sp, #40	@ 0x28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
 8008e2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008e32:	f7fa fe6d 	bl	8003b10 <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3a:	1a9b      	subs	r3, r3, r2
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	4413      	add	r3, r2
 8008e40:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008e42:	f7fa fe65 	bl	8003b10 <HAL_GetTick>
 8008e46:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	330c      	adds	r3, #12
 8008e4e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008e50:	4b3d      	ldr	r3, [pc, #244]	@ (8008f48 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	4613      	mov	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	00da      	lsls	r2, r3, #3
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	0d1b      	lsrs	r3, r3, #20
 8008e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e62:	fb02 f303 	mul.w	r3, r2, r3
 8008e66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008e68:	e061      	b.n	8008f2e <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008e70:	d107      	bne.n	8008e82 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d104      	bne.n	8008e82 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008e80:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e88:	d051      	beq.n	8008f2e <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e8a:	f7fa fe41 	bl	8003b10 <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d902      	bls.n	8008ea0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d13d      	bne.n	8008f1c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008eae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008eb8:	d111      	bne.n	8008ede <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ec2:	d004      	beq.n	8008ece <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ecc:	d107      	bne.n	8008ede <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008edc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ee6:	d10f      	bne.n	8008f08 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e011      	b.n	8008f40 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d102      	bne.n	8008f28 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f26:	e002      	b.n	8008f2e <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	4013      	ands	r3, r2
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d195      	bne.n	8008e6a <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3728      	adds	r7, #40	@ 0x28
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	20000000 	.word	0x20000000

08008f4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b088      	sub	sp, #32
 8008f50:	af02      	add	r7, sp, #8
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f60:	d111      	bne.n	8008f86 <SPI_EndRxTransaction+0x3a>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f6a:	d004      	beq.n	8008f76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f74:	d107      	bne.n	8008f86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f84:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f8e:	d112      	bne.n	8008fb6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2200      	movs	r2, #0
 8008f98:	2180      	movs	r1, #128	@ 0x80
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff feb8 	bl	8008d10 <SPI_WaitFlagStateUntilTimeout>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d021      	beq.n	8008fea <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008faa:	f043 0220 	orr.w	r2, r3, #32
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e03d      	b.n	8009032 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008fb6:	4b21      	ldr	r3, [pc, #132]	@ (800903c <SPI_EndRxTransaction+0xf0>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a21      	ldr	r2, [pc, #132]	@ (8009040 <SPI_EndRxTransaction+0xf4>)
 8008fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc0:	0d5b      	lsrs	r3, r3, #21
 8008fc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008fc6:	fb02 f303 	mul.w	r3, r2, r3
 8008fca:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe2:	2b80      	cmp	r3, #128	@ 0x80
 8008fe4:	d0f2      	beq.n	8008fcc <SPI_EndRxTransaction+0x80>
 8008fe6:	e000      	b.n	8008fea <SPI_EndRxTransaction+0x9e>
        break;
 8008fe8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ff2:	d11d      	bne.n	8009030 <SPI_EndRxTransaction+0xe4>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ffc:	d004      	beq.n	8009008 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009006:	d113      	bne.n	8009030 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2200      	movs	r2, #0
 8009010:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f7ff ff03 	bl	8008e20 <SPI_WaitFifoStateUntilTimeout>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d007      	beq.n	8009030 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009024:	f043 0220 	orr.w	r2, r3, #32
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e000      	b.n	8009032 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20000000 	.word	0x20000000
 8009040:	165e9f81 	.word	0x165e9f81

08009044 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af02      	add	r7, sp, #8
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2200      	movs	r2, #0
 8009058:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f7ff fedf 	bl	8008e20 <SPI_WaitFifoStateUntilTimeout>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d007      	beq.n	8009078 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800906c:	f043 0220 	orr.w	r2, r3, #32
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e046      	b.n	8009106 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009078:	4b25      	ldr	r3, [pc, #148]	@ (8009110 <SPI_EndRxTxTransaction+0xcc>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a25      	ldr	r2, [pc, #148]	@ (8009114 <SPI_EndRxTxTransaction+0xd0>)
 800907e:	fba2 2303 	umull	r2, r3, r2, r3
 8009082:	0d5b      	lsrs	r3, r3, #21
 8009084:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009088:	fb02 f303 	mul.w	r3, r2, r3
 800908c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009096:	d112      	bne.n	80090be <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2200      	movs	r2, #0
 80090a0:	2180      	movs	r1, #128	@ 0x80
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f7ff fe34 	bl	8008d10 <SPI_WaitFlagStateUntilTimeout>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d016      	beq.n	80090dc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090b2:	f043 0220 	orr.w	r2, r3, #32
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e023      	b.n	8009106 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00a      	beq.n	80090da <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090d4:	2b80      	cmp	r3, #128	@ 0x80
 80090d6:	d0f2      	beq.n	80090be <SPI_EndRxTxTransaction+0x7a>
 80090d8:	e000      	b.n	80090dc <SPI_EndRxTxTransaction+0x98>
        break;
 80090da:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f7ff fe99 	bl	8008e20 <SPI_WaitFifoStateUntilTimeout>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090f8:	f043 0220 	orr.w	r2, r3, #32
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e000      	b.n	8009106 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20000000 	.word	0x20000000
 8009114:	165e9f81 	.word	0x165e9f81

08009118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e049      	b.n	80091be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7fa f942 	bl	80033c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3304      	adds	r3, #4
 8009154:	4619      	mov	r1, r3
 8009156:	4610      	mov	r0, r2
 8009158:	f000 fb6e 	bl	8009838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e049      	b.n	800926c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d106      	bne.n	80091f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f841 	bl	8009274 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2202      	movs	r2, #2
 80091f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	3304      	adds	r3, #4
 8009202:	4619      	mov	r1, r3
 8009204:	4610      	mov	r0, r2
 8009206:	f000 fb17 	bl	8009838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d109      	bne.n	80092ac <HAL_TIM_PWM_Start+0x24>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	bf14      	ite	ne
 80092a4:	2301      	movne	r3, #1
 80092a6:	2300      	moveq	r3, #0
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	e03c      	b.n	8009326 <HAL_TIM_PWM_Start+0x9e>
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	2b04      	cmp	r3, #4
 80092b0:	d109      	bne.n	80092c6 <HAL_TIM_PWM_Start+0x3e>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	bf14      	ite	ne
 80092be:	2301      	movne	r3, #1
 80092c0:	2300      	moveq	r3, #0
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	e02f      	b.n	8009326 <HAL_TIM_PWM_Start+0x9e>
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b08      	cmp	r3, #8
 80092ca:	d109      	bne.n	80092e0 <HAL_TIM_PWM_Start+0x58>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	bf14      	ite	ne
 80092d8:	2301      	movne	r3, #1
 80092da:	2300      	moveq	r3, #0
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	e022      	b.n	8009326 <HAL_TIM_PWM_Start+0x9e>
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	2b0c      	cmp	r3, #12
 80092e4:	d109      	bne.n	80092fa <HAL_TIM_PWM_Start+0x72>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	bf14      	ite	ne
 80092f2:	2301      	movne	r3, #1
 80092f4:	2300      	moveq	r3, #0
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	e015      	b.n	8009326 <HAL_TIM_PWM_Start+0x9e>
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	2b10      	cmp	r3, #16
 80092fe:	d109      	bne.n	8009314 <HAL_TIM_PWM_Start+0x8c>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b01      	cmp	r3, #1
 800930a:	bf14      	ite	ne
 800930c:	2301      	movne	r3, #1
 800930e:	2300      	moveq	r3, #0
 8009310:	b2db      	uxtb	r3, r3
 8009312:	e008      	b.n	8009326 <HAL_TIM_PWM_Start+0x9e>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b01      	cmp	r3, #1
 800931e:	bf14      	ite	ne
 8009320:	2301      	movne	r3, #1
 8009322:	2300      	moveq	r3, #0
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e092      	b.n	8009454 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d104      	bne.n	800933e <HAL_TIM_PWM_Start+0xb6>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2202      	movs	r2, #2
 8009338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800933c:	e023      	b.n	8009386 <HAL_TIM_PWM_Start+0xfe>
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b04      	cmp	r3, #4
 8009342:	d104      	bne.n	800934e <HAL_TIM_PWM_Start+0xc6>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2202      	movs	r2, #2
 8009348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800934c:	e01b      	b.n	8009386 <HAL_TIM_PWM_Start+0xfe>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b08      	cmp	r3, #8
 8009352:	d104      	bne.n	800935e <HAL_TIM_PWM_Start+0xd6>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2202      	movs	r2, #2
 8009358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800935c:	e013      	b.n	8009386 <HAL_TIM_PWM_Start+0xfe>
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	2b0c      	cmp	r3, #12
 8009362:	d104      	bne.n	800936e <HAL_TIM_PWM_Start+0xe6>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2202      	movs	r2, #2
 8009368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800936c:	e00b      	b.n	8009386 <HAL_TIM_PWM_Start+0xfe>
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b10      	cmp	r3, #16
 8009372:	d104      	bne.n	800937e <HAL_TIM_PWM_Start+0xf6>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2202      	movs	r2, #2
 8009378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800937c:	e003      	b.n	8009386 <HAL_TIM_PWM_Start+0xfe>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2202      	movs	r2, #2
 8009382:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2201      	movs	r2, #1
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fdf0 	bl	8009f74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a30      	ldr	r2, [pc, #192]	@ (800945c <HAL_TIM_PWM_Start+0x1d4>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d004      	beq.n	80093a8 <HAL_TIM_PWM_Start+0x120>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a2f      	ldr	r2, [pc, #188]	@ (8009460 <HAL_TIM_PWM_Start+0x1d8>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d101      	bne.n	80093ac <HAL_TIM_PWM_Start+0x124>
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <HAL_TIM_PWM_Start+0x126>
 80093ac:	2300      	movs	r3, #0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d007      	beq.n	80093c2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80093c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a25      	ldr	r2, [pc, #148]	@ (800945c <HAL_TIM_PWM_Start+0x1d4>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d022      	beq.n	8009412 <HAL_TIM_PWM_Start+0x18a>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093d4:	d01d      	beq.n	8009412 <HAL_TIM_PWM_Start+0x18a>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a22      	ldr	r2, [pc, #136]	@ (8009464 <HAL_TIM_PWM_Start+0x1dc>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d018      	beq.n	8009412 <HAL_TIM_PWM_Start+0x18a>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a20      	ldr	r2, [pc, #128]	@ (8009468 <HAL_TIM_PWM_Start+0x1e0>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d013      	beq.n	8009412 <HAL_TIM_PWM_Start+0x18a>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a1f      	ldr	r2, [pc, #124]	@ (800946c <HAL_TIM_PWM_Start+0x1e4>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d00e      	beq.n	8009412 <HAL_TIM_PWM_Start+0x18a>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a19      	ldr	r2, [pc, #100]	@ (8009460 <HAL_TIM_PWM_Start+0x1d8>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d009      	beq.n	8009412 <HAL_TIM_PWM_Start+0x18a>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a1b      	ldr	r2, [pc, #108]	@ (8009470 <HAL_TIM_PWM_Start+0x1e8>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d004      	beq.n	8009412 <HAL_TIM_PWM_Start+0x18a>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a19      	ldr	r2, [pc, #100]	@ (8009474 <HAL_TIM_PWM_Start+0x1ec>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d115      	bne.n	800943e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	4b17      	ldr	r3, [pc, #92]	@ (8009478 <HAL_TIM_PWM_Start+0x1f0>)
 800941a:	4013      	ands	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2b06      	cmp	r3, #6
 8009422:	d015      	beq.n	8009450 <HAL_TIM_PWM_Start+0x1c8>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800942a:	d011      	beq.n	8009450 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f042 0201 	orr.w	r2, r2, #1
 800943a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800943c:	e008      	b.n	8009450 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f042 0201 	orr.w	r2, r2, #1
 800944c:	601a      	str	r2, [r3, #0]
 800944e:	e000      	b.n	8009452 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009450:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	40010000 	.word	0x40010000
 8009460:	40010400 	.word	0x40010400
 8009464:	40000400 	.word	0x40000400
 8009468:	40000800 	.word	0x40000800
 800946c:	40000c00 	.word	0x40000c00
 8009470:	40014000 	.word	0x40014000
 8009474:	40001800 	.word	0x40001800
 8009478:	00010007 	.word	0x00010007

0800947c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009492:	2b01      	cmp	r3, #1
 8009494:	d101      	bne.n	800949a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009496:	2302      	movs	r3, #2
 8009498:	e0ff      	b.n	800969a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b14      	cmp	r3, #20
 80094a6:	f200 80f0 	bhi.w	800968a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80094aa:	a201      	add	r2, pc, #4	@ (adr r2, 80094b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	08009505 	.word	0x08009505
 80094b4:	0800968b 	.word	0x0800968b
 80094b8:	0800968b 	.word	0x0800968b
 80094bc:	0800968b 	.word	0x0800968b
 80094c0:	08009545 	.word	0x08009545
 80094c4:	0800968b 	.word	0x0800968b
 80094c8:	0800968b 	.word	0x0800968b
 80094cc:	0800968b 	.word	0x0800968b
 80094d0:	08009587 	.word	0x08009587
 80094d4:	0800968b 	.word	0x0800968b
 80094d8:	0800968b 	.word	0x0800968b
 80094dc:	0800968b 	.word	0x0800968b
 80094e0:	080095c7 	.word	0x080095c7
 80094e4:	0800968b 	.word	0x0800968b
 80094e8:	0800968b 	.word	0x0800968b
 80094ec:	0800968b 	.word	0x0800968b
 80094f0:	08009609 	.word	0x08009609
 80094f4:	0800968b 	.word	0x0800968b
 80094f8:	0800968b 	.word	0x0800968b
 80094fc:	0800968b 	.word	0x0800968b
 8009500:	08009649 	.word	0x08009649
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68b9      	ldr	r1, [r7, #8]
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fa3a 	bl	8009984 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f042 0208 	orr.w	r2, r2, #8
 800951e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	699a      	ldr	r2, [r3, #24]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f022 0204 	bic.w	r2, r2, #4
 800952e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6999      	ldr	r1, [r3, #24]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	691a      	ldr	r2, [r3, #16]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	619a      	str	r2, [r3, #24]
      break;
 8009542:	e0a5      	b.n	8009690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68b9      	ldr	r1, [r7, #8]
 800954a:	4618      	mov	r0, r3
 800954c:	f000 fa8c 	bl	8009a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	699a      	ldr	r2, [r3, #24]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800955e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	699a      	ldr	r2, [r3, #24]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800956e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6999      	ldr	r1, [r3, #24]
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	021a      	lsls	r2, r3, #8
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	430a      	orrs	r2, r1
 8009582:	619a      	str	r2, [r3, #24]
      break;
 8009584:	e084      	b.n	8009690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68b9      	ldr	r1, [r7, #8]
 800958c:	4618      	mov	r0, r3
 800958e:	f000 fae3 	bl	8009b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69da      	ldr	r2, [r3, #28]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f042 0208 	orr.w	r2, r2, #8
 80095a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69da      	ldr	r2, [r3, #28]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f022 0204 	bic.w	r2, r2, #4
 80095b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	69d9      	ldr	r1, [r3, #28]
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	691a      	ldr	r2, [r3, #16]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	430a      	orrs	r2, r1
 80095c2:	61da      	str	r2, [r3, #28]
      break;
 80095c4:	e064      	b.n	8009690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68b9      	ldr	r1, [r7, #8]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 fb39 	bl	8009c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	69da      	ldr	r2, [r3, #28]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	69da      	ldr	r2, [r3, #28]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	69d9      	ldr	r1, [r3, #28]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	021a      	lsls	r2, r3, #8
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	430a      	orrs	r2, r1
 8009604:	61da      	str	r2, [r3, #28]
      break;
 8009606:	e043      	b.n	8009690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68b9      	ldr	r1, [r7, #8]
 800960e:	4618      	mov	r0, r3
 8009610:	f000 fb70 	bl	8009cf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f042 0208 	orr.w	r2, r2, #8
 8009622:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0204 	bic.w	r2, r2, #4
 8009632:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	691a      	ldr	r2, [r3, #16]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	430a      	orrs	r2, r1
 8009644:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009646:	e023      	b.n	8009690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68b9      	ldr	r1, [r7, #8]
 800964e:	4618      	mov	r0, r3
 8009650:	f000 fba2 	bl	8009d98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009662:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009672:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	021a      	lsls	r2, r3, #8
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009688:	e002      	b.n	8009690 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	75fb      	strb	r3, [r7, #23]
      break;
 800968e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009698:	7dfb      	ldrb	r3, [r7, #23]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop

080096a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d101      	bne.n	80096c0 <HAL_TIM_ConfigClockSource+0x1c>
 80096bc:	2302      	movs	r3, #2
 80096be:	e0b4      	b.n	800982a <HAL_TIM_ConfigClockSource+0x186>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	4b56      	ldr	r3, [pc, #344]	@ (8009834 <HAL_TIM_ConfigClockSource+0x190>)
 80096dc:	4013      	ands	r3, r2
 80096de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096f8:	d03e      	beq.n	8009778 <HAL_TIM_ConfigClockSource+0xd4>
 80096fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096fe:	f200 8087 	bhi.w	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009706:	f000 8086 	beq.w	8009816 <HAL_TIM_ConfigClockSource+0x172>
 800970a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800970e:	d87f      	bhi.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009710:	2b70      	cmp	r3, #112	@ 0x70
 8009712:	d01a      	beq.n	800974a <HAL_TIM_ConfigClockSource+0xa6>
 8009714:	2b70      	cmp	r3, #112	@ 0x70
 8009716:	d87b      	bhi.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009718:	2b60      	cmp	r3, #96	@ 0x60
 800971a:	d050      	beq.n	80097be <HAL_TIM_ConfigClockSource+0x11a>
 800971c:	2b60      	cmp	r3, #96	@ 0x60
 800971e:	d877      	bhi.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009720:	2b50      	cmp	r3, #80	@ 0x50
 8009722:	d03c      	beq.n	800979e <HAL_TIM_ConfigClockSource+0xfa>
 8009724:	2b50      	cmp	r3, #80	@ 0x50
 8009726:	d873      	bhi.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009728:	2b40      	cmp	r3, #64	@ 0x40
 800972a:	d058      	beq.n	80097de <HAL_TIM_ConfigClockSource+0x13a>
 800972c:	2b40      	cmp	r3, #64	@ 0x40
 800972e:	d86f      	bhi.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009730:	2b30      	cmp	r3, #48	@ 0x30
 8009732:	d064      	beq.n	80097fe <HAL_TIM_ConfigClockSource+0x15a>
 8009734:	2b30      	cmp	r3, #48	@ 0x30
 8009736:	d86b      	bhi.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009738:	2b20      	cmp	r3, #32
 800973a:	d060      	beq.n	80097fe <HAL_TIM_ConfigClockSource+0x15a>
 800973c:	2b20      	cmp	r3, #32
 800973e:	d867      	bhi.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
 8009740:	2b00      	cmp	r3, #0
 8009742:	d05c      	beq.n	80097fe <HAL_TIM_ConfigClockSource+0x15a>
 8009744:	2b10      	cmp	r3, #16
 8009746:	d05a      	beq.n	80097fe <HAL_TIM_ConfigClockSource+0x15a>
 8009748:	e062      	b.n	8009810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800975a:	f000 fbeb 	bl	8009f34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800976c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	609a      	str	r2, [r3, #8]
      break;
 8009776:	e04f      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009788:	f000 fbd4 	bl	8009f34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689a      	ldr	r2, [r3, #8]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800979a:	609a      	str	r2, [r3, #8]
      break;
 800979c:	e03c      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097aa:	461a      	mov	r2, r3
 80097ac:	f000 fb48 	bl	8009e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2150      	movs	r1, #80	@ 0x50
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 fba1 	bl	8009efe <TIM_ITRx_SetConfig>
      break;
 80097bc:	e02c      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097ca:	461a      	mov	r2, r3
 80097cc:	f000 fb67 	bl	8009e9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2160      	movs	r1, #96	@ 0x60
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 fb91 	bl	8009efe <TIM_ITRx_SetConfig>
      break;
 80097dc:	e01c      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ea:	461a      	mov	r2, r3
 80097ec:	f000 fb28 	bl	8009e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2140      	movs	r1, #64	@ 0x40
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fb81 	bl	8009efe <TIM_ITRx_SetConfig>
      break;
 80097fc:	e00c      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4619      	mov	r1, r3
 8009808:	4610      	mov	r0, r2
 800980a:	f000 fb78 	bl	8009efe <TIM_ITRx_SetConfig>
      break;
 800980e:	e003      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	73fb      	strb	r3, [r7, #15]
      break;
 8009814:	e000      	b.n	8009818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009828:	7bfb      	ldrb	r3, [r7, #15]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	fffeff88 	.word	0xfffeff88

08009838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a43      	ldr	r2, [pc, #268]	@ (8009958 <TIM_Base_SetConfig+0x120>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d013      	beq.n	8009878 <TIM_Base_SetConfig+0x40>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009856:	d00f      	beq.n	8009878 <TIM_Base_SetConfig+0x40>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a40      	ldr	r2, [pc, #256]	@ (800995c <TIM_Base_SetConfig+0x124>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d00b      	beq.n	8009878 <TIM_Base_SetConfig+0x40>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a3f      	ldr	r2, [pc, #252]	@ (8009960 <TIM_Base_SetConfig+0x128>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d007      	beq.n	8009878 <TIM_Base_SetConfig+0x40>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a3e      	ldr	r2, [pc, #248]	@ (8009964 <TIM_Base_SetConfig+0x12c>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d003      	beq.n	8009878 <TIM_Base_SetConfig+0x40>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a3d      	ldr	r2, [pc, #244]	@ (8009968 <TIM_Base_SetConfig+0x130>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d108      	bne.n	800988a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800987e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	4313      	orrs	r3, r2
 8009888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a32      	ldr	r2, [pc, #200]	@ (8009958 <TIM_Base_SetConfig+0x120>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d02b      	beq.n	80098ea <TIM_Base_SetConfig+0xb2>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009898:	d027      	beq.n	80098ea <TIM_Base_SetConfig+0xb2>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a2f      	ldr	r2, [pc, #188]	@ (800995c <TIM_Base_SetConfig+0x124>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d023      	beq.n	80098ea <TIM_Base_SetConfig+0xb2>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a2e      	ldr	r2, [pc, #184]	@ (8009960 <TIM_Base_SetConfig+0x128>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d01f      	beq.n	80098ea <TIM_Base_SetConfig+0xb2>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a2d      	ldr	r2, [pc, #180]	@ (8009964 <TIM_Base_SetConfig+0x12c>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d01b      	beq.n	80098ea <TIM_Base_SetConfig+0xb2>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a2c      	ldr	r2, [pc, #176]	@ (8009968 <TIM_Base_SetConfig+0x130>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d017      	beq.n	80098ea <TIM_Base_SetConfig+0xb2>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a2b      	ldr	r2, [pc, #172]	@ (800996c <TIM_Base_SetConfig+0x134>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d013      	beq.n	80098ea <TIM_Base_SetConfig+0xb2>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a2a      	ldr	r2, [pc, #168]	@ (8009970 <TIM_Base_SetConfig+0x138>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d00f      	beq.n	80098ea <TIM_Base_SetConfig+0xb2>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a29      	ldr	r2, [pc, #164]	@ (8009974 <TIM_Base_SetConfig+0x13c>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d00b      	beq.n	80098ea <TIM_Base_SetConfig+0xb2>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a28      	ldr	r2, [pc, #160]	@ (8009978 <TIM_Base_SetConfig+0x140>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d007      	beq.n	80098ea <TIM_Base_SetConfig+0xb2>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a27      	ldr	r2, [pc, #156]	@ (800997c <TIM_Base_SetConfig+0x144>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d003      	beq.n	80098ea <TIM_Base_SetConfig+0xb2>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a26      	ldr	r2, [pc, #152]	@ (8009980 <TIM_Base_SetConfig+0x148>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d108      	bne.n	80098fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	4313      	orrs	r3, r2
 8009908:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	689a      	ldr	r2, [r3, #8]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a0e      	ldr	r2, [pc, #56]	@ (8009958 <TIM_Base_SetConfig+0x120>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d003      	beq.n	800992a <TIM_Base_SetConfig+0xf2>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a10      	ldr	r2, [pc, #64]	@ (8009968 <TIM_Base_SetConfig+0x130>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d103      	bne.n	8009932 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	691a      	ldr	r2, [r3, #16]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f043 0204 	orr.w	r2, r3, #4
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	601a      	str	r2, [r3, #0]
}
 800994a:	bf00      	nop
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	40010000 	.word	0x40010000
 800995c:	40000400 	.word	0x40000400
 8009960:	40000800 	.word	0x40000800
 8009964:	40000c00 	.word	0x40000c00
 8009968:	40010400 	.word	0x40010400
 800996c:	40014000 	.word	0x40014000
 8009970:	40014400 	.word	0x40014400
 8009974:	40014800 	.word	0x40014800
 8009978:	40001800 	.word	0x40001800
 800997c:	40001c00 	.word	0x40001c00
 8009980:	40002000 	.word	0x40002000

08009984 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a1b      	ldr	r3, [r3, #32]
 8009998:	f023 0201 	bic.w	r2, r3, #1
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	4b2b      	ldr	r3, [pc, #172]	@ (8009a5c <TIM_OC1_SetConfig+0xd8>)
 80099b0:	4013      	ands	r3, r2
 80099b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f023 0303 	bic.w	r3, r3, #3
 80099ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f023 0302 	bic.w	r3, r3, #2
 80099cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a21      	ldr	r2, [pc, #132]	@ (8009a60 <TIM_OC1_SetConfig+0xdc>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d003      	beq.n	80099e8 <TIM_OC1_SetConfig+0x64>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a20      	ldr	r2, [pc, #128]	@ (8009a64 <TIM_OC1_SetConfig+0xe0>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d10c      	bne.n	8009a02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f023 0308 	bic.w	r3, r3, #8
 80099ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	697a      	ldr	r2, [r7, #20]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	f023 0304 	bic.w	r3, r3, #4
 8009a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a16      	ldr	r2, [pc, #88]	@ (8009a60 <TIM_OC1_SetConfig+0xdc>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d003      	beq.n	8009a12 <TIM_OC1_SetConfig+0x8e>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a15      	ldr	r2, [pc, #84]	@ (8009a64 <TIM_OC1_SetConfig+0xe0>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d111      	bne.n	8009a36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	621a      	str	r2, [r3, #32]
}
 8009a50:	bf00      	nop
 8009a52:	371c      	adds	r7, #28
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	fffeff8f 	.word	0xfffeff8f
 8009a60:	40010000 	.word	0x40010000
 8009a64:	40010400 	.word	0x40010400

08009a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a1b      	ldr	r3, [r3, #32]
 8009a7c:	f023 0210 	bic.w	r2, r3, #16
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	4b2e      	ldr	r3, [pc, #184]	@ (8009b4c <TIM_OC2_SetConfig+0xe4>)
 8009a94:	4013      	ands	r3, r2
 8009a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	021b      	lsls	r3, r3, #8
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f023 0320 	bic.w	r3, r3, #32
 8009ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a23      	ldr	r2, [pc, #140]	@ (8009b50 <TIM_OC2_SetConfig+0xe8>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d003      	beq.n	8009ad0 <TIM_OC2_SetConfig+0x68>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a22      	ldr	r2, [pc, #136]	@ (8009b54 <TIM_OC2_SetConfig+0xec>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d10d      	bne.n	8009aec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	011b      	lsls	r3, r3, #4
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009aea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a18      	ldr	r2, [pc, #96]	@ (8009b50 <TIM_OC2_SetConfig+0xe8>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d003      	beq.n	8009afc <TIM_OC2_SetConfig+0x94>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a17      	ldr	r2, [pc, #92]	@ (8009b54 <TIM_OC2_SetConfig+0xec>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d113      	bne.n	8009b24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	695b      	ldr	r3, [r3, #20]
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	685a      	ldr	r2, [r3, #4]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	621a      	str	r2, [r3, #32]
}
 8009b3e:	bf00      	nop
 8009b40:	371c      	adds	r7, #28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	feff8fff 	.word	0xfeff8fff
 8009b50:	40010000 	.word	0x40010000
 8009b54:	40010400 	.word	0x40010400

08009b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a1b      	ldr	r3, [r3, #32]
 8009b6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	69db      	ldr	r3, [r3, #28]
 8009b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	4b2d      	ldr	r3, [pc, #180]	@ (8009c38 <TIM_OC3_SetConfig+0xe0>)
 8009b84:	4013      	ands	r3, r2
 8009b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f023 0303 	bic.w	r3, r3, #3
 8009b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	021b      	lsls	r3, r3, #8
 8009ba8:	697a      	ldr	r2, [r7, #20]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a22      	ldr	r2, [pc, #136]	@ (8009c3c <TIM_OC3_SetConfig+0xe4>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d003      	beq.n	8009bbe <TIM_OC3_SetConfig+0x66>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a21      	ldr	r2, [pc, #132]	@ (8009c40 <TIM_OC3_SetConfig+0xe8>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d10d      	bne.n	8009bda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	021b      	lsls	r3, r3, #8
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a17      	ldr	r2, [pc, #92]	@ (8009c3c <TIM_OC3_SetConfig+0xe4>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d003      	beq.n	8009bea <TIM_OC3_SetConfig+0x92>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a16      	ldr	r2, [pc, #88]	@ (8009c40 <TIM_OC3_SetConfig+0xe8>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d113      	bne.n	8009c12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	011b      	lsls	r3, r3, #4
 8009c00:	693a      	ldr	r2, [r7, #16]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	011b      	lsls	r3, r3, #4
 8009c0c:	693a      	ldr	r2, [r7, #16]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	621a      	str	r2, [r3, #32]
}
 8009c2c:	bf00      	nop
 8009c2e:	371c      	adds	r7, #28
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	fffeff8f 	.word	0xfffeff8f
 8009c3c:	40010000 	.word	0x40010000
 8009c40:	40010400 	.word	0x40010400

08009c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b087      	sub	sp, #28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a1b      	ldr	r3, [r3, #32]
 8009c58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ce8 <TIM_OC4_SetConfig+0xa4>)
 8009c70:	4013      	ands	r3, r2
 8009c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	021b      	lsls	r3, r3, #8
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	031b      	lsls	r3, r3, #12
 8009c96:	693a      	ldr	r2, [r7, #16]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a13      	ldr	r2, [pc, #76]	@ (8009cec <TIM_OC4_SetConfig+0xa8>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d003      	beq.n	8009cac <TIM_OC4_SetConfig+0x68>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a12      	ldr	r2, [pc, #72]	@ (8009cf0 <TIM_OC4_SetConfig+0xac>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d109      	bne.n	8009cc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	019b      	lsls	r3, r3, #6
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	621a      	str	r2, [r3, #32]
}
 8009cda:	bf00      	nop
 8009cdc:	371c      	adds	r7, #28
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	feff8fff 	.word	0xfeff8fff
 8009cec:	40010000 	.word	0x40010000
 8009cf0:	40010400 	.word	0x40010400

08009cf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a1b      	ldr	r3, [r3, #32]
 8009d02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a1b      	ldr	r3, [r3, #32]
 8009d08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8009d8c <TIM_OC5_SetConfig+0x98>)
 8009d20:	4013      	ands	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009d34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	041b      	lsls	r3, r3, #16
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a12      	ldr	r2, [pc, #72]	@ (8009d90 <TIM_OC5_SetConfig+0x9c>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d003      	beq.n	8009d52 <TIM_OC5_SetConfig+0x5e>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a11      	ldr	r2, [pc, #68]	@ (8009d94 <TIM_OC5_SetConfig+0xa0>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d109      	bne.n	8009d66 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	021b      	lsls	r3, r3, #8
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	693a      	ldr	r2, [r7, #16]
 8009d7e:	621a      	str	r2, [r3, #32]
}
 8009d80:	bf00      	nop
 8009d82:	371c      	adds	r7, #28
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	fffeff8f 	.word	0xfffeff8f
 8009d90:	40010000 	.word	0x40010000
 8009d94:	40010400 	.word	0x40010400

08009d98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a1b      	ldr	r3, [r3, #32]
 8009dac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8009e34 <TIM_OC6_SetConfig+0x9c>)
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	021b      	lsls	r3, r3, #8
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	051b      	lsls	r3, r3, #20
 8009de2:	693a      	ldr	r2, [r7, #16]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a13      	ldr	r2, [pc, #76]	@ (8009e38 <TIM_OC6_SetConfig+0xa0>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d003      	beq.n	8009df8 <TIM_OC6_SetConfig+0x60>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a12      	ldr	r2, [pc, #72]	@ (8009e3c <TIM_OC6_SetConfig+0xa4>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d109      	bne.n	8009e0c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	029b      	lsls	r3, r3, #10
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	621a      	str	r2, [r3, #32]
}
 8009e26:	bf00      	nop
 8009e28:	371c      	adds	r7, #28
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	feff8fff 	.word	0xfeff8fff
 8009e38:	40010000 	.word	0x40010000
 8009e3c:	40010400 	.word	0x40010400

08009e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6a1b      	ldr	r3, [r3, #32]
 8009e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	f023 0201 	bic.w	r2, r3, #1
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	011b      	lsls	r3, r3, #4
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f023 030a 	bic.w	r3, r3, #10
 8009e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	621a      	str	r2, [r3, #32]
}
 8009e92:	bf00      	nop
 8009e94:	371c      	adds	r7, #28
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b087      	sub	sp, #28
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6a1b      	ldr	r3, [r3, #32]
 8009eb4:	f023 0210 	bic.w	r2, r3, #16
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	031b      	lsls	r3, r3, #12
 8009ece:	693a      	ldr	r2, [r7, #16]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009eda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	011b      	lsls	r3, r3, #4
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	621a      	str	r2, [r3, #32]
}
 8009ef2:	bf00      	nop
 8009ef4:	371c      	adds	r7, #28
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b085      	sub	sp, #20
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	f043 0307 	orr.w	r3, r3, #7
 8009f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	609a      	str	r2, [r3, #8]
}
 8009f28:	bf00      	nop
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b087      	sub	sp, #28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
 8009f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	021a      	lsls	r2, r3, #8
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	431a      	orrs	r2, r3
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	697a      	ldr	r2, [r7, #20]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	609a      	str	r2, [r3, #8]
}
 8009f68:	bf00      	nop
 8009f6a:	371c      	adds	r7, #28
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b087      	sub	sp, #28
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	f003 031f 	and.w	r3, r3, #31
 8009f86:	2201      	movs	r2, #1
 8009f88:	fa02 f303 	lsl.w	r3, r2, r3
 8009f8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6a1a      	ldr	r2, [r3, #32]
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	43db      	mvns	r3, r3
 8009f96:	401a      	ands	r2, r3
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6a1a      	ldr	r2, [r3, #32]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	f003 031f 	and.w	r3, r3, #31
 8009fa6:	6879      	ldr	r1, [r7, #4]
 8009fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fac:	431a      	orrs	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	621a      	str	r2, [r3, #32]
}
 8009fb2:	bf00      	nop
 8009fb4:	371c      	adds	r7, #28
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
	...

08009fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d101      	bne.n	8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e06d      	b.n	800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a30      	ldr	r2, [pc, #192]	@ (800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d004      	beq.n	800a00c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a2f      	ldr	r2, [pc, #188]	@ (800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d108      	bne.n	800a01e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a012:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a024:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a20      	ldr	r2, [pc, #128]	@ (800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d022      	beq.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a04a:	d01d      	beq.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a1d      	ldr	r2, [pc, #116]	@ (800a0c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d018      	beq.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a1c      	ldr	r2, [pc, #112]	@ (800a0cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d013      	beq.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a1a      	ldr	r2, [pc, #104]	@ (800a0d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d00e      	beq.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a15      	ldr	r2, [pc, #84]	@ (800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d009      	beq.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a16      	ldr	r2, [pc, #88]	@ (800a0d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d004      	beq.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a15      	ldr	r2, [pc, #84]	@ (800a0d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d10c      	bne.n	800a0a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a08e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	4313      	orrs	r3, r2
 800a098:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	40010000 	.word	0x40010000
 800a0c4:	40010400 	.word	0x40010400
 800a0c8:	40000400 	.word	0x40000400
 800a0cc:	40000800 	.word	0x40000800
 800a0d0:	40000c00 	.word	0x40000c00
 800a0d4:	40014000 	.word	0x40014000
 800a0d8:	40001800 	.word	0x40001800

0800a0dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d101      	bne.n	800a0ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e040      	b.n	800a170 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d106      	bne.n	800a104 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7f9 fa0c 	bl	800351c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2224      	movs	r2, #36	@ 0x24
 800a108:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f022 0201 	bic.w	r2, r2, #1
 800a118:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fd96 	bl	800ac54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 fb2f 	bl	800a78c <UART_SetConfig>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b01      	cmp	r3, #1
 800a132:	d101      	bne.n	800a138 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e01b      	b.n	800a170 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a146:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	689a      	ldr	r2, [r3, #8]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a156:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f042 0201 	orr.w	r2, r2, #1
 800a166:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fe15 	bl	800ad98 <UART_CheckIdleState>
 800a16e:	4603      	mov	r3, r0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b0ba      	sub	sp, #232	@ 0xe8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	69db      	ldr	r3, [r3, #28]
 800a186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a19e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a1a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a1ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d115      	bne.n	800a1e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1b8:	f003 0320 	and.w	r3, r3, #32
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00f      	beq.n	800a1e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1c4:	f003 0320 	and.w	r3, r3, #32
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d009      	beq.n	800a1e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 82b1 	beq.w	800a738 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	4798      	blx	r3
      }
      return;
 800a1de:	e2ab      	b.n	800a738 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a1e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 8117 	beq.w	800a418 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a1ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a1f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a1fa:	4b85      	ldr	r3, [pc, #532]	@ (800a410 <HAL_UART_IRQHandler+0x298>)
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f000 810a 	beq.w	800a418 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a208:	f003 0301 	and.w	r3, r3, #1
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d011      	beq.n	800a234 <HAL_UART_IRQHandler+0xbc>
 800a210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00b      	beq.n	800a234 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2201      	movs	r2, #1
 800a222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a22a:	f043 0201 	orr.w	r2, r3, #1
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a238:	f003 0302 	and.w	r3, r3, #2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d011      	beq.n	800a264 <HAL_UART_IRQHandler+0xec>
 800a240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a244:	f003 0301 	and.w	r3, r3, #1
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00b      	beq.n	800a264 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2202      	movs	r2, #2
 800a252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a25a:	f043 0204 	orr.w	r2, r3, #4
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a268:	f003 0304 	and.w	r3, r3, #4
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d011      	beq.n	800a294 <HAL_UART_IRQHandler+0x11c>
 800a270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a274:	f003 0301 	and.w	r3, r3, #1
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00b      	beq.n	800a294 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2204      	movs	r2, #4
 800a282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a28a:	f043 0202 	orr.w	r2, r3, #2
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a298:	f003 0308 	and.w	r3, r3, #8
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d017      	beq.n	800a2d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2a4:	f003 0320 	and.w	r3, r3, #32
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d105      	bne.n	800a2b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a2ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00b      	beq.n	800a2d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2208      	movs	r2, #8
 800a2be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2c6:	f043 0208 	orr.w	r2, r3, #8
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a2d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d012      	beq.n	800a302 <HAL_UART_IRQHandler+0x18a>
 800a2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00c      	beq.n	800a302 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a2f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2f8:	f043 0220 	orr.w	r2, r3, #32
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 8217 	beq.w	800a73c <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a30e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a312:	f003 0320 	and.w	r3, r3, #32
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00d      	beq.n	800a336 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a31a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a31e:	f003 0320 	and.w	r3, r3, #32
 800a322:	2b00      	cmp	r3, #0
 800a324:	d007      	beq.n	800a336 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d003      	beq.n	800a336 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a33c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a34a:	2b40      	cmp	r3, #64	@ 0x40
 800a34c:	d005      	beq.n	800a35a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a34e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a352:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a356:	2b00      	cmp	r3, #0
 800a358:	d04f      	beq.n	800a3fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fea6 	bl	800b0ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a36a:	2b40      	cmp	r3, #64	@ 0x40
 800a36c:	d141      	bne.n	800a3f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3308      	adds	r3, #8
 800a374:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a378:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a37c:	e853 3f00 	ldrex	r3, [r3]
 800a380:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a384:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a38c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3308      	adds	r3, #8
 800a396:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a39a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a39e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a3a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a3b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1d9      	bne.n	800a36e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d013      	beq.n	800a3ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3c6:	4a13      	ldr	r2, [pc, #76]	@ (800a414 <HAL_UART_IRQHandler+0x29c>)
 800a3c8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7fa fb0c 	bl	80049ec <HAL_DMA_Abort_IT>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d017      	beq.n	800a40a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3e8:	e00f      	b.n	800a40a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f9c4 	bl	800a778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f0:	e00b      	b.n	800a40a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f9c0 	bl	800a778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f8:	e007      	b.n	800a40a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f9bc 	bl	800a778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a408:	e198      	b.n	800a73c <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a40a:	bf00      	nop
    return;
 800a40c:	e196      	b.n	800a73c <HAL_UART_IRQHandler+0x5c4>
 800a40e:	bf00      	nop
 800a410:	04000120 	.word	0x04000120
 800a414:	0800b175 	.word	0x0800b175

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	f040 8166 	bne.w	800a6ee <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a426:	f003 0310 	and.w	r3, r3, #16
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 815f 	beq.w	800a6ee <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a434:	f003 0310 	and.w	r3, r3, #16
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f000 8158 	beq.w	800a6ee <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2210      	movs	r2, #16
 800a444:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a450:	2b40      	cmp	r3, #64	@ 0x40
 800a452:	f040 80d0 	bne.w	800a5f6 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a462:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 80ab 	beq.w	800a5c2 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a476:	429a      	cmp	r2, r3
 800a478:	f080 80a3 	bcs.w	800a5c2 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a482:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a48a:	69db      	ldr	r3, [r3, #28]
 800a48c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a490:	f000 8086 	beq.w	800a5a0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a4a0:	e853 3f00 	ldrex	r3, [r3]
 800a4a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a4a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a4ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a4be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a4c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a4ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a4ce:	e841 2300 	strex	r3, r2, [r1]
 800a4d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a4d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1da      	bne.n	800a494 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3308      	adds	r3, #8
 800a4e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a4e8:	e853 3f00 	ldrex	r3, [r3]
 800a4ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a4ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4f0:	f023 0301 	bic.w	r3, r3, #1
 800a4f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3308      	adds	r3, #8
 800a4fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a502:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a506:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a508:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a50a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a50e:	e841 2300 	strex	r3, r2, [r1]
 800a512:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a514:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1e1      	bne.n	800a4de <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3308      	adds	r3, #8
 800a520:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a522:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a524:	e853 3f00 	ldrex	r3, [r3]
 800a528:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a52a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a52c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a530:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3308      	adds	r3, #8
 800a53a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a53e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a540:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a542:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a544:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a546:	e841 2300 	strex	r3, r2, [r1]
 800a54a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a54c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1e3      	bne.n	800a51a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2220      	movs	r2, #32
 800a556:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a568:	e853 3f00 	ldrex	r3, [r3]
 800a56c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a56e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a570:	f023 0310 	bic.w	r3, r3, #16
 800a574:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	461a      	mov	r2, r3
 800a57e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a582:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a584:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a586:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a588:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a58a:	e841 2300 	strex	r3, r2, [r1]
 800a58e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1e4      	bne.n	800a560 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fa f9b6 	bl	800490c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2202      	movs	r2, #2
 800a5a4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7f7 ffd2 	bl	8002564 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a5c0:	e0be      	b.n	800a740 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a5c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	f040 80b7 	bne.w	800a740 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5d6:	69db      	ldr	r3, [r3, #28]
 800a5d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5dc:	f040 80b0 	bne.w	800a740 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7f7 ffb8 	bl	8002564 <HAL_UARTEx_RxEventCallback>
      return;
 800a5f4:	e0a4      	b.n	800a740 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a602:	b29b      	uxth	r3, r3
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a610:	b29b      	uxth	r3, r3
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 8096 	beq.w	800a744 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800a618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 8091 	beq.w	800a744 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62a:	e853 3f00 	ldrex	r3, [r3]
 800a62e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a632:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a636:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a644:	647b      	str	r3, [r7, #68]	@ 0x44
 800a646:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a648:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a64a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a64c:	e841 2300 	strex	r3, r2, [r1]
 800a650:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1e4      	bne.n	800a622 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3308      	adds	r3, #8
 800a65e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a662:	e853 3f00 	ldrex	r3, [r3]
 800a666:	623b      	str	r3, [r7, #32]
   return(result);
 800a668:	6a3b      	ldr	r3, [r7, #32]
 800a66a:	f023 0301 	bic.w	r3, r3, #1
 800a66e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3308      	adds	r3, #8
 800a678:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a67c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a67e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a680:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a684:	e841 2300 	strex	r3, r2, [r1]
 800a688:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d1e3      	bne.n	800a658 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2220      	movs	r2, #32
 800a694:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	e853 3f00 	ldrex	r3, [r3]
 800a6b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f023 0310 	bic.w	r3, r3, #16
 800a6b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a6c6:	61fb      	str	r3, [r7, #28]
 800a6c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ca:	69b9      	ldr	r1, [r7, #24]
 800a6cc:	69fa      	ldr	r2, [r7, #28]
 800a6ce:	e841 2300 	strex	r3, r2, [r1]
 800a6d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1e4      	bne.n	800a6a4 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2202      	movs	r2, #2
 800a6de:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a6e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7f7 ff3c 	bl	8002564 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a6ec:	e02a      	b.n	800a744 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00e      	beq.n	800a718 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a6fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a702:	2b00      	cmp	r3, #0
 800a704:	d008      	beq.n	800a718 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d01c      	beq.n	800a748 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	4798      	blx	r3
    }
    return;
 800a716:	e017      	b.n	800a748 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a71c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a720:	2b00      	cmp	r3, #0
 800a722:	d012      	beq.n	800a74a <HAL_UART_IRQHandler+0x5d2>
 800a724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00c      	beq.n	800a74a <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fd31 	bl	800b198 <UART_EndTransmit_IT>
    return;
 800a736:	e008      	b.n	800a74a <HAL_UART_IRQHandler+0x5d2>
      return;
 800a738:	bf00      	nop
 800a73a:	e006      	b.n	800a74a <HAL_UART_IRQHandler+0x5d2>
    return;
 800a73c:	bf00      	nop
 800a73e:	e004      	b.n	800a74a <HAL_UART_IRQHandler+0x5d2>
      return;
 800a740:	bf00      	nop
 800a742:	e002      	b.n	800a74a <HAL_UART_IRQHandler+0x5d2>
      return;
 800a744:	bf00      	nop
 800a746:	e000      	b.n	800a74a <HAL_UART_IRQHandler+0x5d2>
    return;
 800a748:	bf00      	nop
  }

}
 800a74a:	37e8      	adds	r7, #232	@ 0xe8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a76c:	bf00      	nop
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b088      	sub	sp, #32
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	689a      	ldr	r2, [r3, #8]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	431a      	orrs	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	431a      	orrs	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	69db      	ldr	r3, [r3, #28]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	4ba6      	ldr	r3, [pc, #664]	@ (800aa50 <UART_SetConfig+0x2c4>)
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	6812      	ldr	r2, [r2, #0]
 800a7be:	6979      	ldr	r1, [r7, #20]
 800a7c0:	430b      	orrs	r3, r1
 800a7c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	68da      	ldr	r2, [r3, #12]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	430a      	orrs	r2, r1
 800a7d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a1b      	ldr	r3, [r3, #32]
 800a7e4:	697a      	ldr	r2, [r7, #20]
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	697a      	ldr	r2, [r7, #20]
 800a7fa:	430a      	orrs	r2, r1
 800a7fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a94      	ldr	r2, [pc, #592]	@ (800aa54 <UART_SetConfig+0x2c8>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d120      	bne.n	800a84a <UART_SetConfig+0xbe>
 800a808:	4b93      	ldr	r3, [pc, #588]	@ (800aa58 <UART_SetConfig+0x2cc>)
 800a80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a80e:	f003 0303 	and.w	r3, r3, #3
 800a812:	2b03      	cmp	r3, #3
 800a814:	d816      	bhi.n	800a844 <UART_SetConfig+0xb8>
 800a816:	a201      	add	r2, pc, #4	@ (adr r2, 800a81c <UART_SetConfig+0x90>)
 800a818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81c:	0800a82d 	.word	0x0800a82d
 800a820:	0800a839 	.word	0x0800a839
 800a824:	0800a833 	.word	0x0800a833
 800a828:	0800a83f 	.word	0x0800a83f
 800a82c:	2301      	movs	r3, #1
 800a82e:	77fb      	strb	r3, [r7, #31]
 800a830:	e150      	b.n	800aad4 <UART_SetConfig+0x348>
 800a832:	2302      	movs	r3, #2
 800a834:	77fb      	strb	r3, [r7, #31]
 800a836:	e14d      	b.n	800aad4 <UART_SetConfig+0x348>
 800a838:	2304      	movs	r3, #4
 800a83a:	77fb      	strb	r3, [r7, #31]
 800a83c:	e14a      	b.n	800aad4 <UART_SetConfig+0x348>
 800a83e:	2308      	movs	r3, #8
 800a840:	77fb      	strb	r3, [r7, #31]
 800a842:	e147      	b.n	800aad4 <UART_SetConfig+0x348>
 800a844:	2310      	movs	r3, #16
 800a846:	77fb      	strb	r3, [r7, #31]
 800a848:	e144      	b.n	800aad4 <UART_SetConfig+0x348>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a83      	ldr	r2, [pc, #524]	@ (800aa5c <UART_SetConfig+0x2d0>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d132      	bne.n	800a8ba <UART_SetConfig+0x12e>
 800a854:	4b80      	ldr	r3, [pc, #512]	@ (800aa58 <UART_SetConfig+0x2cc>)
 800a856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a85a:	f003 030c 	and.w	r3, r3, #12
 800a85e:	2b0c      	cmp	r3, #12
 800a860:	d828      	bhi.n	800a8b4 <UART_SetConfig+0x128>
 800a862:	a201      	add	r2, pc, #4	@ (adr r2, 800a868 <UART_SetConfig+0xdc>)
 800a864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a868:	0800a89d 	.word	0x0800a89d
 800a86c:	0800a8b5 	.word	0x0800a8b5
 800a870:	0800a8b5 	.word	0x0800a8b5
 800a874:	0800a8b5 	.word	0x0800a8b5
 800a878:	0800a8a9 	.word	0x0800a8a9
 800a87c:	0800a8b5 	.word	0x0800a8b5
 800a880:	0800a8b5 	.word	0x0800a8b5
 800a884:	0800a8b5 	.word	0x0800a8b5
 800a888:	0800a8a3 	.word	0x0800a8a3
 800a88c:	0800a8b5 	.word	0x0800a8b5
 800a890:	0800a8b5 	.word	0x0800a8b5
 800a894:	0800a8b5 	.word	0x0800a8b5
 800a898:	0800a8af 	.word	0x0800a8af
 800a89c:	2300      	movs	r3, #0
 800a89e:	77fb      	strb	r3, [r7, #31]
 800a8a0:	e118      	b.n	800aad4 <UART_SetConfig+0x348>
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	77fb      	strb	r3, [r7, #31]
 800a8a6:	e115      	b.n	800aad4 <UART_SetConfig+0x348>
 800a8a8:	2304      	movs	r3, #4
 800a8aa:	77fb      	strb	r3, [r7, #31]
 800a8ac:	e112      	b.n	800aad4 <UART_SetConfig+0x348>
 800a8ae:	2308      	movs	r3, #8
 800a8b0:	77fb      	strb	r3, [r7, #31]
 800a8b2:	e10f      	b.n	800aad4 <UART_SetConfig+0x348>
 800a8b4:	2310      	movs	r3, #16
 800a8b6:	77fb      	strb	r3, [r7, #31]
 800a8b8:	e10c      	b.n	800aad4 <UART_SetConfig+0x348>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a68      	ldr	r2, [pc, #416]	@ (800aa60 <UART_SetConfig+0x2d4>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d120      	bne.n	800a906 <UART_SetConfig+0x17a>
 800a8c4:	4b64      	ldr	r3, [pc, #400]	@ (800aa58 <UART_SetConfig+0x2cc>)
 800a8c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a8ce:	2b30      	cmp	r3, #48	@ 0x30
 800a8d0:	d013      	beq.n	800a8fa <UART_SetConfig+0x16e>
 800a8d2:	2b30      	cmp	r3, #48	@ 0x30
 800a8d4:	d814      	bhi.n	800a900 <UART_SetConfig+0x174>
 800a8d6:	2b20      	cmp	r3, #32
 800a8d8:	d009      	beq.n	800a8ee <UART_SetConfig+0x162>
 800a8da:	2b20      	cmp	r3, #32
 800a8dc:	d810      	bhi.n	800a900 <UART_SetConfig+0x174>
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d002      	beq.n	800a8e8 <UART_SetConfig+0x15c>
 800a8e2:	2b10      	cmp	r3, #16
 800a8e4:	d006      	beq.n	800a8f4 <UART_SetConfig+0x168>
 800a8e6:	e00b      	b.n	800a900 <UART_SetConfig+0x174>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	77fb      	strb	r3, [r7, #31]
 800a8ec:	e0f2      	b.n	800aad4 <UART_SetConfig+0x348>
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	77fb      	strb	r3, [r7, #31]
 800a8f2:	e0ef      	b.n	800aad4 <UART_SetConfig+0x348>
 800a8f4:	2304      	movs	r3, #4
 800a8f6:	77fb      	strb	r3, [r7, #31]
 800a8f8:	e0ec      	b.n	800aad4 <UART_SetConfig+0x348>
 800a8fa:	2308      	movs	r3, #8
 800a8fc:	77fb      	strb	r3, [r7, #31]
 800a8fe:	e0e9      	b.n	800aad4 <UART_SetConfig+0x348>
 800a900:	2310      	movs	r3, #16
 800a902:	77fb      	strb	r3, [r7, #31]
 800a904:	e0e6      	b.n	800aad4 <UART_SetConfig+0x348>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a56      	ldr	r2, [pc, #344]	@ (800aa64 <UART_SetConfig+0x2d8>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d120      	bne.n	800a952 <UART_SetConfig+0x1c6>
 800a910:	4b51      	ldr	r3, [pc, #324]	@ (800aa58 <UART_SetConfig+0x2cc>)
 800a912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a916:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a91a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a91c:	d013      	beq.n	800a946 <UART_SetConfig+0x1ba>
 800a91e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a920:	d814      	bhi.n	800a94c <UART_SetConfig+0x1c0>
 800a922:	2b80      	cmp	r3, #128	@ 0x80
 800a924:	d009      	beq.n	800a93a <UART_SetConfig+0x1ae>
 800a926:	2b80      	cmp	r3, #128	@ 0x80
 800a928:	d810      	bhi.n	800a94c <UART_SetConfig+0x1c0>
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d002      	beq.n	800a934 <UART_SetConfig+0x1a8>
 800a92e:	2b40      	cmp	r3, #64	@ 0x40
 800a930:	d006      	beq.n	800a940 <UART_SetConfig+0x1b4>
 800a932:	e00b      	b.n	800a94c <UART_SetConfig+0x1c0>
 800a934:	2300      	movs	r3, #0
 800a936:	77fb      	strb	r3, [r7, #31]
 800a938:	e0cc      	b.n	800aad4 <UART_SetConfig+0x348>
 800a93a:	2302      	movs	r3, #2
 800a93c:	77fb      	strb	r3, [r7, #31]
 800a93e:	e0c9      	b.n	800aad4 <UART_SetConfig+0x348>
 800a940:	2304      	movs	r3, #4
 800a942:	77fb      	strb	r3, [r7, #31]
 800a944:	e0c6      	b.n	800aad4 <UART_SetConfig+0x348>
 800a946:	2308      	movs	r3, #8
 800a948:	77fb      	strb	r3, [r7, #31]
 800a94a:	e0c3      	b.n	800aad4 <UART_SetConfig+0x348>
 800a94c:	2310      	movs	r3, #16
 800a94e:	77fb      	strb	r3, [r7, #31]
 800a950:	e0c0      	b.n	800aad4 <UART_SetConfig+0x348>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a44      	ldr	r2, [pc, #272]	@ (800aa68 <UART_SetConfig+0x2dc>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d125      	bne.n	800a9a8 <UART_SetConfig+0x21c>
 800a95c:	4b3e      	ldr	r3, [pc, #248]	@ (800aa58 <UART_SetConfig+0x2cc>)
 800a95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a96a:	d017      	beq.n	800a99c <UART_SetConfig+0x210>
 800a96c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a970:	d817      	bhi.n	800a9a2 <UART_SetConfig+0x216>
 800a972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a976:	d00b      	beq.n	800a990 <UART_SetConfig+0x204>
 800a978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a97c:	d811      	bhi.n	800a9a2 <UART_SetConfig+0x216>
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <UART_SetConfig+0x1fe>
 800a982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a986:	d006      	beq.n	800a996 <UART_SetConfig+0x20a>
 800a988:	e00b      	b.n	800a9a2 <UART_SetConfig+0x216>
 800a98a:	2300      	movs	r3, #0
 800a98c:	77fb      	strb	r3, [r7, #31]
 800a98e:	e0a1      	b.n	800aad4 <UART_SetConfig+0x348>
 800a990:	2302      	movs	r3, #2
 800a992:	77fb      	strb	r3, [r7, #31]
 800a994:	e09e      	b.n	800aad4 <UART_SetConfig+0x348>
 800a996:	2304      	movs	r3, #4
 800a998:	77fb      	strb	r3, [r7, #31]
 800a99a:	e09b      	b.n	800aad4 <UART_SetConfig+0x348>
 800a99c:	2308      	movs	r3, #8
 800a99e:	77fb      	strb	r3, [r7, #31]
 800a9a0:	e098      	b.n	800aad4 <UART_SetConfig+0x348>
 800a9a2:	2310      	movs	r3, #16
 800a9a4:	77fb      	strb	r3, [r7, #31]
 800a9a6:	e095      	b.n	800aad4 <UART_SetConfig+0x348>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a2f      	ldr	r2, [pc, #188]	@ (800aa6c <UART_SetConfig+0x2e0>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d125      	bne.n	800a9fe <UART_SetConfig+0x272>
 800a9b2:	4b29      	ldr	r3, [pc, #164]	@ (800aa58 <UART_SetConfig+0x2cc>)
 800a9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a9bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a9c0:	d017      	beq.n	800a9f2 <UART_SetConfig+0x266>
 800a9c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a9c6:	d817      	bhi.n	800a9f8 <UART_SetConfig+0x26c>
 800a9c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9cc:	d00b      	beq.n	800a9e6 <UART_SetConfig+0x25a>
 800a9ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9d2:	d811      	bhi.n	800a9f8 <UART_SetConfig+0x26c>
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d003      	beq.n	800a9e0 <UART_SetConfig+0x254>
 800a9d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9dc:	d006      	beq.n	800a9ec <UART_SetConfig+0x260>
 800a9de:	e00b      	b.n	800a9f8 <UART_SetConfig+0x26c>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	77fb      	strb	r3, [r7, #31]
 800a9e4:	e076      	b.n	800aad4 <UART_SetConfig+0x348>
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	77fb      	strb	r3, [r7, #31]
 800a9ea:	e073      	b.n	800aad4 <UART_SetConfig+0x348>
 800a9ec:	2304      	movs	r3, #4
 800a9ee:	77fb      	strb	r3, [r7, #31]
 800a9f0:	e070      	b.n	800aad4 <UART_SetConfig+0x348>
 800a9f2:	2308      	movs	r3, #8
 800a9f4:	77fb      	strb	r3, [r7, #31]
 800a9f6:	e06d      	b.n	800aad4 <UART_SetConfig+0x348>
 800a9f8:	2310      	movs	r3, #16
 800a9fa:	77fb      	strb	r3, [r7, #31]
 800a9fc:	e06a      	b.n	800aad4 <UART_SetConfig+0x348>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a1b      	ldr	r2, [pc, #108]	@ (800aa70 <UART_SetConfig+0x2e4>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d138      	bne.n	800aa7a <UART_SetConfig+0x2ee>
 800aa08:	4b13      	ldr	r3, [pc, #76]	@ (800aa58 <UART_SetConfig+0x2cc>)
 800aa0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800aa12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa16:	d017      	beq.n	800aa48 <UART_SetConfig+0x2bc>
 800aa18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa1c:	d82a      	bhi.n	800aa74 <UART_SetConfig+0x2e8>
 800aa1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa22:	d00b      	beq.n	800aa3c <UART_SetConfig+0x2b0>
 800aa24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa28:	d824      	bhi.n	800aa74 <UART_SetConfig+0x2e8>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d003      	beq.n	800aa36 <UART_SetConfig+0x2aa>
 800aa2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa32:	d006      	beq.n	800aa42 <UART_SetConfig+0x2b6>
 800aa34:	e01e      	b.n	800aa74 <UART_SetConfig+0x2e8>
 800aa36:	2300      	movs	r3, #0
 800aa38:	77fb      	strb	r3, [r7, #31]
 800aa3a:	e04b      	b.n	800aad4 <UART_SetConfig+0x348>
 800aa3c:	2302      	movs	r3, #2
 800aa3e:	77fb      	strb	r3, [r7, #31]
 800aa40:	e048      	b.n	800aad4 <UART_SetConfig+0x348>
 800aa42:	2304      	movs	r3, #4
 800aa44:	77fb      	strb	r3, [r7, #31]
 800aa46:	e045      	b.n	800aad4 <UART_SetConfig+0x348>
 800aa48:	2308      	movs	r3, #8
 800aa4a:	77fb      	strb	r3, [r7, #31]
 800aa4c:	e042      	b.n	800aad4 <UART_SetConfig+0x348>
 800aa4e:	bf00      	nop
 800aa50:	efff69f3 	.word	0xefff69f3
 800aa54:	40011000 	.word	0x40011000
 800aa58:	40023800 	.word	0x40023800
 800aa5c:	40004400 	.word	0x40004400
 800aa60:	40004800 	.word	0x40004800
 800aa64:	40004c00 	.word	0x40004c00
 800aa68:	40005000 	.word	0x40005000
 800aa6c:	40011400 	.word	0x40011400
 800aa70:	40007800 	.word	0x40007800
 800aa74:	2310      	movs	r3, #16
 800aa76:	77fb      	strb	r3, [r7, #31]
 800aa78:	e02c      	b.n	800aad4 <UART_SetConfig+0x348>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a72      	ldr	r2, [pc, #456]	@ (800ac48 <UART_SetConfig+0x4bc>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d125      	bne.n	800aad0 <UART_SetConfig+0x344>
 800aa84:	4b71      	ldr	r3, [pc, #452]	@ (800ac4c <UART_SetConfig+0x4c0>)
 800aa86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa8a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800aa8e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800aa92:	d017      	beq.n	800aac4 <UART_SetConfig+0x338>
 800aa94:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800aa98:	d817      	bhi.n	800aaca <UART_SetConfig+0x33e>
 800aa9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa9e:	d00b      	beq.n	800aab8 <UART_SetConfig+0x32c>
 800aaa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aaa4:	d811      	bhi.n	800aaca <UART_SetConfig+0x33e>
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d003      	beq.n	800aab2 <UART_SetConfig+0x326>
 800aaaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aaae:	d006      	beq.n	800aabe <UART_SetConfig+0x332>
 800aab0:	e00b      	b.n	800aaca <UART_SetConfig+0x33e>
 800aab2:	2300      	movs	r3, #0
 800aab4:	77fb      	strb	r3, [r7, #31]
 800aab6:	e00d      	b.n	800aad4 <UART_SetConfig+0x348>
 800aab8:	2302      	movs	r3, #2
 800aaba:	77fb      	strb	r3, [r7, #31]
 800aabc:	e00a      	b.n	800aad4 <UART_SetConfig+0x348>
 800aabe:	2304      	movs	r3, #4
 800aac0:	77fb      	strb	r3, [r7, #31]
 800aac2:	e007      	b.n	800aad4 <UART_SetConfig+0x348>
 800aac4:	2308      	movs	r3, #8
 800aac6:	77fb      	strb	r3, [r7, #31]
 800aac8:	e004      	b.n	800aad4 <UART_SetConfig+0x348>
 800aaca:	2310      	movs	r3, #16
 800aacc:	77fb      	strb	r3, [r7, #31]
 800aace:	e001      	b.n	800aad4 <UART_SetConfig+0x348>
 800aad0:	2310      	movs	r3, #16
 800aad2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	69db      	ldr	r3, [r3, #28]
 800aad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aadc:	d15b      	bne.n	800ab96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800aade:	7ffb      	ldrb	r3, [r7, #31]
 800aae0:	2b08      	cmp	r3, #8
 800aae2:	d828      	bhi.n	800ab36 <UART_SetConfig+0x3aa>
 800aae4:	a201      	add	r2, pc, #4	@ (adr r2, 800aaec <UART_SetConfig+0x360>)
 800aae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaea:	bf00      	nop
 800aaec:	0800ab11 	.word	0x0800ab11
 800aaf0:	0800ab19 	.word	0x0800ab19
 800aaf4:	0800ab21 	.word	0x0800ab21
 800aaf8:	0800ab37 	.word	0x0800ab37
 800aafc:	0800ab27 	.word	0x0800ab27
 800ab00:	0800ab37 	.word	0x0800ab37
 800ab04:	0800ab37 	.word	0x0800ab37
 800ab08:	0800ab37 	.word	0x0800ab37
 800ab0c:	0800ab2f 	.word	0x0800ab2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab10:	f7fc fc76 	bl	8007400 <HAL_RCC_GetPCLK1Freq>
 800ab14:	61b8      	str	r0, [r7, #24]
        break;
 800ab16:	e013      	b.n	800ab40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab18:	f7fc fc86 	bl	8007428 <HAL_RCC_GetPCLK2Freq>
 800ab1c:	61b8      	str	r0, [r7, #24]
        break;
 800ab1e:	e00f      	b.n	800ab40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab20:	4b4b      	ldr	r3, [pc, #300]	@ (800ac50 <UART_SetConfig+0x4c4>)
 800ab22:	61bb      	str	r3, [r7, #24]
        break;
 800ab24:	e00c      	b.n	800ab40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab26:	f7fc fb59 	bl	80071dc <HAL_RCC_GetSysClockFreq>
 800ab2a:	61b8      	str	r0, [r7, #24]
        break;
 800ab2c:	e008      	b.n	800ab40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab32:	61bb      	str	r3, [r7, #24]
        break;
 800ab34:	e004      	b.n	800ab40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ab36:	2300      	movs	r3, #0
 800ab38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	77bb      	strb	r3, [r7, #30]
        break;
 800ab3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d074      	beq.n	800ac30 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	005a      	lsls	r2, r3, #1
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	085b      	lsrs	r3, r3, #1
 800ab50:	441a      	add	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	2b0f      	cmp	r3, #15
 800ab60:	d916      	bls.n	800ab90 <UART_SetConfig+0x404>
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab68:	d212      	bcs.n	800ab90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	f023 030f 	bic.w	r3, r3, #15
 800ab72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	085b      	lsrs	r3, r3, #1
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	f003 0307 	and.w	r3, r3, #7
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	89fb      	ldrh	r3, [r7, #14]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	89fa      	ldrh	r2, [r7, #14]
 800ab8c:	60da      	str	r2, [r3, #12]
 800ab8e:	e04f      	b.n	800ac30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	77bb      	strb	r3, [r7, #30]
 800ab94:	e04c      	b.n	800ac30 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab96:	7ffb      	ldrb	r3, [r7, #31]
 800ab98:	2b08      	cmp	r3, #8
 800ab9a:	d828      	bhi.n	800abee <UART_SetConfig+0x462>
 800ab9c:	a201      	add	r2, pc, #4	@ (adr r2, 800aba4 <UART_SetConfig+0x418>)
 800ab9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba2:	bf00      	nop
 800aba4:	0800abc9 	.word	0x0800abc9
 800aba8:	0800abd1 	.word	0x0800abd1
 800abac:	0800abd9 	.word	0x0800abd9
 800abb0:	0800abef 	.word	0x0800abef
 800abb4:	0800abdf 	.word	0x0800abdf
 800abb8:	0800abef 	.word	0x0800abef
 800abbc:	0800abef 	.word	0x0800abef
 800abc0:	0800abef 	.word	0x0800abef
 800abc4:	0800abe7 	.word	0x0800abe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abc8:	f7fc fc1a 	bl	8007400 <HAL_RCC_GetPCLK1Freq>
 800abcc:	61b8      	str	r0, [r7, #24]
        break;
 800abce:	e013      	b.n	800abf8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abd0:	f7fc fc2a 	bl	8007428 <HAL_RCC_GetPCLK2Freq>
 800abd4:	61b8      	str	r0, [r7, #24]
        break;
 800abd6:	e00f      	b.n	800abf8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abd8:	4b1d      	ldr	r3, [pc, #116]	@ (800ac50 <UART_SetConfig+0x4c4>)
 800abda:	61bb      	str	r3, [r7, #24]
        break;
 800abdc:	e00c      	b.n	800abf8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abde:	f7fc fafd 	bl	80071dc <HAL_RCC_GetSysClockFreq>
 800abe2:	61b8      	str	r0, [r7, #24]
        break;
 800abe4:	e008      	b.n	800abf8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abea:	61bb      	str	r3, [r7, #24]
        break;
 800abec:	e004      	b.n	800abf8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800abee:	2300      	movs	r3, #0
 800abf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	77bb      	strb	r3, [r7, #30]
        break;
 800abf6:	bf00      	nop
    }

    if (pclk != 0U)
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d018      	beq.n	800ac30 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	085a      	lsrs	r2, r3, #1
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	441a      	add	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	2b0f      	cmp	r3, #15
 800ac16:	d909      	bls.n	800ac2c <UART_SetConfig+0x4a0>
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac1e:	d205      	bcs.n	800ac2c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	60da      	str	r2, [r3, #12]
 800ac2a:	e001      	b.n	800ac30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ac3c:	7fbb      	ldrb	r3, [r7, #30]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3720      	adds	r7, #32
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	40007c00 	.word	0x40007c00
 800ac4c:	40023800 	.word	0x40023800
 800ac50:	00f42400 	.word	0x00f42400

0800ac54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac60:	f003 0308 	and.w	r3, r3, #8
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00a      	beq.n	800ac7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	430a      	orrs	r2, r1
 800ac7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00a      	beq.n	800aca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca4:	f003 0302 	and.w	r3, r3, #2
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00a      	beq.n	800acc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc6:	f003 0304 	and.w	r3, r3, #4
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00a      	beq.n	800ace4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	430a      	orrs	r2, r1
 800ace2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace8:	f003 0310 	and.w	r3, r3, #16
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00a      	beq.n	800ad06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	430a      	orrs	r2, r1
 800ad04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad0a:	f003 0320 	and.w	r3, r3, #32
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00a      	beq.n	800ad28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	430a      	orrs	r2, r1
 800ad26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d01a      	beq.n	800ad6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	430a      	orrs	r2, r1
 800ad48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad52:	d10a      	bne.n	800ad6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	430a      	orrs	r2, r1
 800ad68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00a      	beq.n	800ad8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	430a      	orrs	r2, r1
 800ad8a:	605a      	str	r2, [r3, #4]
  }
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b08c      	sub	sp, #48	@ 0x30
 800ad9c:	af02      	add	r7, sp, #8
 800ad9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ada8:	f7f8 feb2 	bl	8003b10 <HAL_GetTick>
 800adac:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 0308 	and.w	r3, r3, #8
 800adb8:	2b08      	cmp	r3, #8
 800adba:	d12e      	bne.n	800ae1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc4:	2200      	movs	r2, #0
 800adc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f83b 	bl	800ae46 <UART_WaitOnFlagUntilTimeout>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d021      	beq.n	800ae1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	e853 3f00 	ldrex	r3, [r3]
 800ade2:	60fb      	str	r3, [r7, #12]
   return(result);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adea:	623b      	str	r3, [r7, #32]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	461a      	mov	r2, r3
 800adf2:	6a3b      	ldr	r3, [r7, #32]
 800adf4:	61fb      	str	r3, [r7, #28]
 800adf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf8:	69b9      	ldr	r1, [r7, #24]
 800adfa:	69fa      	ldr	r2, [r7, #28]
 800adfc:	e841 2300 	strex	r3, r2, [r1]
 800ae00:	617b      	str	r3, [r7, #20]
   return(result);
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1e6      	bne.n	800add6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2220      	movs	r2, #32
 800ae0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae16:	2303      	movs	r3, #3
 800ae18:	e011      	b.n	800ae3e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2220      	movs	r2, #32
 800ae1e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2220      	movs	r2, #32
 800ae24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3728      	adds	r7, #40	@ 0x28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b084      	sub	sp, #16
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	60f8      	str	r0, [r7, #12]
 800ae4e:	60b9      	str	r1, [r7, #8]
 800ae50:	603b      	str	r3, [r7, #0]
 800ae52:	4613      	mov	r3, r2
 800ae54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae56:	e04f      	b.n	800aef8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae5e:	d04b      	beq.n	800aef8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae60:	f7f8 fe56 	bl	8003b10 <HAL_GetTick>
 800ae64:	4602      	mov	r2, r0
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	69ba      	ldr	r2, [r7, #24]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d302      	bcc.n	800ae76 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae76:	2303      	movs	r3, #3
 800ae78:	e04e      	b.n	800af18 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 0304 	and.w	r3, r3, #4
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d037      	beq.n	800aef8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	2b80      	cmp	r3, #128	@ 0x80
 800ae8c:	d034      	beq.n	800aef8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	2b40      	cmp	r3, #64	@ 0x40
 800ae92:	d031      	beq.n	800aef8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	69db      	ldr	r3, [r3, #28]
 800ae9a:	f003 0308 	and.w	r3, r3, #8
 800ae9e:	2b08      	cmp	r3, #8
 800aea0:	d110      	bne.n	800aec4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2208      	movs	r2, #8
 800aea8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f000 f8fe 	bl	800b0ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2208      	movs	r2, #8
 800aeb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e029      	b.n	800af18 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	69db      	ldr	r3, [r3, #28]
 800aeca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aece:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aed2:	d111      	bne.n	800aef8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aedc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f000 f8e4 	bl	800b0ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2220      	movs	r2, #32
 800aee8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800aef4:	2303      	movs	r3, #3
 800aef6:	e00f      	b.n	800af18 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	69da      	ldr	r2, [r3, #28]
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	4013      	ands	r3, r2
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	429a      	cmp	r2, r3
 800af06:	bf0c      	ite	eq
 800af08:	2301      	moveq	r3, #1
 800af0a:	2300      	movne	r3, #0
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	461a      	mov	r2, r3
 800af10:	79fb      	ldrb	r3, [r7, #7]
 800af12:	429a      	cmp	r2, r3
 800af14:	d0a0      	beq.n	800ae58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af20:	b480      	push	{r7}
 800af22:	b097      	sub	sp, #92	@ 0x5c
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	4613      	mov	r3, r2
 800af2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	88fa      	ldrh	r2, [r7, #6]
 800af38:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	88fa      	ldrh	r2, [r7, #6]
 800af40:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af52:	d10e      	bne.n	800af72 <UART_Start_Receive_IT+0x52>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d105      	bne.n	800af68 <UART_Start_Receive_IT+0x48>
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800af62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800af66:	e02d      	b.n	800afc4 <UART_Start_Receive_IT+0xa4>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	22ff      	movs	r2, #255	@ 0xff
 800af6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800af70:	e028      	b.n	800afc4 <UART_Start_Receive_IT+0xa4>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d10d      	bne.n	800af96 <UART_Start_Receive_IT+0x76>
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d104      	bne.n	800af8c <UART_Start_Receive_IT+0x6c>
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	22ff      	movs	r2, #255	@ 0xff
 800af86:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800af8a:	e01b      	b.n	800afc4 <UART_Start_Receive_IT+0xa4>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	227f      	movs	r2, #127	@ 0x7f
 800af90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800af94:	e016      	b.n	800afc4 <UART_Start_Receive_IT+0xa4>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af9e:	d10d      	bne.n	800afbc <UART_Start_Receive_IT+0x9c>
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d104      	bne.n	800afb2 <UART_Start_Receive_IT+0x92>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	227f      	movs	r2, #127	@ 0x7f
 800afac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800afb0:	e008      	b.n	800afc4 <UART_Start_Receive_IT+0xa4>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	223f      	movs	r2, #63	@ 0x3f
 800afb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800afba:	e003      	b.n	800afc4 <UART_Start_Receive_IT+0xa4>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2222      	movs	r2, #34	@ 0x22
 800afd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3308      	adds	r3, #8
 800afda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afde:	e853 3f00 	ldrex	r3, [r3]
 800afe2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800afe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe6:	f043 0301 	orr.w	r3, r3, #1
 800afea:	657b      	str	r3, [r7, #84]	@ 0x54
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	3308      	adds	r3, #8
 800aff2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aff4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800aff6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800affa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800affc:	e841 2300 	strex	r3, r2, [r1]
 800b000:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1e5      	bne.n	800afd4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b010:	d107      	bne.n	800b022 <UART_Start_Receive_IT+0x102>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d103      	bne.n	800b022 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	4a21      	ldr	r2, [pc, #132]	@ (800b0a4 <UART_Start_Receive_IT+0x184>)
 800b01e:	669a      	str	r2, [r3, #104]	@ 0x68
 800b020:	e002      	b.n	800b028 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	4a20      	ldr	r2, [pc, #128]	@ (800b0a8 <UART_Start_Receive_IT+0x188>)
 800b026:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d019      	beq.n	800b064 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b038:	e853 3f00 	ldrex	r3, [r3]
 800b03c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b040:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b044:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	461a      	mov	r2, r3
 800b04c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b04e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b050:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b052:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b054:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b056:	e841 2300 	strex	r3, r2, [r1]
 800b05a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1e6      	bne.n	800b030 <UART_Start_Receive_IT+0x110>
 800b062:	e018      	b.n	800b096 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	e853 3f00 	ldrex	r3, [r3]
 800b070:	613b      	str	r3, [r7, #16]
   return(result);
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f043 0320 	orr.w	r3, r3, #32
 800b078:	653b      	str	r3, [r7, #80]	@ 0x50
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	461a      	mov	r2, r3
 800b080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b082:	623b      	str	r3, [r7, #32]
 800b084:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b086:	69f9      	ldr	r1, [r7, #28]
 800b088:	6a3a      	ldr	r2, [r7, #32]
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e6      	bne.n	800b064 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	375c      	adds	r7, #92	@ 0x5c
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr
 800b0a4:	0800b395 	.word	0x0800b395
 800b0a8:	0800b1ed 	.word	0x0800b1ed

0800b0ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b095      	sub	sp, #84	@ 0x54
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0bc:	e853 3f00 	ldrex	r3, [r3]
 800b0c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0da:	e841 2300 	strex	r3, r2, [r1]
 800b0de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1e6      	bne.n	800b0b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3308      	adds	r3, #8
 800b0ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	e853 3f00 	ldrex	r3, [r3]
 800b0f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	f023 0301 	bic.w	r3, r3, #1
 800b0fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3308      	adds	r3, #8
 800b104:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b106:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b108:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b10c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b10e:	e841 2300 	strex	r3, r2, [r1]
 800b112:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1e5      	bne.n	800b0e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d118      	bne.n	800b154 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	e853 3f00 	ldrex	r3, [r3]
 800b12e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	f023 0310 	bic.w	r3, r3, #16
 800b136:	647b      	str	r3, [r7, #68]	@ 0x44
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	461a      	mov	r2, r3
 800b13e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b140:	61bb      	str	r3, [r7, #24]
 800b142:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b144:	6979      	ldr	r1, [r7, #20]
 800b146:	69ba      	ldr	r2, [r7, #24]
 800b148:	e841 2300 	strex	r3, r2, [r1]
 800b14c:	613b      	str	r3, [r7, #16]
   return(result);
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1e6      	bne.n	800b122 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2220      	movs	r2, #32
 800b158:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b168:	bf00      	nop
 800b16a:	3754      	adds	r7, #84	@ 0x54
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f7ff faf4 	bl	800a778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b190:	bf00      	nop
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	e853 3f00 	ldrex	r3, [r3]
 800b1ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1b4:	61fb      	str	r3, [r7, #28]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	61bb      	str	r3, [r7, #24]
 800b1c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	6979      	ldr	r1, [r7, #20]
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e6      	bne.n	800b1a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7ff fab6 	bl	800a750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1e4:	bf00      	nop
 800b1e6:	3720      	adds	r7, #32
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b09c      	sub	sp, #112	@ 0x70
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b204:	2b22      	cmp	r3, #34	@ 0x22
 800b206:	f040 80b9 	bne.w	800b37c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b210:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b214:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b218:	b2d9      	uxtb	r1, r3
 800b21a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b21e:	b2da      	uxtb	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b224:	400a      	ands	r2, r1
 800b226:	b2d2      	uxtb	r2, r2
 800b228:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b22e:	1c5a      	adds	r2, r3, #1
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	3b01      	subs	r3, #1
 800b23e:	b29a      	uxth	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	2b00      	cmp	r3, #0
 800b250:	f040 809c 	bne.w	800b38c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b25c:	e853 3f00 	ldrex	r3, [r3]
 800b260:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b264:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b272:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b274:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b276:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b278:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b27a:	e841 2300 	strex	r3, r2, [r1]
 800b27e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1e6      	bne.n	800b254 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	3308      	adds	r3, #8
 800b28c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b290:	e853 3f00 	ldrex	r3, [r3]
 800b294:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b298:	f023 0301 	bic.w	r3, r3, #1
 800b29c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3308      	adds	r3, #8
 800b2a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b2a6:	647a      	str	r2, [r7, #68]	@ 0x44
 800b2a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b2ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2ae:	e841 2300 	strex	r3, r2, [r1]
 800b2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1e5      	bne.n	800b286 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2220      	movs	r2, #32
 800b2be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d018      	beq.n	800b30e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e4:	e853 3f00 	ldrex	r3, [r3]
 800b2e8:	623b      	str	r3, [r7, #32]
   return(result);
 800b2ea:	6a3b      	ldr	r3, [r7, #32]
 800b2ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b2f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b302:	e841 2300 	strex	r3, r2, [r1]
 800b306:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1e6      	bne.n	800b2dc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b312:	2b01      	cmp	r3, #1
 800b314:	d12e      	bne.n	800b374 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	e853 3f00 	ldrex	r3, [r3]
 800b328:	60fb      	str	r3, [r7, #12]
   return(result);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f023 0310 	bic.w	r3, r3, #16
 800b330:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	461a      	mov	r2, r3
 800b338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b33a:	61fb      	str	r3, [r7, #28]
 800b33c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33e:	69b9      	ldr	r1, [r7, #24]
 800b340:	69fa      	ldr	r2, [r7, #28]
 800b342:	e841 2300 	strex	r3, r2, [r1]
 800b346:	617b      	str	r3, [r7, #20]
   return(result);
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1e6      	bne.n	800b31c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	69db      	ldr	r3, [r3, #28]
 800b354:	f003 0310 	and.w	r3, r3, #16
 800b358:	2b10      	cmp	r3, #16
 800b35a:	d103      	bne.n	800b364 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2210      	movs	r2, #16
 800b362:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b36a:	4619      	mov	r1, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7f7 f8f9 	bl	8002564 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b372:	e00b      	b.n	800b38c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7ff f9f5 	bl	800a764 <HAL_UART_RxCpltCallback>
}
 800b37a:	e007      	b.n	800b38c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	699a      	ldr	r2, [r3, #24]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f042 0208 	orr.w	r2, r2, #8
 800b38a:	619a      	str	r2, [r3, #24]
}
 800b38c:	bf00      	nop
 800b38e:	3770      	adds	r7, #112	@ 0x70
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b09c      	sub	sp, #112	@ 0x70
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b3a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3ac:	2b22      	cmp	r3, #34	@ 0x22
 800b3ae:	f040 80b9 	bne.w	800b524 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3c0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b3c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b3c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b3ca:	4013      	ands	r3, r2
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b3d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3d6:	1c9a      	adds	r2, r3, #2
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f040 809c 	bne.w	800b534 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b404:	e853 3f00 	ldrex	r3, [r3]
 800b408:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b40a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b40c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b410:	667b      	str	r3, [r7, #100]	@ 0x64
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	461a      	mov	r2, r3
 800b418:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b41a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b41c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b420:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b422:	e841 2300 	strex	r3, r2, [r1]
 800b426:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b428:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1e6      	bne.n	800b3fc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3308      	adds	r3, #8
 800b434:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b438:	e853 3f00 	ldrex	r3, [r3]
 800b43c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b440:	f023 0301 	bic.w	r3, r3, #1
 800b444:	663b      	str	r3, [r7, #96]	@ 0x60
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	3308      	adds	r3, #8
 800b44c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b44e:	643a      	str	r2, [r7, #64]	@ 0x40
 800b450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b452:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b454:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b456:	e841 2300 	strex	r3, r2, [r1]
 800b45a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1e5      	bne.n	800b42e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2220      	movs	r2, #32
 800b466:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b480:	2b00      	cmp	r3, #0
 800b482:	d018      	beq.n	800b4b6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	e853 3f00 	ldrex	r3, [r3]
 800b490:	61fb      	str	r3, [r7, #28]
   return(result);
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b498:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4a4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4aa:	e841 2300 	strex	r3, r2, [r1]
 800b4ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1e6      	bne.n	800b484 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d12e      	bne.n	800b51c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	e853 3f00 	ldrex	r3, [r3]
 800b4d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	f023 0310 	bic.w	r3, r3, #16
 800b4d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4e2:	61bb      	str	r3, [r7, #24]
 800b4e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e6:	6979      	ldr	r1, [r7, #20]
 800b4e8:	69ba      	ldr	r2, [r7, #24]
 800b4ea:	e841 2300 	strex	r3, r2, [r1]
 800b4ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1e6      	bne.n	800b4c4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	69db      	ldr	r3, [r3, #28]
 800b4fc:	f003 0310 	and.w	r3, r3, #16
 800b500:	2b10      	cmp	r3, #16
 800b502:	d103      	bne.n	800b50c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2210      	movs	r2, #16
 800b50a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b512:	4619      	mov	r1, r3
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7f7 f825 	bl	8002564 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b51a:	e00b      	b.n	800b534 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7ff f921 	bl	800a764 <HAL_UART_RxCpltCallback>
}
 800b522:	e007      	b.n	800b534 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	699a      	ldr	r2, [r3, #24]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f042 0208 	orr.w	r2, r2, #8
 800b532:	619a      	str	r2, [r3, #24]
}
 800b534:	bf00      	nop
 800b536:	3770      	adds	r7, #112	@ 0x70
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b08c      	sub	sp, #48	@ 0x30
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	4613      	mov	r3, r2
 800b548:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b54a:	2300      	movs	r3, #0
 800b54c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b556:	2b20      	cmp	r3, #32
 800b558:	d13b      	bne.n	800b5d2 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d002      	beq.n	800b566 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800b560:	88fb      	ldrh	r3, [r7, #6]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d101      	bne.n	800b56a <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800b566:	2301      	movs	r3, #1
 800b568:	e034      	b.n	800b5d4 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2201      	movs	r2, #1
 800b56e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800b576:	88fb      	ldrh	r3, [r7, #6]
 800b578:	461a      	mov	r2, r3
 800b57a:	68b9      	ldr	r1, [r7, #8]
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f7ff fccf 	bl	800af20 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b586:	2b01      	cmp	r3, #1
 800b588:	d11d      	bne.n	800b5c6 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2210      	movs	r2, #16
 800b590:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	e853 3f00 	ldrex	r3, [r3]
 800b59e:	617b      	str	r3, [r7, #20]
   return(result);
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	f043 0310 	orr.w	r3, r3, #16
 800b5a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5b2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b4:	6a39      	ldr	r1, [r7, #32]
 800b5b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5b8:	e841 2300 	strex	r3, r2, [r1]
 800b5bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d1e6      	bne.n	800b592 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800b5c4:	e002      	b.n	800b5cc <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800b5cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b5d0:	e000      	b.n	800b5d4 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800b5d2:	2302      	movs	r3, #2
  }
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3730      	adds	r7, #48	@ 0x30
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b5dc:	b084      	sub	sp, #16
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b084      	sub	sp, #16
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	f107 001c 	add.w	r0, r7, #28
 800b5ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b5ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d127      	bne.n	800b646 <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68da      	ldr	r2, [r3, #12]
 800b606:	4b3a      	ldr	r3, [pc, #232]	@ (800b6f0 <USB_CoreInit+0x114>)
 800b608:	4013      	ands	r3, r2
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	f043 0210 	orr.w	r2, r3, #16
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b626:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d105      	bne.n	800b63a <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f001 fb20 	bl	800cc80 <USB_CoreReset>
 800b640:	4603      	mov	r3, r0
 800b642:	73fb      	strb	r3, [r7, #15]
 800b644:	e03c      	b.n	800b6c0 <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800b646:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d127      	bne.n	800b69e <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b652:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	68da      	ldr	r2, [r3, #12]
 800b65e:	4b24      	ldr	r3, [pc, #144]	@ (800b6f0 <USB_CoreInit+0x114>)
 800b660:	4013      	ands	r3, r2
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	f023 0210 	bic.w	r2, r3, #16
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800b67e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b682:	2b01      	cmp	r3, #1
 800b684:	d105      	bne.n	800b692 <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f001 faf4 	bl	800cc80 <USB_CoreReset>
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]
 800b69c:	e010      	b.n	800b6c0 <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f001 fae8 	bl	800cc80 <USB_CoreReset>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800b6c0:	7fbb      	ldrb	r3, [r7, #30]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d10b      	bne.n	800b6de <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	f043 0206 	orr.w	r2, r3, #6
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	f043 0220 	orr.w	r2, r3, #32
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6ea:	b004      	add	sp, #16
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	ffbdffbf 	.word	0xffbdffbf

0800b6f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	4613      	mov	r3, r2
 800b700:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b702:	79fb      	ldrb	r3, [r7, #7]
 800b704:	2b02      	cmp	r3, #2
 800b706:	d165      	bne.n	800b7d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	4a41      	ldr	r2, [pc, #260]	@ (800b810 <USB_SetTurnaroundTime+0x11c>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d906      	bls.n	800b71e <USB_SetTurnaroundTime+0x2a>
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	4a40      	ldr	r2, [pc, #256]	@ (800b814 <USB_SetTurnaroundTime+0x120>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d202      	bcs.n	800b71e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b718:	230f      	movs	r3, #15
 800b71a:	617b      	str	r3, [r7, #20]
 800b71c:	e062      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	4a3c      	ldr	r2, [pc, #240]	@ (800b814 <USB_SetTurnaroundTime+0x120>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d306      	bcc.n	800b734 <USB_SetTurnaroundTime+0x40>
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	4a3b      	ldr	r2, [pc, #236]	@ (800b818 <USB_SetTurnaroundTime+0x124>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d202      	bcs.n	800b734 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b72e:	230e      	movs	r3, #14
 800b730:	617b      	str	r3, [r7, #20]
 800b732:	e057      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	4a38      	ldr	r2, [pc, #224]	@ (800b818 <USB_SetTurnaroundTime+0x124>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d306      	bcc.n	800b74a <USB_SetTurnaroundTime+0x56>
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	4a37      	ldr	r2, [pc, #220]	@ (800b81c <USB_SetTurnaroundTime+0x128>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d202      	bcs.n	800b74a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b744:	230d      	movs	r3, #13
 800b746:	617b      	str	r3, [r7, #20]
 800b748:	e04c      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	4a33      	ldr	r2, [pc, #204]	@ (800b81c <USB_SetTurnaroundTime+0x128>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d306      	bcc.n	800b760 <USB_SetTurnaroundTime+0x6c>
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	4a32      	ldr	r2, [pc, #200]	@ (800b820 <USB_SetTurnaroundTime+0x12c>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d802      	bhi.n	800b760 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b75a:	230c      	movs	r3, #12
 800b75c:	617b      	str	r3, [r7, #20]
 800b75e:	e041      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	4a2f      	ldr	r2, [pc, #188]	@ (800b820 <USB_SetTurnaroundTime+0x12c>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d906      	bls.n	800b776 <USB_SetTurnaroundTime+0x82>
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	4a2e      	ldr	r2, [pc, #184]	@ (800b824 <USB_SetTurnaroundTime+0x130>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d802      	bhi.n	800b776 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b770:	230b      	movs	r3, #11
 800b772:	617b      	str	r3, [r7, #20]
 800b774:	e036      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	4a2a      	ldr	r2, [pc, #168]	@ (800b824 <USB_SetTurnaroundTime+0x130>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d906      	bls.n	800b78c <USB_SetTurnaroundTime+0x98>
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	4a29      	ldr	r2, [pc, #164]	@ (800b828 <USB_SetTurnaroundTime+0x134>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d802      	bhi.n	800b78c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b786:	230a      	movs	r3, #10
 800b788:	617b      	str	r3, [r7, #20]
 800b78a:	e02b      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	4a26      	ldr	r2, [pc, #152]	@ (800b828 <USB_SetTurnaroundTime+0x134>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d906      	bls.n	800b7a2 <USB_SetTurnaroundTime+0xae>
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	4a25      	ldr	r2, [pc, #148]	@ (800b82c <USB_SetTurnaroundTime+0x138>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d202      	bcs.n	800b7a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b79c:	2309      	movs	r3, #9
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	e020      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	4a21      	ldr	r2, [pc, #132]	@ (800b82c <USB_SetTurnaroundTime+0x138>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d306      	bcc.n	800b7b8 <USB_SetTurnaroundTime+0xc4>
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	4a20      	ldr	r2, [pc, #128]	@ (800b830 <USB_SetTurnaroundTime+0x13c>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d802      	bhi.n	800b7b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b7b2:	2308      	movs	r3, #8
 800b7b4:	617b      	str	r3, [r7, #20]
 800b7b6:	e015      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	4a1d      	ldr	r2, [pc, #116]	@ (800b830 <USB_SetTurnaroundTime+0x13c>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d906      	bls.n	800b7ce <USB_SetTurnaroundTime+0xda>
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	4a1c      	ldr	r2, [pc, #112]	@ (800b834 <USB_SetTurnaroundTime+0x140>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d202      	bcs.n	800b7ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b7c8:	2307      	movs	r3, #7
 800b7ca:	617b      	str	r3, [r7, #20]
 800b7cc:	e00a      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b7ce:	2306      	movs	r3, #6
 800b7d0:	617b      	str	r3, [r7, #20]
 800b7d2:	e007      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b7d4:	79fb      	ldrb	r3, [r7, #7]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d102      	bne.n	800b7e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b7da:	2309      	movs	r3, #9
 800b7dc:	617b      	str	r3, [r7, #20]
 800b7de:	e001      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b7e0:	2309      	movs	r3, #9
 800b7e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	68da      	ldr	r2, [r3, #12]
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	029b      	lsls	r3, r3, #10
 800b7f8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b7fc:	431a      	orrs	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	371c      	adds	r7, #28
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr
 800b810:	00d8acbf 	.word	0x00d8acbf
 800b814:	00e4e1c0 	.word	0x00e4e1c0
 800b818:	00f42400 	.word	0x00f42400
 800b81c:	01067380 	.word	0x01067380
 800b820:	011a499f 	.word	0x011a499f
 800b824:	01312cff 	.word	0x01312cff
 800b828:	014ca43f 	.word	0x014ca43f
 800b82c:	016e3600 	.word	0x016e3600
 800b830:	01a6ab1f 	.word	0x01a6ab1f
 800b834:	01e84800 	.word	0x01e84800

0800b838 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	f043 0201 	orr.w	r2, r3, #1
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b85a:	b480      	push	{r7}
 800b85c:	b083      	sub	sp, #12
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	f023 0201 	bic.w	r2, r3, #1
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	460b      	mov	r3, r1
 800b886:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b888:	2300      	movs	r3, #0
 800b88a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b898:	78fb      	ldrb	r3, [r7, #3]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d115      	bne.n	800b8ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b8aa:	200a      	movs	r0, #10
 800b8ac:	f7f8 f93c 	bl	8003b28 <HAL_Delay>
      ms += 10U;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	330a      	adds	r3, #10
 800b8b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f001 f951 	bl	800cb5e <USB_GetMode>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d01e      	beq.n	800b900 <USB_SetCurrentMode+0x84>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2bc7      	cmp	r3, #199	@ 0xc7
 800b8c6:	d9f0      	bls.n	800b8aa <USB_SetCurrentMode+0x2e>
 800b8c8:	e01a      	b.n	800b900 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b8ca:	78fb      	ldrb	r3, [r7, #3]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d115      	bne.n	800b8fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b8dc:	200a      	movs	r0, #10
 800b8de:	f7f8 f923 	bl	8003b28 <HAL_Delay>
      ms += 10U;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	330a      	adds	r3, #10
 800b8e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f001 f938 	bl	800cb5e <USB_GetMode>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d005      	beq.n	800b900 <USB_SetCurrentMode+0x84>
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2bc7      	cmp	r3, #199	@ 0xc7
 800b8f8:	d9f0      	bls.n	800b8dc <USB_SetCurrentMode+0x60>
 800b8fa:	e001      	b.n	800b900 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e005      	b.n	800b90c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2bc8      	cmp	r3, #200	@ 0xc8
 800b904:	d101      	bne.n	800b90a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e000      	b.n	800b90c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b914:	b084      	sub	sp, #16
 800b916:	b580      	push	{r7, lr}
 800b918:	b086      	sub	sp, #24
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b926:	2300      	movs	r3, #0
 800b928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b92e:	2300      	movs	r3, #0
 800b930:	613b      	str	r3, [r7, #16]
 800b932:	e009      	b.n	800b948 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	3340      	adds	r3, #64	@ 0x40
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
 800b93e:	2200      	movs	r2, #0
 800b940:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	3301      	adds	r3, #1
 800b946:	613b      	str	r3, [r7, #16]
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	2b0e      	cmp	r3, #14
 800b94c:	d9f2      	bls.n	800b934 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b94e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b952:	2b00      	cmp	r3, #0
 800b954:	d11c      	bne.n	800b990 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b964:	f043 0302 	orr.w	r3, r3, #2
 800b968:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b96e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	e005      	b.n	800b99c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b994:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d10d      	bne.n	800b9cc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d104      	bne.n	800b9c2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f97a 	bl	800bcb4 <USB_SetDevSpeed>
 800b9c0:	e01a      	b.n	800b9f8 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b9c2:	2101      	movs	r1, #1
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f975 	bl	800bcb4 <USB_SetDevSpeed>
 800b9ca:	e015      	b.n	800b9f8 <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800b9cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b9d0:	2b03      	cmp	r3, #3
 800b9d2:	d10d      	bne.n	800b9f0 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d104      	bne.n	800b9e6 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b9dc:	2100      	movs	r1, #0
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 f968 	bl	800bcb4 <USB_SetDevSpeed>
 800b9e4:	e008      	b.n	800b9f8 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f963 	bl	800bcb4 <USB_SetDevSpeed>
 800b9ee:	e003      	b.n	800b9f8 <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b9f0:	2103      	movs	r1, #3
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f95e 	bl	800bcb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b9f8:	2110      	movs	r1, #16
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f8fa 	bl	800bbf4 <USB_FlushTxFifo>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d001      	beq.n	800ba0a <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f924 	bl	800bc58 <USB_FlushRxFifo>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d001      	beq.n	800ba1a <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba20:	461a      	mov	r2, r3
 800ba22:	2300      	movs	r3, #0
 800ba24:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	2300      	movs	r3, #0
 800ba30:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba38:	461a      	mov	r2, r3
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba3e:	2300      	movs	r3, #0
 800ba40:	613b      	str	r3, [r7, #16]
 800ba42:	e043      	b.n	800bacc <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	015a      	lsls	r2, r3, #5
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba5a:	d118      	bne.n	800ba8e <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d10a      	bne.n	800ba78 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	015a      	lsls	r2, r3, #5
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	4413      	add	r3, r2
 800ba6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba6e:	461a      	mov	r2, r3
 800ba70:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ba74:	6013      	str	r3, [r2, #0]
 800ba76:	e013      	b.n	800baa0 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	015a      	lsls	r2, r3, #5
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	4413      	add	r3, r2
 800ba80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba84:	461a      	mov	r2, r3
 800ba86:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ba8a:	6013      	str	r3, [r2, #0]
 800ba8c:	e008      	b.n	800baa0 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	015a      	lsls	r2, r3, #5
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	4413      	add	r3, r2
 800ba96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	015a      	lsls	r2, r3, #5
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	4413      	add	r3, r2
 800baa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baac:	461a      	mov	r2, r3
 800baae:	2300      	movs	r3, #0
 800bab0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	015a      	lsls	r2, r3, #5
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	4413      	add	r3, r2
 800baba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800babe:	461a      	mov	r2, r3
 800bac0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bac4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	3301      	adds	r3, #1
 800baca:	613b      	str	r3, [r7, #16]
 800bacc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bad0:	461a      	mov	r2, r3
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d3b5      	bcc.n	800ba44 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bad8:	2300      	movs	r3, #0
 800bada:	613b      	str	r3, [r7, #16]
 800badc:	e043      	b.n	800bb66 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	015a      	lsls	r2, r3, #5
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	4413      	add	r3, r2
 800bae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800baf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800baf4:	d118      	bne.n	800bb28 <USB_DevInit+0x214>
    {
      if (i == 0U)
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10a      	bne.n	800bb12 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	015a      	lsls	r2, r3, #5
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	4413      	add	r3, r2
 800bb04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb08:	461a      	mov	r2, r3
 800bb0a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bb0e:	6013      	str	r3, [r2, #0]
 800bb10:	e013      	b.n	800bb3a <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	015a      	lsls	r2, r3, #5
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	4413      	add	r3, r2
 800bb1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb1e:	461a      	mov	r2, r3
 800bb20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bb24:	6013      	str	r3, [r2, #0]
 800bb26:	e008      	b.n	800bb3a <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	015a      	lsls	r2, r3, #5
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	4413      	add	r3, r2
 800bb30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb34:	461a      	mov	r2, r3
 800bb36:	2300      	movs	r3, #0
 800bb38:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	015a      	lsls	r2, r3, #5
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	4413      	add	r3, r2
 800bb42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb46:	461a      	mov	r2, r3
 800bb48:	2300      	movs	r3, #0
 800bb4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	015a      	lsls	r2, r3, #5
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4413      	add	r3, r2
 800bb54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb58:	461a      	mov	r2, r3
 800bb5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bb5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	3301      	adds	r3, #1
 800bb64:	613b      	str	r3, [r7, #16]
 800bb66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d3b5      	bcc.n	800bade <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb84:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bb92:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bb94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d105      	bne.n	800bba8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	699b      	ldr	r3, [r3, #24]
 800bba0:	f043 0210 	orr.w	r2, r3, #16
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	699a      	ldr	r2, [r3, #24]
 800bbac:	4b0f      	ldr	r3, [pc, #60]	@ (800bbec <USB_DevInit+0x2d8>)
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bbb4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d005      	beq.n	800bbc8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	f043 0208 	orr.w	r2, r3, #8
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bbc8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d105      	bne.n	800bbdc <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	699a      	ldr	r2, [r3, #24]
 800bbd4:	4b06      	ldr	r3, [pc, #24]	@ (800bbf0 <USB_DevInit+0x2dc>)
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bbdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbe8:	b004      	add	sp, #16
 800bbea:	4770      	bx	lr
 800bbec:	803c3800 	.word	0x803c3800
 800bbf0:	40000004 	.word	0x40000004

0800bbf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	3301      	adds	r3, #1
 800bc06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc0e:	d901      	bls.n	800bc14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bc10:	2303      	movs	r3, #3
 800bc12:	e01b      	b.n	800bc4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	691b      	ldr	r3, [r3, #16]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	daf2      	bge.n	800bc02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	019b      	lsls	r3, r3, #6
 800bc24:	f043 0220 	orr.w	r2, r3, #32
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc38:	d901      	bls.n	800bc3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bc3a:	2303      	movs	r3, #3
 800bc3c:	e006      	b.n	800bc4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	691b      	ldr	r3, [r3, #16]
 800bc42:	f003 0320 	and.w	r3, r3, #32
 800bc46:	2b20      	cmp	r3, #32
 800bc48:	d0f0      	beq.n	800bc2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3714      	adds	r7, #20
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc60:	2300      	movs	r3, #0
 800bc62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	3301      	adds	r3, #1
 800bc68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc70:	d901      	bls.n	800bc76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bc72:	2303      	movs	r3, #3
 800bc74:	e018      	b.n	800bca8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	daf2      	bge.n	800bc64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2210      	movs	r2, #16
 800bc86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc94:	d901      	bls.n	800bc9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bc96:	2303      	movs	r3, #3
 800bc98:	e006      	b.n	800bca8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	f003 0310 	and.w	r3, r3, #16
 800bca2:	2b10      	cmp	r3, #16
 800bca4:	d0f0      	beq.n	800bc88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3714      	adds	r7, #20
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	78fb      	ldrb	r3, [r7, #3]
 800bcce:	68f9      	ldr	r1, [r7, #12]
 800bcd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3714      	adds	r7, #20
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr

0800bce6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800bce6:	b480      	push	{r7}
 800bce8:	b087      	sub	sp, #28
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	f003 0306 	and.w	r3, r3, #6
 800bcfe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d102      	bne.n	800bd0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bd06:	2300      	movs	r3, #0
 800bd08:	75fb      	strb	r3, [r7, #23]
 800bd0a:	e00a      	b.n	800bd22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	d002      	beq.n	800bd18 <USB_GetDevSpeed+0x32>
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2b06      	cmp	r3, #6
 800bd16:	d102      	bne.n	800bd1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bd18:	2302      	movs	r3, #2
 800bd1a:	75fb      	strb	r3, [r7, #23]
 800bd1c:	e001      	b.n	800bd22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bd1e:	230f      	movs	r3, #15
 800bd20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	371c      	adds	r7, #28
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	785b      	ldrb	r3, [r3, #1]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d139      	bne.n	800bdc0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd52:	69da      	ldr	r2, [r3, #28]
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	f003 030f 	and.w	r3, r3, #15
 800bd5c:	2101      	movs	r1, #1
 800bd5e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	68f9      	ldr	r1, [r7, #12]
 800bd66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	015a      	lsls	r2, r3, #5
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	4413      	add	r3, r2
 800bd76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d153      	bne.n	800be2c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	015a      	lsls	r2, r3, #5
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	791b      	ldrb	r3, [r3, #4]
 800bd9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bda0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	059b      	lsls	r3, r3, #22
 800bda6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bda8:	431a      	orrs	r2, r3
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	0159      	lsls	r1, r3, #5
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	440b      	add	r3, r1
 800bdb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	4b20      	ldr	r3, [pc, #128]	@ (800be3c <USB_ActivateEndpoint+0x10c>)
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	600b      	str	r3, [r1, #0]
 800bdbe:	e035      	b.n	800be2c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdc6:	69da      	ldr	r2, [r3, #28]
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	f003 030f 	and.w	r3, r3, #15
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd6:	041b      	lsls	r3, r3, #16
 800bdd8:	68f9      	ldr	r1, [r7, #12]
 800bdda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bdde:	4313      	orrs	r3, r2
 800bde0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	015a      	lsls	r2, r3, #5
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	4413      	add	r3, r2
 800bdea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d119      	bne.n	800be2c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	015a      	lsls	r2, r3, #5
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	4413      	add	r3, r2
 800be00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	791b      	ldrb	r3, [r3, #4]
 800be12:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be14:	430b      	orrs	r3, r1
 800be16:	431a      	orrs	r2, r3
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	0159      	lsls	r1, r3, #5
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	440b      	add	r3, r1
 800be20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be24:	4619      	mov	r1, r3
 800be26:	4b05      	ldr	r3, [pc, #20]	@ (800be3c <USB_ActivateEndpoint+0x10c>)
 800be28:	4313      	orrs	r3, r2
 800be2a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop
 800be3c:	10008000 	.word	0x10008000

0800be40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	785b      	ldrb	r3, [r3, #1]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d161      	bne.n	800bf20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	015a      	lsls	r2, r3, #5
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4413      	add	r3, r2
 800be64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800be6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be72:	d11f      	bne.n	800beb4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	015a      	lsls	r2, r3, #5
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	4413      	add	r3, r2
 800be7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	68ba      	ldr	r2, [r7, #8]
 800be84:	0151      	lsls	r1, r2, #5
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	440a      	add	r2, r1
 800be8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800be92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	015a      	lsls	r2, r3, #5
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	4413      	add	r3, r2
 800be9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	0151      	lsls	r1, r2, #5
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	440a      	add	r2, r1
 800beaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800beae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800beb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	f003 030f 	and.w	r3, r3, #15
 800bec4:	2101      	movs	r1, #1
 800bec6:	fa01 f303 	lsl.w	r3, r1, r3
 800beca:	b29b      	uxth	r3, r3
 800becc:	43db      	mvns	r3, r3
 800bece:	68f9      	ldr	r1, [r7, #12]
 800bed0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bed4:	4013      	ands	r3, r2
 800bed6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bede:	69da      	ldr	r2, [r3, #28]
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	f003 030f 	and.w	r3, r3, #15
 800bee8:	2101      	movs	r1, #1
 800beea:	fa01 f303 	lsl.w	r3, r1, r3
 800beee:	b29b      	uxth	r3, r3
 800bef0:	43db      	mvns	r3, r3
 800bef2:	68f9      	ldr	r1, [r7, #12]
 800bef4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bef8:	4013      	ands	r3, r2
 800befa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	015a      	lsls	r2, r3, #5
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	4413      	add	r3, r2
 800bf04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	0159      	lsls	r1, r3, #5
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	440b      	add	r3, r1
 800bf12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf16:	4619      	mov	r1, r3
 800bf18:	4b35      	ldr	r3, [pc, #212]	@ (800bff0 <USB_DeactivateEndpoint+0x1b0>)
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	600b      	str	r3, [r1, #0]
 800bf1e:	e060      	b.n	800bfe2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	015a      	lsls	r2, r3, #5
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	4413      	add	r3, r2
 800bf28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf36:	d11f      	bne.n	800bf78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	015a      	lsls	r2, r3, #5
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	4413      	add	r3, r2
 800bf40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	0151      	lsls	r1, r2, #5
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	440a      	add	r2, r1
 800bf4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bf56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	015a      	lsls	r2, r3, #5
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	4413      	add	r3, r2
 800bf60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	68ba      	ldr	r2, [r7, #8]
 800bf68:	0151      	lsls	r1, r2, #5
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	440a      	add	r2, r1
 800bf6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bf76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	f003 030f 	and.w	r3, r3, #15
 800bf88:	2101      	movs	r1, #1
 800bf8a:	fa01 f303 	lsl.w	r3, r1, r3
 800bf8e:	041b      	lsls	r3, r3, #16
 800bf90:	43db      	mvns	r3, r3
 800bf92:	68f9      	ldr	r1, [r7, #12]
 800bf94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf98:	4013      	ands	r3, r2
 800bf9a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfa2:	69da      	ldr	r2, [r3, #28]
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	f003 030f 	and.w	r3, r3, #15
 800bfac:	2101      	movs	r1, #1
 800bfae:	fa01 f303 	lsl.w	r3, r1, r3
 800bfb2:	041b      	lsls	r3, r3, #16
 800bfb4:	43db      	mvns	r3, r3
 800bfb6:	68f9      	ldr	r1, [r7, #12]
 800bfb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bfbc:	4013      	ands	r3, r2
 800bfbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	015a      	lsls	r2, r3, #5
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	0159      	lsls	r1, r3, #5
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	440b      	add	r3, r1
 800bfd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfda:	4619      	mov	r1, r3
 800bfdc:	4b05      	ldr	r3, [pc, #20]	@ (800bff4 <USB_DeactivateEndpoint+0x1b4>)
 800bfde:	4013      	ands	r3, r2
 800bfe0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3714      	adds	r7, #20
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr
 800bff0:	ec337800 	.word	0xec337800
 800bff4:	eff37800 	.word	0xeff37800

0800bff8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b08a      	sub	sp, #40	@ 0x28
 800bffc:	af02      	add	r7, sp, #8
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	4613      	mov	r3, r2
 800c004:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	785b      	ldrb	r3, [r3, #1]
 800c014:	2b01      	cmp	r3, #1
 800c016:	f040 8185 	bne.w	800c324 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d132      	bne.n	800c088 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	015a      	lsls	r2, r3, #5
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	4413      	add	r3, r2
 800c02a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c02e:	691a      	ldr	r2, [r3, #16]
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	0159      	lsls	r1, r3, #5
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	440b      	add	r3, r1
 800c038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c03c:	4619      	mov	r1, r3
 800c03e:	4ba7      	ldr	r3, [pc, #668]	@ (800c2dc <USB_EPStartXfer+0x2e4>)
 800c040:	4013      	ands	r3, r2
 800c042:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	015a      	lsls	r2, r3, #5
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	4413      	add	r3, r2
 800c04c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	69ba      	ldr	r2, [r7, #24]
 800c054:	0151      	lsls	r1, r2, #5
 800c056:	69fa      	ldr	r2, [r7, #28]
 800c058:	440a      	add	r2, r1
 800c05a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c05e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	015a      	lsls	r2, r3, #5
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	4413      	add	r3, r2
 800c06c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c070:	691a      	ldr	r2, [r3, #16]
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	0159      	lsls	r1, r3, #5
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	440b      	add	r3, r1
 800c07a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c07e:	4619      	mov	r1, r3
 800c080:	4b97      	ldr	r3, [pc, #604]	@ (800c2e0 <USB_EPStartXfer+0x2e8>)
 800c082:	4013      	ands	r3, r2
 800c084:	610b      	str	r3, [r1, #16]
 800c086:	e097      	b.n	800c1b8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	015a      	lsls	r2, r3, #5
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	4413      	add	r3, r2
 800c090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c094:	691a      	ldr	r2, [r3, #16]
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	0159      	lsls	r1, r3, #5
 800c09a:	69fb      	ldr	r3, [r7, #28]
 800c09c:	440b      	add	r3, r1
 800c09e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	4b8e      	ldr	r3, [pc, #568]	@ (800c2e0 <USB_EPStartXfer+0x2e8>)
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	015a      	lsls	r2, r3, #5
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0b6:	691a      	ldr	r2, [r3, #16]
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	0159      	lsls	r1, r3, #5
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	440b      	add	r3, r1
 800c0c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4b85      	ldr	r3, [pc, #532]	@ (800c2dc <USB_EPStartXfer+0x2e4>)
 800c0c8:	4013      	ands	r3, r2
 800c0ca:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d11a      	bne.n	800c108 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	691a      	ldr	r2, [r3, #16]
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d903      	bls.n	800c0e6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	689a      	ldr	r2, [r3, #8]
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	015a      	lsls	r2, r3, #5
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0f2:	691b      	ldr	r3, [r3, #16]
 800c0f4:	69ba      	ldr	r2, [r7, #24]
 800c0f6:	0151      	lsls	r1, r2, #5
 800c0f8:	69fa      	ldr	r2, [r7, #28]
 800c0fa:	440a      	add	r2, r1
 800c0fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c100:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c104:	6113      	str	r3, [r2, #16]
 800c106:	e044      	b.n	800c192 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	691a      	ldr	r2, [r3, #16]
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	4413      	add	r3, r2
 800c112:	1e5a      	subs	r2, r3, #1
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	fbb2 f3f3 	udiv	r3, r2, r3
 800c11c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	015a      	lsls	r2, r3, #5
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	4413      	add	r3, r2
 800c126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c12a:	691a      	ldr	r2, [r3, #16]
 800c12c:	8afb      	ldrh	r3, [r7, #22]
 800c12e:	04d9      	lsls	r1, r3, #19
 800c130:	4b6c      	ldr	r3, [pc, #432]	@ (800c2e4 <USB_EPStartXfer+0x2ec>)
 800c132:	400b      	ands	r3, r1
 800c134:	69b9      	ldr	r1, [r7, #24]
 800c136:	0148      	lsls	r0, r1, #5
 800c138:	69f9      	ldr	r1, [r7, #28]
 800c13a:	4401      	add	r1, r0
 800c13c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c140:	4313      	orrs	r3, r2
 800c142:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	791b      	ldrb	r3, [r3, #4]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d122      	bne.n	800c192 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	015a      	lsls	r2, r3, #5
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	4413      	add	r3, r2
 800c154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	69ba      	ldr	r2, [r7, #24]
 800c15c:	0151      	lsls	r1, r2, #5
 800c15e:	69fa      	ldr	r2, [r7, #28]
 800c160:	440a      	add	r2, r1
 800c162:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c166:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c16a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	015a      	lsls	r2, r3, #5
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	4413      	add	r3, r2
 800c174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c178:	691a      	ldr	r2, [r3, #16]
 800c17a:	8afb      	ldrh	r3, [r7, #22]
 800c17c:	075b      	lsls	r3, r3, #29
 800c17e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800c182:	69b9      	ldr	r1, [r7, #24]
 800c184:	0148      	lsls	r0, r1, #5
 800c186:	69f9      	ldr	r1, [r7, #28]
 800c188:	4401      	add	r1, r0
 800c18a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c18e:	4313      	orrs	r3, r2
 800c190:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	015a      	lsls	r2, r3, #5
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	4413      	add	r3, r2
 800c19a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c19e:	691a      	ldr	r2, [r3, #16]
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	691b      	ldr	r3, [r3, #16]
 800c1a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1a8:	69b9      	ldr	r1, [r7, #24]
 800c1aa:	0148      	lsls	r0, r1, #5
 800c1ac:	69f9      	ldr	r1, [r7, #28]
 800c1ae:	4401      	add	r1, r0
 800c1b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c1b8:	79fb      	ldrb	r3, [r7, #7]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d14b      	bne.n	800c256 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	69db      	ldr	r3, [r3, #28]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d009      	beq.n	800c1da <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	015a      	lsls	r2, r3, #5
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	69db      	ldr	r3, [r3, #28]
 800c1d8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	791b      	ldrb	r3, [r3, #4]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d128      	bne.n	800c234 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d110      	bne.n	800c214 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	015a      	lsls	r2, r3, #5
 800c1f6:	69fb      	ldr	r3, [r7, #28]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	69ba      	ldr	r2, [r7, #24]
 800c202:	0151      	lsls	r1, r2, #5
 800c204:	69fa      	ldr	r2, [r7, #28]
 800c206:	440a      	add	r2, r1
 800c208:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c20c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c210:	6013      	str	r3, [r2, #0]
 800c212:	e00f      	b.n	800c234 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	015a      	lsls	r2, r3, #5
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	4413      	add	r3, r2
 800c21c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	69ba      	ldr	r2, [r7, #24]
 800c224:	0151      	lsls	r1, r2, #5
 800c226:	69fa      	ldr	r2, [r7, #28]
 800c228:	440a      	add	r2, r1
 800c22a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c22e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c232:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	015a      	lsls	r2, r3, #5
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	4413      	add	r3, r2
 800c23c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	69ba      	ldr	r2, [r7, #24]
 800c244:	0151      	lsls	r1, r2, #5
 800c246:	69fa      	ldr	r2, [r7, #28]
 800c248:	440a      	add	r2, r1
 800c24a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c24e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c252:	6013      	str	r3, [r2, #0]
 800c254:	e169      	b.n	800c52a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	015a      	lsls	r2, r3, #5
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	69ba      	ldr	r2, [r7, #24]
 800c266:	0151      	lsls	r1, r2, #5
 800c268:	69fa      	ldr	r2, [r7, #28]
 800c26a:	440a      	add	r2, r1
 800c26c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c270:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c274:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	791b      	ldrb	r3, [r3, #4]
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d015      	beq.n	800c2aa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	691b      	ldr	r3, [r3, #16]
 800c282:	2b00      	cmp	r3, #0
 800c284:	f000 8151 	beq.w	800c52a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c28e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	f003 030f 	and.w	r3, r3, #15
 800c298:	2101      	movs	r1, #1
 800c29a:	fa01 f303 	lsl.w	r3, r1, r3
 800c29e:	69f9      	ldr	r1, [r7, #28]
 800c2a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	634b      	str	r3, [r1, #52]	@ 0x34
 800c2a8:	e13f      	b.n	800c52a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d116      	bne.n	800c2e8 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	015a      	lsls	r2, r3, #5
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	69ba      	ldr	r2, [r7, #24]
 800c2ca:	0151      	lsls	r1, r2, #5
 800c2cc:	69fa      	ldr	r2, [r7, #28]
 800c2ce:	440a      	add	r2, r1
 800c2d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c2d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c2d8:	6013      	str	r3, [r2, #0]
 800c2da:	e015      	b.n	800c308 <USB_EPStartXfer+0x310>
 800c2dc:	e007ffff 	.word	0xe007ffff
 800c2e0:	fff80000 	.word	0xfff80000
 800c2e4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	015a      	lsls	r2, r3, #5
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	69ba      	ldr	r2, [r7, #24]
 800c2f8:	0151      	lsls	r1, r2, #5
 800c2fa:	69fa      	ldr	r2, [r7, #28]
 800c2fc:	440a      	add	r2, r1
 800c2fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c306:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	68d9      	ldr	r1, [r3, #12]
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	781a      	ldrb	r2, [r3, #0]
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	691b      	ldr	r3, [r3, #16]
 800c314:	b298      	uxth	r0, r3
 800c316:	79fb      	ldrb	r3, [r7, #7]
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	4603      	mov	r3, r0
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f000 f9b9 	bl	800c694 <USB_WritePacket>
 800c322:	e102      	b.n	800c52a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	015a      	lsls	r2, r3, #5
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	4413      	add	r3, r2
 800c32c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c330:	691a      	ldr	r2, [r3, #16]
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	0159      	lsls	r1, r3, #5
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	440b      	add	r3, r1
 800c33a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c33e:	4619      	mov	r1, r3
 800c340:	4b7c      	ldr	r3, [pc, #496]	@ (800c534 <USB_EPStartXfer+0x53c>)
 800c342:	4013      	ands	r3, r2
 800c344:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	015a      	lsls	r2, r3, #5
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	4413      	add	r3, r2
 800c34e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c352:	691a      	ldr	r2, [r3, #16]
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	0159      	lsls	r1, r3, #5
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	440b      	add	r3, r1
 800c35c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c360:	4619      	mov	r1, r3
 800c362:	4b75      	ldr	r3, [pc, #468]	@ (800c538 <USB_EPStartXfer+0x540>)
 800c364:	4013      	ands	r3, r2
 800c366:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d12f      	bne.n	800c3ce <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	691b      	ldr	r3, [r3, #16]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d003      	beq.n	800c37e <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	689a      	ldr	r2, [r3, #8]
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	689a      	ldr	r2, [r3, #8]
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	015a      	lsls	r2, r3, #5
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	4413      	add	r3, r2
 800c38e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c392:	691a      	ldr	r2, [r3, #16]
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	6a1b      	ldr	r3, [r3, #32]
 800c398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c39c:	69b9      	ldr	r1, [r7, #24]
 800c39e:	0148      	lsls	r0, r1, #5
 800c3a0:	69f9      	ldr	r1, [r7, #28]
 800c3a2:	4401      	add	r1, r0
 800c3a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	015a      	lsls	r2, r3, #5
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	69ba      	ldr	r2, [r7, #24]
 800c3bc:	0151      	lsls	r1, r2, #5
 800c3be:	69fa      	ldr	r2, [r7, #28]
 800c3c0:	440a      	add	r2, r1
 800c3c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c3ca:	6113      	str	r3, [r2, #16]
 800c3cc:	e05f      	b.n	800c48e <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	691b      	ldr	r3, [r3, #16]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d123      	bne.n	800c41e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	015a      	lsls	r2, r3, #5
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	4413      	add	r3, r2
 800c3de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3e2:	691a      	ldr	r2, [r3, #16]
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3ec:	69b9      	ldr	r1, [r7, #24]
 800c3ee:	0148      	lsls	r0, r1, #5
 800c3f0:	69f9      	ldr	r1, [r7, #28]
 800c3f2:	4401      	add	r1, r0
 800c3f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	015a      	lsls	r2, r3, #5
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	4413      	add	r3, r2
 800c404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	69ba      	ldr	r2, [r7, #24]
 800c40c:	0151      	lsls	r1, r2, #5
 800c40e:	69fa      	ldr	r2, [r7, #28]
 800c410:	440a      	add	r2, r1
 800c412:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c416:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c41a:	6113      	str	r3, [r2, #16]
 800c41c:	e037      	b.n	800c48e <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	691a      	ldr	r2, [r3, #16]
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	4413      	add	r3, r2
 800c428:	1e5a      	subs	r2, r3, #1
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c432:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	8afa      	ldrh	r2, [r7, #22]
 800c43a:	fb03 f202 	mul.w	r2, r3, r2
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	015a      	lsls	r2, r3, #5
 800c446:	69fb      	ldr	r3, [r7, #28]
 800c448:	4413      	add	r3, r2
 800c44a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c44e:	691a      	ldr	r2, [r3, #16]
 800c450:	8afb      	ldrh	r3, [r7, #22]
 800c452:	04d9      	lsls	r1, r3, #19
 800c454:	4b39      	ldr	r3, [pc, #228]	@ (800c53c <USB_EPStartXfer+0x544>)
 800c456:	400b      	ands	r3, r1
 800c458:	69b9      	ldr	r1, [r7, #24]
 800c45a:	0148      	lsls	r0, r1, #5
 800c45c:	69f9      	ldr	r1, [r7, #28]
 800c45e:	4401      	add	r1, r0
 800c460:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c464:	4313      	orrs	r3, r2
 800c466:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	015a      	lsls	r2, r3, #5
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	4413      	add	r3, r2
 800c470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c474:	691a      	ldr	r2, [r3, #16]
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	6a1b      	ldr	r3, [r3, #32]
 800c47a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c47e:	69b9      	ldr	r1, [r7, #24]
 800c480:	0148      	lsls	r0, r1, #5
 800c482:	69f9      	ldr	r1, [r7, #28]
 800c484:	4401      	add	r1, r0
 800c486:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c48a:	4313      	orrs	r3, r2
 800c48c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c48e:	79fb      	ldrb	r3, [r7, #7]
 800c490:	2b01      	cmp	r3, #1
 800c492:	d10d      	bne.n	800c4b0 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d009      	beq.n	800c4b0 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	68d9      	ldr	r1, [r3, #12]
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	015a      	lsls	r2, r3, #5
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	4413      	add	r3, r2
 800c4a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ac:	460a      	mov	r2, r1
 800c4ae:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	791b      	ldrb	r3, [r3, #4]
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d128      	bne.n	800c50a <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d110      	bne.n	800c4ea <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	015a      	lsls	r2, r3, #5
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	69ba      	ldr	r2, [r7, #24]
 800c4d8:	0151      	lsls	r1, r2, #5
 800c4da:	69fa      	ldr	r2, [r7, #28]
 800c4dc:	440a      	add	r2, r1
 800c4de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c4e6:	6013      	str	r3, [r2, #0]
 800c4e8:	e00f      	b.n	800c50a <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	015a      	lsls	r2, r3, #5
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	69ba      	ldr	r2, [r7, #24]
 800c4fa:	0151      	lsls	r1, r2, #5
 800c4fc:	69fa      	ldr	r2, [r7, #28]
 800c4fe:	440a      	add	r2, r1
 800c500:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c508:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	015a      	lsls	r2, r3, #5
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	4413      	add	r3, r2
 800c512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	69ba      	ldr	r2, [r7, #24]
 800c51a:	0151      	lsls	r1, r2, #5
 800c51c:	69fa      	ldr	r2, [r7, #28]
 800c51e:	440a      	add	r2, r1
 800c520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c524:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c528:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3720      	adds	r7, #32
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	fff80000 	.word	0xfff80000
 800c538:	e007ffff 	.word	0xe007ffff
 800c53c:	1ff80000 	.word	0x1ff80000

0800c540 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c540:	b480      	push	{r7}
 800c542:	b087      	sub	sp, #28
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c54a:	2300      	movs	r3, #0
 800c54c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c54e:	2300      	movs	r3, #0
 800c550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	785b      	ldrb	r3, [r3, #1]
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d14a      	bne.n	800c5f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	015a      	lsls	r2, r3, #5
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	4413      	add	r3, r2
 800c568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c572:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c576:	f040 8086 	bne.w	800c686 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	015a      	lsls	r2, r3, #5
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	4413      	add	r3, r2
 800c584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	7812      	ldrb	r2, [r2, #0]
 800c58e:	0151      	lsls	r1, r2, #5
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	440a      	add	r2, r1
 800c594:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c598:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c59c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	015a      	lsls	r2, r3, #5
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	683a      	ldr	r2, [r7, #0]
 800c5b0:	7812      	ldrb	r2, [r2, #0]
 800c5b2:	0151      	lsls	r1, r2, #5
 800c5b4:	693a      	ldr	r2, [r7, #16]
 800c5b6:	440a      	add	r2, r1
 800c5b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c5c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d902      	bls.n	800c5d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	75fb      	strb	r3, [r7, #23]
          break;
 800c5d6:	e056      	b.n	800c686 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	015a      	lsls	r2, r3, #5
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c5ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5f0:	d0e7      	beq.n	800c5c2 <USB_EPStopXfer+0x82>
 800c5f2:	e048      	b.n	800c686 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	015a      	lsls	r2, r3, #5
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c608:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c60c:	d13b      	bne.n	800c686 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	015a      	lsls	r2, r3, #5
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	4413      	add	r3, r2
 800c618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	7812      	ldrb	r2, [r2, #0]
 800c622:	0151      	lsls	r1, r2, #5
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	440a      	add	r2, r1
 800c628:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c62c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c630:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	015a      	lsls	r2, r3, #5
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	4413      	add	r3, r2
 800c63c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	683a      	ldr	r2, [r7, #0]
 800c644:	7812      	ldrb	r2, [r2, #0]
 800c646:	0151      	lsls	r1, r2, #5
 800c648:	693a      	ldr	r2, [r7, #16]
 800c64a:	440a      	add	r2, r1
 800c64c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c650:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c654:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	3301      	adds	r3, #1
 800c65a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c662:	4293      	cmp	r3, r2
 800c664:	d902      	bls.n	800c66c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c666:	2301      	movs	r3, #1
 800c668:	75fb      	strb	r3, [r7, #23]
          break;
 800c66a:	e00c      	b.n	800c686 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	015a      	lsls	r2, r3, #5
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	4413      	add	r3, r2
 800c676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c680:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c684:	d0e7      	beq.n	800c656 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c686:	7dfb      	ldrb	r3, [r7, #23]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	371c      	adds	r7, #28
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c694:	b480      	push	{r7}
 800c696:	b089      	sub	sp, #36	@ 0x24
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	4611      	mov	r1, r2
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	71fb      	strb	r3, [r7, #7]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c6b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d123      	bne.n	800c702 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c6ba:	88bb      	ldrh	r3, [r7, #4]
 800c6bc:	3303      	adds	r3, #3
 800c6be:	089b      	lsrs	r3, r3, #2
 800c6c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	61bb      	str	r3, [r7, #24]
 800c6c6:	e018      	b.n	800c6fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c6c8:	79fb      	ldrb	r3, [r7, #7]
 800c6ca:	031a      	lsls	r2, r3, #12
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	61bb      	str	r3, [r7, #24]
 800c6fa:	69ba      	ldr	r2, [r7, #24]
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d3e2      	bcc.n	800c6c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c702:	2300      	movs	r3, #0
}
 800c704:	4618      	mov	r0, r3
 800c706:	3724      	adds	r7, #36	@ 0x24
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c710:	b480      	push	{r7}
 800c712:	b08b      	sub	sp, #44	@ 0x2c
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	4613      	mov	r3, r2
 800c71c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c726:	88fb      	ldrh	r3, [r7, #6]
 800c728:	089b      	lsrs	r3, r3, #2
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c72e:	88fb      	ldrh	r3, [r7, #6]
 800c730:	f003 0303 	and.w	r3, r3, #3
 800c734:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c736:	2300      	movs	r3, #0
 800c738:	623b      	str	r3, [r7, #32]
 800c73a:	e014      	b.n	800c766 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c746:	601a      	str	r2, [r3, #0]
    pDest++;
 800c748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74a:	3301      	adds	r3, #1
 800c74c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c750:	3301      	adds	r3, #1
 800c752:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c756:	3301      	adds	r3, #1
 800c758:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75c:	3301      	adds	r3, #1
 800c75e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	3301      	adds	r3, #1
 800c764:	623b      	str	r3, [r7, #32]
 800c766:	6a3a      	ldr	r2, [r7, #32]
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d3e6      	bcc.n	800c73c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c76e:	8bfb      	ldrh	r3, [r7, #30]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d01e      	beq.n	800c7b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c774:	2300      	movs	r3, #0
 800c776:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c77e:	461a      	mov	r2, r3
 800c780:	f107 0310 	add.w	r3, r7, #16
 800c784:	6812      	ldr	r2, [r2, #0]
 800c786:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c788:	693a      	ldr	r2, [r7, #16]
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	00db      	lsls	r3, r3, #3
 800c790:	fa22 f303 	lsr.w	r3, r2, r3
 800c794:	b2da      	uxtb	r2, r3
 800c796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c798:	701a      	strb	r2, [r3, #0]
      i++;
 800c79a:	6a3b      	ldr	r3, [r7, #32]
 800c79c:	3301      	adds	r3, #1
 800c79e:	623b      	str	r3, [r7, #32]
      pDest++;
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c7a6:	8bfb      	ldrh	r3, [r7, #30]
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c7ac:	8bfb      	ldrh	r3, [r7, #30]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d1ea      	bne.n	800c788 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	372c      	adds	r7, #44	@ 0x2c
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	785b      	ldrb	r3, [r3, #1]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d12c      	bne.n	800c836 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	015a      	lsls	r2, r3, #5
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	db12      	blt.n	800c814 <USB_EPSetStall+0x54>
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d00f      	beq.n	800c814 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	015a      	lsls	r2, r3, #5
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	0151      	lsls	r1, r2, #5
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	440a      	add	r2, r1
 800c80a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c80e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c812:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	015a      	lsls	r2, r3, #5
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	4413      	add	r3, r2
 800c81c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68ba      	ldr	r2, [r7, #8]
 800c824:	0151      	lsls	r1, r2, #5
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	440a      	add	r2, r1
 800c82a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c82e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c832:	6013      	str	r3, [r2, #0]
 800c834:	e02b      	b.n	800c88e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	015a      	lsls	r2, r3, #5
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	4413      	add	r3, r2
 800c83e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	db12      	blt.n	800c86e <USB_EPSetStall+0xae>
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00f      	beq.n	800c86e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	015a      	lsls	r2, r3, #5
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	4413      	add	r3, r2
 800c856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	68ba      	ldr	r2, [r7, #8]
 800c85e:	0151      	lsls	r1, r2, #5
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	440a      	add	r2, r1
 800c864:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c868:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c86c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	015a      	lsls	r2, r3, #5
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	4413      	add	r3, r2
 800c876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68ba      	ldr	r2, [r7, #8]
 800c87e:	0151      	lsls	r1, r2, #5
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	440a      	add	r2, r1
 800c884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c888:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c88c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	4618      	mov	r0, r3
 800c892:	3714      	adds	r7, #20
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	785b      	ldrb	r3, [r3, #1]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d128      	bne.n	800c90a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	015a      	lsls	r2, r3, #5
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	4413      	add	r3, r2
 800c8c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	68ba      	ldr	r2, [r7, #8]
 800c8c8:	0151      	lsls	r1, r2, #5
 800c8ca:	68fa      	ldr	r2, [r7, #12]
 800c8cc:	440a      	add	r2, r1
 800c8ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c8d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c8d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	791b      	ldrb	r3, [r3, #4]
 800c8dc:	2b03      	cmp	r3, #3
 800c8de:	d003      	beq.n	800c8e8 <USB_EPClearStall+0x4c>
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	791b      	ldrb	r3, [r3, #4]
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d138      	bne.n	800c95a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	015a      	lsls	r2, r3, #5
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	0151      	lsls	r1, r2, #5
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	440a      	add	r2, r1
 800c8fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c906:	6013      	str	r3, [r2, #0]
 800c908:	e027      	b.n	800c95a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	015a      	lsls	r2, r3, #5
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	4413      	add	r3, r2
 800c912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	0151      	lsls	r1, r2, #5
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	440a      	add	r2, r1
 800c920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c924:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c928:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	791b      	ldrb	r3, [r3, #4]
 800c92e:	2b03      	cmp	r3, #3
 800c930:	d003      	beq.n	800c93a <USB_EPClearStall+0x9e>
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	791b      	ldrb	r3, [r3, #4]
 800c936:	2b02      	cmp	r3, #2
 800c938:	d10f      	bne.n	800c95a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	015a      	lsls	r2, r3, #5
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	4413      	add	r3, r2
 800c942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	0151      	lsls	r1, r2, #5
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	440a      	add	r2, r1
 800c950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c958:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3714      	adds	r7, #20
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	460b      	mov	r3, r1
 800c972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c986:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c98a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	78fb      	ldrb	r3, [r7, #3]
 800c996:	011b      	lsls	r3, r3, #4
 800c998:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c99c:	68f9      	ldr	r1, [r7, #12]
 800c99e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c9a6:	2300      	movs	r3, #0
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3714      	adds	r7, #20
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c9ce:	f023 0303 	bic.w	r3, r3, #3
 800c9d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c9e2:	f023 0302 	bic.w	r3, r3, #2
 800c9e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3714      	adds	r7, #20
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c9f6:	b480      	push	{r7}
 800c9f8:	b085      	sub	sp, #20
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ca10:	f023 0303 	bic.w	r3, r3, #3
 800ca14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	68fa      	ldr	r2, [r7, #12]
 800ca20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca24:	f043 0302 	orr.w	r3, r3, #2
 800ca28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3714      	adds	r7, #20
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	695b      	ldr	r3, [r3, #20]
 800ca44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	699b      	ldr	r3, [r3, #24]
 800ca4a:	68fa      	ldr	r2, [r7, #12]
 800ca4c:	4013      	ands	r3, r2
 800ca4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca50:	68fb      	ldr	r3, [r7, #12]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3714      	adds	r7, #20
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr

0800ca5e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca5e:	b480      	push	{r7}
 800ca60:	b085      	sub	sp, #20
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca70:	699b      	ldr	r3, [r3, #24]
 800ca72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca7a:	69db      	ldr	r3, [r3, #28]
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	4013      	ands	r3, r2
 800ca80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	0c1b      	lsrs	r3, r3, #16
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3714      	adds	r7, #20
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca92:	b480      	push	{r7}
 800ca94:	b085      	sub	sp, #20
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caae:	69db      	ldr	r3, [r3, #28]
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	4013      	ands	r3, r2
 800cab4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	b29b      	uxth	r3, r3
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3714      	adds	r7, #20
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr

0800cac6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cac6:	b480      	push	{r7}
 800cac8:	b085      	sub	sp, #20
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
 800cace:	460b      	mov	r3, r1
 800cad0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cad6:	78fb      	ldrb	r3, [r7, #3]
 800cad8:	015a      	lsls	r2, r3, #5
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	4413      	add	r3, r2
 800cade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caec:	695b      	ldr	r3, [r3, #20]
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	4013      	ands	r3, r2
 800caf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800caf4:	68bb      	ldr	r3, [r7, #8]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cb02:	b480      	push	{r7}
 800cb04:	b087      	sub	sp, #28
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb24:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cb26:	78fb      	ldrb	r3, [r7, #3]
 800cb28:	f003 030f 	and.w	r3, r3, #15
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb32:	01db      	lsls	r3, r3, #7
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	693a      	ldr	r2, [r7, #16]
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cb3c:	78fb      	ldrb	r3, [r7, #3]
 800cb3e:	015a      	lsls	r2, r3, #5
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	4413      	add	r3, r2
 800cb44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	693a      	ldr	r2, [r7, #16]
 800cb4c:	4013      	ands	r3, r2
 800cb4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb50:	68bb      	ldr	r3, [r7, #8]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	371c      	adds	r7, #28
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr

0800cb5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb5e:	b480      	push	{r7}
 800cb60:	b083      	sub	sp, #12
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	695b      	ldr	r3, [r3, #20]
 800cb6a:	f003 0301 	and.w	r3, r3, #1
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	370c      	adds	r7, #12
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr
	...

0800cb7c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b085      	sub	sp, #20
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb96:	4619      	mov	r1, r3
 800cb98:	4b09      	ldr	r3, [pc, #36]	@ (800cbc0 <USB_ActivateSetup+0x44>)
 800cb9a:	4013      	ands	r3, r2
 800cb9c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	68fa      	ldr	r2, [r7, #12]
 800cba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cbac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cbb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3714      	adds	r7, #20
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr
 800cbc0:	fffff800 	.word	0xfffff800

0800cbc4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b087      	sub	sp, #28
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	460b      	mov	r3, r1
 800cbce:	607a      	str	r2, [r7, #4]
 800cbd0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	333c      	adds	r3, #60	@ 0x3c
 800cbda:	3304      	adds	r3, #4
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	4a26      	ldr	r2, [pc, #152]	@ (800cc7c <USB_EP0_OutStart+0xb8>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d90a      	bls.n	800cbfe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cbf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cbf8:	d101      	bne.n	800cbfe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	e037      	b.n	800cc6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc04:	461a      	mov	r2, r3
 800cc06:	2300      	movs	r3, #0
 800cc08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc10:	691b      	ldr	r3, [r3, #16]
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cc1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc24:	691b      	ldr	r3, [r3, #16]
 800cc26:	697a      	ldr	r2, [r7, #20]
 800cc28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc2c:	f043 0318 	orr.w	r3, r3, #24
 800cc30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc38:	691b      	ldr	r3, [r3, #16]
 800cc3a:	697a      	ldr	r2, [r7, #20]
 800cc3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc40:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800cc44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cc46:	7afb      	ldrb	r3, [r7, #11]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d10f      	bne.n	800cc6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc52:	461a      	mov	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	697a      	ldr	r2, [r7, #20]
 800cc62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc66:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800cc6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	371c      	adds	r7, #28
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	4f54300a 	.word	0x4f54300a

0800cc80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b085      	sub	sp, #20
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	3301      	adds	r3, #1
 800cc90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cc98:	d901      	bls.n	800cc9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	e022      	b.n	800cce4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	691b      	ldr	r3, [r3, #16]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	daf2      	bge.n	800cc8c <USB_CoreReset+0xc>

  count = 10U;
 800cca6:	230a      	movs	r3, #10
 800cca8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800ccaa:	e002      	b.n	800ccb2 <USB_CoreReset+0x32>
  {
    count--;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1f9      	bne.n	800ccac <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	f043 0201 	orr.w	r2, r3, #1
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ccd0:	d901      	bls.n	800ccd6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	e006      	b.n	800cce4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	f003 0301 	and.w	r3, r3, #1
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d0f0      	beq.n	800ccc4 <USB_CoreReset+0x44>

  return HAL_OK;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ccfc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800cd00:	f002 fd34 	bl	800f76c <malloc>
 800cd04:	4603      	mov	r3, r0
 800cd06:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d109      	bne.n	800cd22 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	32b0      	adds	r2, #176	@ 0xb0
 800cd18:	2100      	movs	r1, #0
 800cd1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cd1e:	2302      	movs	r3, #2
 800cd20:	e0d4      	b.n	800cecc <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cd22:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800cd26:	2100      	movs	r1, #0
 800cd28:	68f8      	ldr	r0, [r7, #12]
 800cd2a:	f003 fb38 	bl	801039e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	32b0      	adds	r2, #176	@ 0xb0
 800cd38:	68f9      	ldr	r1, [r7, #12]
 800cd3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	32b0      	adds	r2, #176	@ 0xb0
 800cd48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	7c1b      	ldrb	r3, [r3, #16]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d138      	bne.n	800cdcc <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cd5a:	4b5e      	ldr	r3, [pc, #376]	@ (800ced4 <USBD_CDC_Init+0x1e4>)
 800cd5c:	7819      	ldrb	r1, [r3, #0]
 800cd5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cd62:	2202      	movs	r2, #2
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f002 fb5e 	bl	800f426 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cd6a:	4b5a      	ldr	r3, [pc, #360]	@ (800ced4 <USBD_CDC_Init+0x1e4>)
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	f003 020f 	and.w	r2, r3, #15
 800cd72:	6879      	ldr	r1, [r7, #4]
 800cd74:	4613      	mov	r3, r2
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	4413      	add	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	440b      	add	r3, r1
 800cd7e:	3323      	adds	r3, #35	@ 0x23
 800cd80:	2201      	movs	r2, #1
 800cd82:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cd84:	4b54      	ldr	r3, [pc, #336]	@ (800ced8 <USBD_CDC_Init+0x1e8>)
 800cd86:	7819      	ldrb	r1, [r3, #0]
 800cd88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cd8c:	2202      	movs	r2, #2
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f002 fb49 	bl	800f426 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cd94:	4b50      	ldr	r3, [pc, #320]	@ (800ced8 <USBD_CDC_Init+0x1e8>)
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	f003 020f 	and.w	r2, r3, #15
 800cd9c:	6879      	ldr	r1, [r7, #4]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	4413      	add	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	440b      	add	r3, r1
 800cda8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cdac:	2201      	movs	r2, #1
 800cdae:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cdb0:	4b4a      	ldr	r3, [pc, #296]	@ (800cedc <USBD_CDC_Init+0x1ec>)
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	f003 020f 	and.w	r2, r3, #15
 800cdb8:	6879      	ldr	r1, [r7, #4]
 800cdba:	4613      	mov	r3, r2
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	4413      	add	r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	440b      	add	r3, r1
 800cdc4:	331c      	adds	r3, #28
 800cdc6:	2210      	movs	r2, #16
 800cdc8:	601a      	str	r2, [r3, #0]
 800cdca:	e035      	b.n	800ce38 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cdcc:	4b41      	ldr	r3, [pc, #260]	@ (800ced4 <USBD_CDC_Init+0x1e4>)
 800cdce:	7819      	ldrb	r1, [r3, #0]
 800cdd0:	2340      	movs	r3, #64	@ 0x40
 800cdd2:	2202      	movs	r2, #2
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f002 fb26 	bl	800f426 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cdda:	4b3e      	ldr	r3, [pc, #248]	@ (800ced4 <USBD_CDC_Init+0x1e4>)
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	f003 020f 	and.w	r2, r3, #15
 800cde2:	6879      	ldr	r1, [r7, #4]
 800cde4:	4613      	mov	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	4413      	add	r3, r2
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	440b      	add	r3, r1
 800cdee:	3323      	adds	r3, #35	@ 0x23
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cdf4:	4b38      	ldr	r3, [pc, #224]	@ (800ced8 <USBD_CDC_Init+0x1e8>)
 800cdf6:	7819      	ldrb	r1, [r3, #0]
 800cdf8:	2340      	movs	r3, #64	@ 0x40
 800cdfa:	2202      	movs	r2, #2
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f002 fb12 	bl	800f426 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ce02:	4b35      	ldr	r3, [pc, #212]	@ (800ced8 <USBD_CDC_Init+0x1e8>)
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	f003 020f 	and.w	r2, r3, #15
 800ce0a:	6879      	ldr	r1, [r7, #4]
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	4413      	add	r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	440b      	add	r3, r1
 800ce16:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ce1e:	4b2f      	ldr	r3, [pc, #188]	@ (800cedc <USBD_CDC_Init+0x1ec>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	f003 020f 	and.w	r2, r3, #15
 800ce26:	6879      	ldr	r1, [r7, #4]
 800ce28:	4613      	mov	r3, r2
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	4413      	add	r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	440b      	add	r3, r1
 800ce32:	331c      	adds	r3, #28
 800ce34:	2210      	movs	r2, #16
 800ce36:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ce38:	4b28      	ldr	r3, [pc, #160]	@ (800cedc <USBD_CDC_Init+0x1ec>)
 800ce3a:	7819      	ldrb	r1, [r3, #0]
 800ce3c:	2308      	movs	r3, #8
 800ce3e:	2203      	movs	r2, #3
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f002 faf0 	bl	800f426 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ce46:	4b25      	ldr	r3, [pc, #148]	@ (800cedc <USBD_CDC_Init+0x1ec>)
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	f003 020f 	and.w	r2, r3, #15
 800ce4e:	6879      	ldr	r1, [r7, #4]
 800ce50:	4613      	mov	r3, r2
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	4413      	add	r3, r2
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	440b      	add	r3, r1
 800ce5a:	3323      	adds	r3, #35	@ 0x23
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	33b0      	adds	r3, #176	@ 0xb0
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	4413      	add	r3, r2
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d101      	bne.n	800ce9a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800ce96:	2302      	movs	r3, #2
 800ce98:	e018      	b.n	800cecc <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	7c1b      	ldrb	r3, [r3, #16]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d10a      	bne.n	800ceb8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cea2:	4b0d      	ldr	r3, [pc, #52]	@ (800ced8 <USBD_CDC_Init+0x1e8>)
 800cea4:	7819      	ldrb	r1, [r3, #0]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ceac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f002 fba7 	bl	800f604 <USBD_LL_PrepareReceive>
 800ceb6:	e008      	b.n	800ceca <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ceb8:	4b07      	ldr	r3, [pc, #28]	@ (800ced8 <USBD_CDC_Init+0x1e8>)
 800ceba:	7819      	ldrb	r1, [r3, #0]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cec2:	2340      	movs	r3, #64	@ 0x40
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f002 fb9d 	bl	800f604 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	20000093 	.word	0x20000093
 800ced8:	20000094 	.word	0x20000094
 800cedc:	20000095 	.word	0x20000095

0800cee0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	460b      	mov	r3, r1
 800ceea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ceec:	4b3a      	ldr	r3, [pc, #232]	@ (800cfd8 <USBD_CDC_DeInit+0xf8>)
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	4619      	mov	r1, r3
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f002 fabd 	bl	800f472 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cef8:	4b37      	ldr	r3, [pc, #220]	@ (800cfd8 <USBD_CDC_DeInit+0xf8>)
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	f003 020f 	and.w	r2, r3, #15
 800cf00:	6879      	ldr	r1, [r7, #4]
 800cf02:	4613      	mov	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	440b      	add	r3, r1
 800cf0c:	3323      	adds	r3, #35	@ 0x23
 800cf0e:	2200      	movs	r2, #0
 800cf10:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cf12:	4b32      	ldr	r3, [pc, #200]	@ (800cfdc <USBD_CDC_DeInit+0xfc>)
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	4619      	mov	r1, r3
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f002 faaa 	bl	800f472 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cf1e:	4b2f      	ldr	r3, [pc, #188]	@ (800cfdc <USBD_CDC_DeInit+0xfc>)
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	f003 020f 	and.w	r2, r3, #15
 800cf26:	6879      	ldr	r1, [r7, #4]
 800cf28:	4613      	mov	r3, r2
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	4413      	add	r3, r2
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	440b      	add	r3, r1
 800cf32:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cf36:	2200      	movs	r2, #0
 800cf38:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cf3a:	4b29      	ldr	r3, [pc, #164]	@ (800cfe0 <USBD_CDC_DeInit+0x100>)
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f002 fa96 	bl	800f472 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cf46:	4b26      	ldr	r3, [pc, #152]	@ (800cfe0 <USBD_CDC_DeInit+0x100>)
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	f003 020f 	and.w	r2, r3, #15
 800cf4e:	6879      	ldr	r1, [r7, #4]
 800cf50:	4613      	mov	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4413      	add	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	440b      	add	r3, r1
 800cf5a:	3323      	adds	r3, #35	@ 0x23
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cf60:	4b1f      	ldr	r3, [pc, #124]	@ (800cfe0 <USBD_CDC_DeInit+0x100>)
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	f003 020f 	and.w	r2, r3, #15
 800cf68:	6879      	ldr	r1, [r7, #4]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	4413      	add	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	440b      	add	r3, r1
 800cf74:	331c      	adds	r3, #28
 800cf76:	2200      	movs	r2, #0
 800cf78:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	32b0      	adds	r2, #176	@ 0xb0
 800cf84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d01f      	beq.n	800cfcc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	33b0      	adds	r3, #176	@ 0xb0
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	4413      	add	r3, r2
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	32b0      	adds	r2, #176	@ 0xb0
 800cfaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f002 fbe4 	bl	800f77c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	32b0      	adds	r2, #176	@ 0xb0
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	20000093 	.word	0x20000093
 800cfdc:	20000094 	.word	0x20000094
 800cfe0:	20000095 	.word	0x20000095

0800cfe4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	32b0      	adds	r2, #176	@ 0xb0
 800cff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cffc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cffe:	2300      	movs	r3, #0
 800d000:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d002:	2300      	movs	r3, #0
 800d004:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d006:	2300      	movs	r3, #0
 800d008:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d101      	bne.n	800d014 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d010:	2303      	movs	r3, #3
 800d012:	e0bf      	b.n	800d194 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d050      	beq.n	800d0c2 <USBD_CDC_Setup+0xde>
 800d020:	2b20      	cmp	r3, #32
 800d022:	f040 80af 	bne.w	800d184 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	88db      	ldrh	r3, [r3, #6]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d03a      	beq.n	800d0a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	b25b      	sxtb	r3, r3
 800d034:	2b00      	cmp	r3, #0
 800d036:	da1b      	bge.n	800d070 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	33b0      	adds	r3, #176	@ 0xb0
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	4413      	add	r3, r2
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	683a      	ldr	r2, [r7, #0]
 800d04c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d04e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d050:	683a      	ldr	r2, [r7, #0]
 800d052:	88d2      	ldrh	r2, [r2, #6]
 800d054:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	88db      	ldrh	r3, [r3, #6]
 800d05a:	2b07      	cmp	r3, #7
 800d05c:	bf28      	it	cs
 800d05e:	2307      	movcs	r3, #7
 800d060:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	89fa      	ldrh	r2, [r7, #14]
 800d066:	4619      	mov	r1, r3
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f001 fd93 	bl	800eb94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d06e:	e090      	b.n	800d192 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	785a      	ldrb	r2, [r3, #1]
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	88db      	ldrh	r3, [r3, #6]
 800d07e:	2b3f      	cmp	r3, #63	@ 0x3f
 800d080:	d803      	bhi.n	800d08a <USBD_CDC_Setup+0xa6>
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	88db      	ldrh	r3, [r3, #6]
 800d086:	b2da      	uxtb	r2, r3
 800d088:	e000      	b.n	800d08c <USBD_CDC_Setup+0xa8>
 800d08a:	2240      	movs	r2, #64	@ 0x40
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d092:	6939      	ldr	r1, [r7, #16]
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d09a:	461a      	mov	r2, r3
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f001 fda8 	bl	800ebf2 <USBD_CtlPrepareRx>
      break;
 800d0a2:	e076      	b.n	800d192 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	33b0      	adds	r3, #176	@ 0xb0
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	4413      	add	r3, r2
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	683a      	ldr	r2, [r7, #0]
 800d0b8:	7850      	ldrb	r0, [r2, #1]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	6839      	ldr	r1, [r7, #0]
 800d0be:	4798      	blx	r3
      break;
 800d0c0:	e067      	b.n	800d192 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	785b      	ldrb	r3, [r3, #1]
 800d0c6:	2b0b      	cmp	r3, #11
 800d0c8:	d851      	bhi.n	800d16e <USBD_CDC_Setup+0x18a>
 800d0ca:	a201      	add	r2, pc, #4	@ (adr r2, 800d0d0 <USBD_CDC_Setup+0xec>)
 800d0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d0:	0800d101 	.word	0x0800d101
 800d0d4:	0800d17d 	.word	0x0800d17d
 800d0d8:	0800d16f 	.word	0x0800d16f
 800d0dc:	0800d16f 	.word	0x0800d16f
 800d0e0:	0800d16f 	.word	0x0800d16f
 800d0e4:	0800d16f 	.word	0x0800d16f
 800d0e8:	0800d16f 	.word	0x0800d16f
 800d0ec:	0800d16f 	.word	0x0800d16f
 800d0f0:	0800d16f 	.word	0x0800d16f
 800d0f4:	0800d16f 	.word	0x0800d16f
 800d0f8:	0800d12b 	.word	0x0800d12b
 800d0fc:	0800d155 	.word	0x0800d155
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d106:	b2db      	uxtb	r3, r3
 800d108:	2b03      	cmp	r3, #3
 800d10a:	d107      	bne.n	800d11c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d10c:	f107 030a 	add.w	r3, r7, #10
 800d110:	2202      	movs	r2, #2
 800d112:	4619      	mov	r1, r3
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f001 fd3d 	bl	800eb94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d11a:	e032      	b.n	800d182 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d11c:	6839      	ldr	r1, [r7, #0]
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f001 fcbb 	bl	800ea9a <USBD_CtlError>
            ret = USBD_FAIL;
 800d124:	2303      	movs	r3, #3
 800d126:	75fb      	strb	r3, [r7, #23]
          break;
 800d128:	e02b      	b.n	800d182 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d130:	b2db      	uxtb	r3, r3
 800d132:	2b03      	cmp	r3, #3
 800d134:	d107      	bne.n	800d146 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d136:	f107 030d 	add.w	r3, r7, #13
 800d13a:	2201      	movs	r2, #1
 800d13c:	4619      	mov	r1, r3
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f001 fd28 	bl	800eb94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d144:	e01d      	b.n	800d182 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d146:	6839      	ldr	r1, [r7, #0]
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f001 fca6 	bl	800ea9a <USBD_CtlError>
            ret = USBD_FAIL;
 800d14e:	2303      	movs	r3, #3
 800d150:	75fb      	strb	r3, [r7, #23]
          break;
 800d152:	e016      	b.n	800d182 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	2b03      	cmp	r3, #3
 800d15e:	d00f      	beq.n	800d180 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d160:	6839      	ldr	r1, [r7, #0]
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f001 fc99 	bl	800ea9a <USBD_CtlError>
            ret = USBD_FAIL;
 800d168:	2303      	movs	r3, #3
 800d16a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d16c:	e008      	b.n	800d180 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d16e:	6839      	ldr	r1, [r7, #0]
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f001 fc92 	bl	800ea9a <USBD_CtlError>
          ret = USBD_FAIL;
 800d176:	2303      	movs	r3, #3
 800d178:	75fb      	strb	r3, [r7, #23]
          break;
 800d17a:	e002      	b.n	800d182 <USBD_CDC_Setup+0x19e>
          break;
 800d17c:	bf00      	nop
 800d17e:	e008      	b.n	800d192 <USBD_CDC_Setup+0x1ae>
          break;
 800d180:	bf00      	nop
      }
      break;
 800d182:	e006      	b.n	800d192 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d184:	6839      	ldr	r1, [r7, #0]
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f001 fc87 	bl	800ea9a <USBD_CtlError>
      ret = USBD_FAIL;
 800d18c:	2303      	movs	r3, #3
 800d18e:	75fb      	strb	r3, [r7, #23]
      break;
 800d190:	bf00      	nop
  }

  return (uint8_t)ret;
 800d192:	7dfb      	ldrb	r3, [r7, #23]
}
 800d194:	4618      	mov	r0, r3
 800d196:	3718      	adds	r7, #24
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	32b0      	adds	r2, #176	@ 0xb0
 800d1ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d101      	bne.n	800d1c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d1c2:	2303      	movs	r3, #3
 800d1c4:	e065      	b.n	800d292 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	32b0      	adds	r2, #176	@ 0xb0
 800d1d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d1d6:	78fb      	ldrb	r3, [r7, #3]
 800d1d8:	f003 020f 	and.w	r2, r3, #15
 800d1dc:	6879      	ldr	r1, [r7, #4]
 800d1de:	4613      	mov	r3, r2
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	4413      	add	r3, r2
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	440b      	add	r3, r1
 800d1e8:	3314      	adds	r3, #20
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d02f      	beq.n	800d250 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d1f0:	78fb      	ldrb	r3, [r7, #3]
 800d1f2:	f003 020f 	and.w	r2, r3, #15
 800d1f6:	6879      	ldr	r1, [r7, #4]
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	4413      	add	r3, r2
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	440b      	add	r3, r1
 800d202:	3314      	adds	r3, #20
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	78fb      	ldrb	r3, [r7, #3]
 800d208:	f003 010f 	and.w	r1, r3, #15
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	460b      	mov	r3, r1
 800d210:	00db      	lsls	r3, r3, #3
 800d212:	440b      	add	r3, r1
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	4403      	add	r3, r0
 800d218:	331c      	adds	r3, #28
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d220:	fb01 f303 	mul.w	r3, r1, r3
 800d224:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d226:	2b00      	cmp	r3, #0
 800d228:	d112      	bne.n	800d250 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d22a:	78fb      	ldrb	r3, [r7, #3]
 800d22c:	f003 020f 	and.w	r2, r3, #15
 800d230:	6879      	ldr	r1, [r7, #4]
 800d232:	4613      	mov	r3, r2
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	4413      	add	r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	440b      	add	r3, r1
 800d23c:	3314      	adds	r3, #20
 800d23e:	2200      	movs	r2, #0
 800d240:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d242:	78f9      	ldrb	r1, [r7, #3]
 800d244:	2300      	movs	r3, #0
 800d246:	2200      	movs	r2, #0
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f002 f9ba 	bl	800f5c2 <USBD_LL_Transmit>
 800d24e:	e01f      	b.n	800d290 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	2200      	movs	r2, #0
 800d254:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	33b0      	adds	r3, #176	@ 0xb0
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	4413      	add	r3, r2
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d010      	beq.n	800d290 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	33b0      	adds	r3, #176	@ 0xb0
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	4413      	add	r3, r2
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	691b      	ldr	r3, [r3, #16]
 800d280:	68ba      	ldr	r2, [r7, #8]
 800d282:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d286:	68ba      	ldr	r2, [r7, #8]
 800d288:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d28c:	78fa      	ldrb	r2, [r7, #3]
 800d28e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	3710      	adds	r7, #16
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}

0800d29a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b084      	sub	sp, #16
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	32b0      	adds	r2, #176	@ 0xb0
 800d2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	32b0      	adds	r2, #176	@ 0xb0
 800d2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d101      	bne.n	800d2cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d2c8:	2303      	movs	r3, #3
 800d2ca:	e01a      	b.n	800d302 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d2cc:	78fb      	ldrb	r3, [r7, #3]
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f002 f9b8 	bl	800f646 <USBD_LL_GetRxDataSize>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	33b0      	adds	r3, #176	@ 0xb0
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	4413      	add	r3, r2
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	68fa      	ldr	r2, [r7, #12]
 800d2f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d2fc:	4611      	mov	r1, r2
 800d2fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d300:	2300      	movs	r3, #0
}
 800d302:	4618      	mov	r0, r3
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d30a:	b580      	push	{r7, lr}
 800d30c:	b084      	sub	sp, #16
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	32b0      	adds	r2, #176	@ 0xb0
 800d31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d320:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d101      	bne.n	800d32c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d328:	2303      	movs	r3, #3
 800d32a:	e024      	b.n	800d376 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	33b0      	adds	r3, #176	@ 0xb0
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4413      	add	r3, r2
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d019      	beq.n	800d374 <USBD_CDC_EP0_RxReady+0x6a>
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d346:	2bff      	cmp	r3, #255	@ 0xff
 800d348:	d014      	beq.n	800d374 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	33b0      	adds	r3, #176	@ 0xb0
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	4413      	add	r3, r2
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	68fa      	ldr	r2, [r7, #12]
 800d35e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d362:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d364:	68fa      	ldr	r2, [r7, #12]
 800d366:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d36a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	22ff      	movs	r2, #255	@ 0xff
 800d370:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	3710      	adds	r7, #16
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
	...

0800d380 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b086      	sub	sp, #24
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d388:	2182      	movs	r1, #130	@ 0x82
 800d38a:	4818      	ldr	r0, [pc, #96]	@ (800d3ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d38c:	f000 fd22 	bl	800ddd4 <USBD_GetEpDesc>
 800d390:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d392:	2101      	movs	r1, #1
 800d394:	4815      	ldr	r0, [pc, #84]	@ (800d3ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d396:	f000 fd1d 	bl	800ddd4 <USBD_GetEpDesc>
 800d39a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d39c:	2181      	movs	r1, #129	@ 0x81
 800d39e:	4813      	ldr	r0, [pc, #76]	@ (800d3ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3a0:	f000 fd18 	bl	800ddd4 <USBD_GetEpDesc>
 800d3a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	2210      	movs	r2, #16
 800d3b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d006      	beq.n	800d3c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d3c0:	711a      	strb	r2, [r3, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d006      	beq.n	800d3da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d3d4:	711a      	strb	r2, [r3, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2243      	movs	r2, #67	@ 0x43
 800d3de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d3e0:	4b02      	ldr	r3, [pc, #8]	@ (800d3ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3718      	adds	r7, #24
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	20000050 	.word	0x20000050

0800d3f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b086      	sub	sp, #24
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d3f8:	2182      	movs	r1, #130	@ 0x82
 800d3fa:	4818      	ldr	r0, [pc, #96]	@ (800d45c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d3fc:	f000 fcea 	bl	800ddd4 <USBD_GetEpDesc>
 800d400:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d402:	2101      	movs	r1, #1
 800d404:	4815      	ldr	r0, [pc, #84]	@ (800d45c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d406:	f000 fce5 	bl	800ddd4 <USBD_GetEpDesc>
 800d40a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d40c:	2181      	movs	r1, #129	@ 0x81
 800d40e:	4813      	ldr	r0, [pc, #76]	@ (800d45c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d410:	f000 fce0 	bl	800ddd4 <USBD_GetEpDesc>
 800d414:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d002      	beq.n	800d422 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	2210      	movs	r2, #16
 800d420:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d006      	beq.n	800d436 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	2200      	movs	r2, #0
 800d42c:	711a      	strb	r2, [r3, #4]
 800d42e:	2200      	movs	r2, #0
 800d430:	f042 0202 	orr.w	r2, r2, #2
 800d434:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d006      	beq.n	800d44a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2200      	movs	r2, #0
 800d440:	711a      	strb	r2, [r3, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	f042 0202 	orr.w	r2, r2, #2
 800d448:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2243      	movs	r2, #67	@ 0x43
 800d44e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d450:	4b02      	ldr	r3, [pc, #8]	@ (800d45c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d452:	4618      	mov	r0, r3
 800d454:	3718      	adds	r7, #24
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	20000050 	.word	0x20000050

0800d460 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d468:	2182      	movs	r1, #130	@ 0x82
 800d46a:	4818      	ldr	r0, [pc, #96]	@ (800d4cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d46c:	f000 fcb2 	bl	800ddd4 <USBD_GetEpDesc>
 800d470:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d472:	2101      	movs	r1, #1
 800d474:	4815      	ldr	r0, [pc, #84]	@ (800d4cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d476:	f000 fcad 	bl	800ddd4 <USBD_GetEpDesc>
 800d47a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d47c:	2181      	movs	r1, #129	@ 0x81
 800d47e:	4813      	ldr	r0, [pc, #76]	@ (800d4cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d480:	f000 fca8 	bl	800ddd4 <USBD_GetEpDesc>
 800d484:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d002      	beq.n	800d492 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	2210      	movs	r2, #16
 800d490:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d006      	beq.n	800d4a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	2200      	movs	r2, #0
 800d49c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4a0:	711a      	strb	r2, [r3, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d006      	beq.n	800d4ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4b4:	711a      	strb	r2, [r3, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2243      	movs	r2, #67	@ 0x43
 800d4be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d4c0:	4b02      	ldr	r3, [pc, #8]	@ (800d4cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3718      	adds	r7, #24
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	20000050 	.word	0x20000050

0800d4d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	220a      	movs	r2, #10
 800d4dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d4de:	4b03      	ldr	r3, [pc, #12]	@ (800d4ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	2000000c 	.word	0x2000000c

0800d4f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d101      	bne.n	800d504 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d500:	2303      	movs	r3, #3
 800d502:	e009      	b.n	800d518 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	33b0      	adds	r3, #176	@ 0xb0
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	4413      	add	r3, r2
 800d512:	683a      	ldr	r2, [r7, #0]
 800d514:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d516:	2300      	movs	r3, #0
}
 800d518:	4618      	mov	r0, r3
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d524:	b480      	push	{r7}
 800d526:	b087      	sub	sp, #28
 800d528:	af00      	add	r7, sp, #0
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	32b0      	adds	r2, #176	@ 0xb0
 800d53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d53e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d101      	bne.n	800d54a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d546:	2303      	movs	r3, #3
 800d548:	e008      	b.n	800d55c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	68ba      	ldr	r2, [r7, #8]
 800d54e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d55a:	2300      	movs	r3, #0
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	371c      	adds	r7, #28
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr

0800d568 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d568:	b480      	push	{r7}
 800d56a:	b085      	sub	sp, #20
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	32b0      	adds	r2, #176	@ 0xb0
 800d57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d580:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d101      	bne.n	800d58c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d588:	2303      	movs	r3, #3
 800d58a:	e004      	b.n	800d596 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3714      	adds	r7, #20
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
	...

0800d5a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	32b0      	adds	r2, #176	@ 0xb0
 800d5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	32b0      	adds	r2, #176	@ 0xb0
 800d5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d101      	bne.n	800d5d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d5ce:	2303      	movs	r3, #3
 800d5d0:	e018      	b.n	800d604 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	7c1b      	ldrb	r3, [r3, #16]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d10a      	bne.n	800d5f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d5da:	4b0c      	ldr	r3, [pc, #48]	@ (800d60c <USBD_CDC_ReceivePacket+0x68>)
 800d5dc:	7819      	ldrb	r1, [r3, #0]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d5e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f002 f80b 	bl	800f604 <USBD_LL_PrepareReceive>
 800d5ee:	e008      	b.n	800d602 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d5f0:	4b06      	ldr	r3, [pc, #24]	@ (800d60c <USBD_CDC_ReceivePacket+0x68>)
 800d5f2:	7819      	ldrb	r1, [r3, #0]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d5fa:	2340      	movs	r3, #64	@ 0x40
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f002 f801 	bl	800f604 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d602:	2300      	movs	r3, #0
}
 800d604:	4618      	mov	r0, r3
 800d606:	3710      	adds	r7, #16
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	20000094 	.word	0x20000094

0800d610 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b086      	sub	sp, #24
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	4613      	mov	r3, r2
 800d61c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d101      	bne.n	800d628 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d624:	2303      	movs	r3, #3
 800d626:	e01f      	b.n	800d668 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2200      	movs	r2, #0
 800d634:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2200      	movs	r2, #0
 800d63c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d003      	beq.n	800d64e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	68ba      	ldr	r2, [r7, #8]
 800d64a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2201      	movs	r2, #1
 800d652:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	79fa      	ldrb	r2, [r7, #7]
 800d65a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f001 fe77 	bl	800f350 <USBD_LL_Init>
 800d662:	4603      	mov	r3, r0
 800d664:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d666:	7dfb      	ldrb	r3, [r7, #23]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3718      	adds	r7, #24
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d67a:	2300      	movs	r3, #0
 800d67c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d101      	bne.n	800d688 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d684:	2303      	movs	r3, #3
 800d686:	e025      	b.n	800d6d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	683a      	ldr	r2, [r7, #0]
 800d68c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	32ae      	adds	r2, #174	@ 0xae
 800d69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00f      	beq.n	800d6c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	32ae      	adds	r2, #174	@ 0xae
 800d6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6b4:	f107 020e 	add.w	r2, r7, #14
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	4798      	blx	r3
 800d6bc:	4602      	mov	r2, r0
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d6ca:	1c5a      	adds	r2, r3, #1
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f001 fe83 	bl	800f3f0 <USBD_LL_Start>
 800d6ea:	4603      	mov	r3, r0
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d6fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	370c      	adds	r7, #12
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr

0800d70a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b084      	sub	sp, #16
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
 800d712:	460b      	mov	r3, r1
 800d714:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d716:	2300      	movs	r3, #0
 800d718:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d720:	2b00      	cmp	r3, #0
 800d722:	d009      	beq.n	800d738 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	78fa      	ldrb	r2, [r7, #3]
 800d72e:	4611      	mov	r1, r2
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	4798      	blx	r3
 800d734:	4603      	mov	r3, r0
 800d736:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d738:	7bfb      	ldrb	r3, [r7, #15]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b084      	sub	sp, #16
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
 800d74a:	460b      	mov	r3, r1
 800d74c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d74e:	2300      	movs	r3, #0
 800d750:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	78fa      	ldrb	r2, [r7, #3]
 800d75c:	4611      	mov	r1, r2
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	4798      	blx	r3
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d001      	beq.n	800d76c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d768:	2303      	movs	r3, #3
 800d76a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b084      	sub	sp, #16
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
 800d77e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d786:	6839      	ldr	r1, [r7, #0]
 800d788:	4618      	mov	r0, r3
 800d78a:	f001 f94c 	bl	800ea26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2201      	movs	r2, #1
 800d792:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d79c:	461a      	mov	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d7aa:	f003 031f 	and.w	r3, r3, #31
 800d7ae:	2b02      	cmp	r3, #2
 800d7b0:	d01a      	beq.n	800d7e8 <USBD_LL_SetupStage+0x72>
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	d822      	bhi.n	800d7fc <USBD_LL_SetupStage+0x86>
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d002      	beq.n	800d7c0 <USBD_LL_SetupStage+0x4a>
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d00a      	beq.n	800d7d4 <USBD_LL_SetupStage+0x5e>
 800d7be:	e01d      	b.n	800d7fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 fb77 	bl	800debc <USBD_StdDevReq>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	73fb      	strb	r3, [r7, #15]
      break;
 800d7d2:	e020      	b.n	800d816 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d7da:	4619      	mov	r1, r3
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 fbdf 	bl	800dfa0 <USBD_StdItfReq>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	73fb      	strb	r3, [r7, #15]
      break;
 800d7e6:	e016      	b.n	800d816 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 fc41 	bl	800e078 <USBD_StdEPReq>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	73fb      	strb	r3, [r7, #15]
      break;
 800d7fa:	e00c      	b.n	800d816 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d802:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d806:	b2db      	uxtb	r3, r3
 800d808:	4619      	mov	r1, r3
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f001 fe50 	bl	800f4b0 <USBD_LL_StallEP>
 800d810:	4603      	mov	r3, r0
 800d812:	73fb      	strb	r3, [r7, #15]
      break;
 800d814:	bf00      	nop
  }

  return ret;
 800d816:	7bfb      	ldrb	r3, [r7, #15]
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b086      	sub	sp, #24
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	460b      	mov	r3, r1
 800d82a:	607a      	str	r2, [r7, #4]
 800d82c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d82e:	2300      	movs	r3, #0
 800d830:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800d832:	7afb      	ldrb	r3, [r7, #11]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d177      	bne.n	800d928 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d83e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d846:	2b03      	cmp	r3, #3
 800d848:	f040 80a1 	bne.w	800d98e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	693a      	ldr	r2, [r7, #16]
 800d852:	8992      	ldrh	r2, [r2, #12]
 800d854:	4293      	cmp	r3, r2
 800d856:	d91c      	bls.n	800d892 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	685b      	ldr	r3, [r3, #4]
 800d85c:	693a      	ldr	r2, [r7, #16]
 800d85e:	8992      	ldrh	r2, [r2, #12]
 800d860:	1a9a      	subs	r2, r3, r2
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	693a      	ldr	r2, [r7, #16]
 800d86c:	8992      	ldrh	r2, [r2, #12]
 800d86e:	441a      	add	r2, r3
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	6919      	ldr	r1, [r3, #16]
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	899b      	ldrh	r3, [r3, #12]
 800d87c:	461a      	mov	r2, r3
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	4293      	cmp	r3, r2
 800d884:	bf38      	it	cc
 800d886:	4613      	movcc	r3, r2
 800d888:	461a      	mov	r2, r3
 800d88a:	68f8      	ldr	r0, [r7, #12]
 800d88c:	f001 f9d2 	bl	800ec34 <USBD_CtlContinueRx>
 800d890:	e07d      	b.n	800d98e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d898:	f003 031f 	and.w	r3, r3, #31
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	d014      	beq.n	800d8ca <USBD_LL_DataOutStage+0xaa>
 800d8a0:	2b02      	cmp	r3, #2
 800d8a2:	d81d      	bhi.n	800d8e0 <USBD_LL_DataOutStage+0xc0>
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d002      	beq.n	800d8ae <USBD_LL_DataOutStage+0x8e>
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d003      	beq.n	800d8b4 <USBD_LL_DataOutStage+0x94>
 800d8ac:	e018      	b.n	800d8e0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	75bb      	strb	r3, [r7, #22]
            break;
 800d8b2:	e018      	b.n	800d8e6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	4619      	mov	r1, r3
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f000 fa6e 	bl	800dda0 <USBD_CoreFindIF>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	75bb      	strb	r3, [r7, #22]
            break;
 800d8c8:	e00d      	b.n	800d8e6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f000 fa70 	bl	800ddba <USBD_CoreFindEP>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	75bb      	strb	r3, [r7, #22]
            break;
 800d8de:	e002      	b.n	800d8e6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	75bb      	strb	r3, [r7, #22]
            break;
 800d8e4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d8e6:	7dbb      	ldrb	r3, [r7, #22]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d119      	bne.n	800d920 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	2b03      	cmp	r3, #3
 800d8f6:	d113      	bne.n	800d920 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d8f8:	7dba      	ldrb	r2, [r7, #22]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	32ae      	adds	r2, #174	@ 0xae
 800d8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d902:	691b      	ldr	r3, [r3, #16]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00b      	beq.n	800d920 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800d908:	7dba      	ldrb	r2, [r7, #22]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d910:	7dba      	ldrb	r2, [r7, #22]
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	32ae      	adds	r2, #174	@ 0xae
 800d916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d91a:	691b      	ldr	r3, [r3, #16]
 800d91c:	68f8      	ldr	r0, [r7, #12]
 800d91e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d920:	68f8      	ldr	r0, [r7, #12]
 800d922:	f001 f998 	bl	800ec56 <USBD_CtlSendStatus>
 800d926:	e032      	b.n	800d98e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d928:	7afb      	ldrb	r3, [r7, #11]
 800d92a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	4619      	mov	r1, r3
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	f000 fa41 	bl	800ddba <USBD_CoreFindEP>
 800d938:	4603      	mov	r3, r0
 800d93a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d93c:	7dbb      	ldrb	r3, [r7, #22]
 800d93e:	2bff      	cmp	r3, #255	@ 0xff
 800d940:	d025      	beq.n	800d98e <USBD_LL_DataOutStage+0x16e>
 800d942:	7dbb      	ldrb	r3, [r7, #22]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d122      	bne.n	800d98e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	2b03      	cmp	r3, #3
 800d952:	d117      	bne.n	800d984 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d954:	7dba      	ldrb	r2, [r7, #22]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	32ae      	adds	r2, #174	@ 0xae
 800d95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d95e:	699b      	ldr	r3, [r3, #24]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00f      	beq.n	800d984 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800d964:	7dba      	ldrb	r2, [r7, #22]
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d96c:	7dba      	ldrb	r2, [r7, #22]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	32ae      	adds	r2, #174	@ 0xae
 800d972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	7afa      	ldrb	r2, [r7, #11]
 800d97a:	4611      	mov	r1, r2
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	4798      	blx	r3
 800d980:	4603      	mov	r3, r0
 800d982:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d984:	7dfb      	ldrb	r3, [r7, #23]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d001      	beq.n	800d98e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800d98a:	7dfb      	ldrb	r3, [r7, #23]
 800d98c:	e000      	b.n	800d990 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	3718      	adds	r7, #24
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b086      	sub	sp, #24
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	607a      	str	r2, [r7, #4]
 800d9a4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800d9a6:	7afb      	ldrb	r3, [r7, #11]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d178      	bne.n	800da9e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	3314      	adds	r3, #20
 800d9b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d9b8:	2b02      	cmp	r3, #2
 800d9ba:	d163      	bne.n	800da84 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	693a      	ldr	r2, [r7, #16]
 800d9c2:	8992      	ldrh	r2, [r2, #12]
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d91c      	bls.n	800da02 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	693a      	ldr	r2, [r7, #16]
 800d9ce:	8992      	ldrh	r2, [r2, #12]
 800d9d0:	1a9a      	subs	r2, r3, r2
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	691b      	ldr	r3, [r3, #16]
 800d9da:	693a      	ldr	r2, [r7, #16]
 800d9dc:	8992      	ldrh	r2, [r2, #12]
 800d9de:	441a      	add	r2, r3
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	6919      	ldr	r1, [r3, #16]
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	68f8      	ldr	r0, [r7, #12]
 800d9f0:	f001 f8ee 	bl	800ebd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	2100      	movs	r1, #0
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f001 fe02 	bl	800f604 <USBD_LL_PrepareReceive>
 800da00:	e040      	b.n	800da84 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	899b      	ldrh	r3, [r3, #12]
 800da06:	461a      	mov	r2, r3
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d11c      	bne.n	800da4a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	693a      	ldr	r2, [r7, #16]
 800da16:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800da18:	4293      	cmp	r3, r2
 800da1a:	d316      	bcc.n	800da4a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800da26:	429a      	cmp	r2, r3
 800da28:	d20f      	bcs.n	800da4a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800da2a:	2200      	movs	r2, #0
 800da2c:	2100      	movs	r1, #0
 800da2e:	68f8      	ldr	r0, [r7, #12]
 800da30:	f001 f8ce 	bl	800ebd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2200      	movs	r2, #0
 800da38:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da3c:	2300      	movs	r3, #0
 800da3e:	2200      	movs	r2, #0
 800da40:	2100      	movs	r1, #0
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	f001 fdde 	bl	800f604 <USBD_LL_PrepareReceive>
 800da48:	e01c      	b.n	800da84 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da50:	b2db      	uxtb	r3, r3
 800da52:	2b03      	cmp	r3, #3
 800da54:	d10f      	bne.n	800da76 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d009      	beq.n	800da76 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2200      	movs	r2, #0
 800da66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da70:	68db      	ldr	r3, [r3, #12]
 800da72:	68f8      	ldr	r0, [r7, #12]
 800da74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800da76:	2180      	movs	r1, #128	@ 0x80
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	f001 fd19 	bl	800f4b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f001 f8fc 	bl	800ec7c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d03a      	beq.n	800db04 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	f7ff fe30 	bl	800d6f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	2200      	movs	r2, #0
 800da98:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800da9c:	e032      	b.n	800db04 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800da9e:	7afb      	ldrb	r3, [r7, #11]
 800daa0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	4619      	mov	r1, r3
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f000 f986 	bl	800ddba <USBD_CoreFindEP>
 800daae:	4603      	mov	r3, r0
 800dab0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dab2:	7dfb      	ldrb	r3, [r7, #23]
 800dab4:	2bff      	cmp	r3, #255	@ 0xff
 800dab6:	d025      	beq.n	800db04 <USBD_LL_DataInStage+0x16c>
 800dab8:	7dfb      	ldrb	r3, [r7, #23]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d122      	bne.n	800db04 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	2b03      	cmp	r3, #3
 800dac8:	d11c      	bne.n	800db04 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800daca:	7dfa      	ldrb	r2, [r7, #23]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	32ae      	adds	r2, #174	@ 0xae
 800dad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dad4:	695b      	ldr	r3, [r3, #20]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d014      	beq.n	800db04 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800dada:	7dfa      	ldrb	r2, [r7, #23]
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dae2:	7dfa      	ldrb	r2, [r7, #23]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	32ae      	adds	r2, #174	@ 0xae
 800dae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daec:	695b      	ldr	r3, [r3, #20]
 800daee:	7afa      	ldrb	r2, [r7, #11]
 800daf0:	4611      	mov	r1, r2
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	4798      	blx	r3
 800daf6:	4603      	mov	r3, r0
 800daf8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dafa:	7dbb      	ldrb	r3, [r7, #22]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d001      	beq.n	800db04 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800db00:	7dbb      	ldrb	r3, [r7, #22]
 800db02:	e000      	b.n	800db06 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800db04:	2300      	movs	r3, #0
}
 800db06:	4618      	mov	r0, r3
 800db08:	3718      	adds	r7, #24
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b084      	sub	sp, #16
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800db16:	2300      	movs	r3, #0
 800db18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2201      	movs	r2, #1
 800db1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db46:	2b00      	cmp	r3, #0
 800db48:	d014      	beq.n	800db74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00e      	beq.n	800db74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	6852      	ldr	r2, [r2, #4]
 800db62:	b2d2      	uxtb	r2, r2
 800db64:	4611      	mov	r1, r2
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	4798      	blx	r3
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d001      	beq.n	800db74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800db70:	2303      	movs	r3, #3
 800db72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db74:	2340      	movs	r3, #64	@ 0x40
 800db76:	2200      	movs	r2, #0
 800db78:	2100      	movs	r1, #0
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f001 fc53 	bl	800f426 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2201      	movs	r2, #1
 800db84:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2240      	movs	r2, #64	@ 0x40
 800db8c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db90:	2340      	movs	r3, #64	@ 0x40
 800db92:	2200      	movs	r2, #0
 800db94:	2180      	movs	r1, #128	@ 0x80
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f001 fc45 	bl	800f426 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2201      	movs	r2, #1
 800dba0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2240      	movs	r2, #64	@ 0x40
 800dba8:	841a      	strh	r2, [r3, #32]

  return ret;
 800dbaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3710      	adds	r7, #16
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b083      	sub	sp, #12
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	78fa      	ldrb	r2, [r7, #3]
 800dbc4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dbc6:	2300      	movs	r3, #0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	370c      	adds	r7, #12
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr

0800dbd4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	2b04      	cmp	r3, #4
 800dbe6:	d006      	beq.n	800dbf6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbee:	b2da      	uxtb	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2204      	movs	r2, #4
 800dbfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	370c      	adds	r7, #12
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	2b04      	cmp	r3, #4
 800dc1e:	d106      	bne.n	800dc2e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800dc26:	b2da      	uxtb	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800dc2e:	2300      	movs	r3, #0
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	2b03      	cmp	r3, #3
 800dc4e:	d110      	bne.n	800dc72 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00b      	beq.n	800dc72 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc60:	69db      	ldr	r3, [r3, #28]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d005      	beq.n	800dc72 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc6c:	69db      	ldr	r3, [r3, #28]
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dc72:	2300      	movs	r3, #0
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3708      	adds	r7, #8
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	460b      	mov	r3, r1
 800dc86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	32ae      	adds	r2, #174	@ 0xae
 800dc92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d101      	bne.n	800dc9e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dc9a:	2303      	movs	r3, #3
 800dc9c:	e01c      	b.n	800dcd8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	2b03      	cmp	r3, #3
 800dca8:	d115      	bne.n	800dcd6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	32ae      	adds	r2, #174	@ 0xae
 800dcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcb8:	6a1b      	ldr	r3, [r3, #32]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00b      	beq.n	800dcd6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	32ae      	adds	r2, #174	@ 0xae
 800dcc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dccc:	6a1b      	ldr	r3, [r3, #32]
 800dcce:	78fa      	ldrb	r2, [r7, #3]
 800dcd0:	4611      	mov	r1, r2
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dcd6:	2300      	movs	r3, #0
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	460b      	mov	r3, r1
 800dcea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	32ae      	adds	r2, #174	@ 0xae
 800dcf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d101      	bne.n	800dd02 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dcfe:	2303      	movs	r3, #3
 800dd00:	e01c      	b.n	800dd3c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	2b03      	cmp	r3, #3
 800dd0c:	d115      	bne.n	800dd3a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	32ae      	adds	r2, #174	@ 0xae
 800dd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d00b      	beq.n	800dd3a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	32ae      	adds	r2, #174	@ 0xae
 800dd2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd32:	78fa      	ldrb	r2, [r7, #3]
 800dd34:	4611      	mov	r1, r2
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd3a:	2300      	movs	r3, #0
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dd4c:	2300      	movs	r3, #0
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	370c      	adds	r7, #12
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr

0800dd5a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b084      	sub	sp, #16
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dd62:	2300      	movs	r3, #0
 800dd64:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2201      	movs	r2, #1
 800dd6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00e      	beq.n	800dd96 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	6852      	ldr	r2, [r2, #4]
 800dd84:	b2d2      	uxtb	r2, r2
 800dd86:	4611      	mov	r1, r2
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	4798      	blx	r3
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d001      	beq.n	800dd96 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dd92:	2303      	movs	r3, #3
 800dd94:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dd96:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b083      	sub	sp, #12
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	460b      	mov	r3, r1
 800ddaa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ddac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	370c      	adds	r7, #12
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ddba:	b480      	push	{r7}
 800ddbc:	b083      	sub	sp, #12
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	460b      	mov	r3, r1
 800ddc4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ddc6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b086      	sub	sp, #24
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	460b      	mov	r3, r1
 800ddde:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dde8:	2300      	movs	r3, #0
 800ddea:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	885b      	ldrh	r3, [r3, #2]
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	68fa      	ldr	r2, [r7, #12]
 800ddf4:	7812      	ldrb	r2, [r2, #0]
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d91f      	bls.n	800de3a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800de00:	e013      	b.n	800de2a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800de02:	f107 030a 	add.w	r3, r7, #10
 800de06:	4619      	mov	r1, r3
 800de08:	6978      	ldr	r0, [r7, #20]
 800de0a:	f000 f81b 	bl	800de44 <USBD_GetNextDesc>
 800de0e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	785b      	ldrb	r3, [r3, #1]
 800de14:	2b05      	cmp	r3, #5
 800de16:	d108      	bne.n	800de2a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	789b      	ldrb	r3, [r3, #2]
 800de20:	78fa      	ldrb	r2, [r7, #3]
 800de22:	429a      	cmp	r2, r3
 800de24:	d008      	beq.n	800de38 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800de26:	2300      	movs	r3, #0
 800de28:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	885b      	ldrh	r3, [r3, #2]
 800de2e:	b29a      	uxth	r2, r3
 800de30:	897b      	ldrh	r3, [r7, #10]
 800de32:	429a      	cmp	r2, r3
 800de34:	d8e5      	bhi.n	800de02 <USBD_GetEpDesc+0x2e>
 800de36:	e000      	b.n	800de3a <USBD_GetEpDesc+0x66>
          break;
 800de38:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800de3a:	693b      	ldr	r3, [r7, #16]
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3718      	adds	r7, #24
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	881b      	ldrh	r3, [r3, #0]
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	7812      	ldrb	r2, [r2, #0]
 800de5a:	4413      	add	r3, r2
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	461a      	mov	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4413      	add	r3, r2
 800de6c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800de6e:	68fb      	ldr	r3, [r7, #12]
}
 800de70:	4618      	mov	r0, r3
 800de72:	3714      	adds	r7, #20
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr

0800de7c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b087      	sub	sp, #28
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	3301      	adds	r3, #1
 800de92:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800de9a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800de9e:	021b      	lsls	r3, r3, #8
 800dea0:	b21a      	sxth	r2, r3
 800dea2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dea6:	4313      	orrs	r3, r2
 800dea8:	b21b      	sxth	r3, r3
 800deaa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800deac:	89fb      	ldrh	r3, [r7, #14]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	371c      	adds	r7, #28
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr
	...

0800debc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dec6:	2300      	movs	r3, #0
 800dec8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ded2:	2b40      	cmp	r3, #64	@ 0x40
 800ded4:	d005      	beq.n	800dee2 <USBD_StdDevReq+0x26>
 800ded6:	2b40      	cmp	r3, #64	@ 0x40
 800ded8:	d857      	bhi.n	800df8a <USBD_StdDevReq+0xce>
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d00f      	beq.n	800defe <USBD_StdDevReq+0x42>
 800dede:	2b20      	cmp	r3, #32
 800dee0:	d153      	bne.n	800df8a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	32ae      	adds	r2, #174	@ 0xae
 800deec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800def0:	689b      	ldr	r3, [r3, #8]
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	4798      	blx	r3
 800def8:	4603      	mov	r3, r0
 800defa:	73fb      	strb	r3, [r7, #15]
      break;
 800defc:	e04a      	b.n	800df94 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	785b      	ldrb	r3, [r3, #1]
 800df02:	2b09      	cmp	r3, #9
 800df04:	d83b      	bhi.n	800df7e <USBD_StdDevReq+0xc2>
 800df06:	a201      	add	r2, pc, #4	@ (adr r2, 800df0c <USBD_StdDevReq+0x50>)
 800df08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df0c:	0800df61 	.word	0x0800df61
 800df10:	0800df75 	.word	0x0800df75
 800df14:	0800df7f 	.word	0x0800df7f
 800df18:	0800df6b 	.word	0x0800df6b
 800df1c:	0800df7f 	.word	0x0800df7f
 800df20:	0800df3f 	.word	0x0800df3f
 800df24:	0800df35 	.word	0x0800df35
 800df28:	0800df7f 	.word	0x0800df7f
 800df2c:	0800df57 	.word	0x0800df57
 800df30:	0800df49 	.word	0x0800df49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800df34:	6839      	ldr	r1, [r7, #0]
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 fa3e 	bl	800e3b8 <USBD_GetDescriptor>
          break;
 800df3c:	e024      	b.n	800df88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800df3e:	6839      	ldr	r1, [r7, #0]
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 fbcd 	bl	800e6e0 <USBD_SetAddress>
          break;
 800df46:	e01f      	b.n	800df88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800df48:	6839      	ldr	r1, [r7, #0]
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 fc0c 	bl	800e768 <USBD_SetConfig>
 800df50:	4603      	mov	r3, r0
 800df52:	73fb      	strb	r3, [r7, #15]
          break;
 800df54:	e018      	b.n	800df88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800df56:	6839      	ldr	r1, [r7, #0]
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 fcaf 	bl	800e8bc <USBD_GetConfig>
          break;
 800df5e:	e013      	b.n	800df88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800df60:	6839      	ldr	r1, [r7, #0]
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f000 fce0 	bl	800e928 <USBD_GetStatus>
          break;
 800df68:	e00e      	b.n	800df88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800df6a:	6839      	ldr	r1, [r7, #0]
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 fd0f 	bl	800e990 <USBD_SetFeature>
          break;
 800df72:	e009      	b.n	800df88 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800df74:	6839      	ldr	r1, [r7, #0]
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 fd33 	bl	800e9e2 <USBD_ClrFeature>
          break;
 800df7c:	e004      	b.n	800df88 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800df7e:	6839      	ldr	r1, [r7, #0]
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 fd8a 	bl	800ea9a <USBD_CtlError>
          break;
 800df86:	bf00      	nop
      }
      break;
 800df88:	e004      	b.n	800df94 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800df8a:	6839      	ldr	r1, [r7, #0]
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f000 fd84 	bl	800ea9a <USBD_CtlError>
      break;
 800df92:	bf00      	nop
  }

  return ret;
 800df94:	7bfb      	ldrb	r3, [r7, #15]
}
 800df96:	4618      	mov	r0, r3
 800df98:	3710      	adds	r7, #16
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop

0800dfa0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dfb6:	2b40      	cmp	r3, #64	@ 0x40
 800dfb8:	d005      	beq.n	800dfc6 <USBD_StdItfReq+0x26>
 800dfba:	2b40      	cmp	r3, #64	@ 0x40
 800dfbc:	d852      	bhi.n	800e064 <USBD_StdItfReq+0xc4>
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d001      	beq.n	800dfc6 <USBD_StdItfReq+0x26>
 800dfc2:	2b20      	cmp	r3, #32
 800dfc4:	d14e      	bne.n	800e064 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	3b01      	subs	r3, #1
 800dfd0:	2b02      	cmp	r3, #2
 800dfd2:	d840      	bhi.n	800e056 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	889b      	ldrh	r3, [r3, #4]
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d836      	bhi.n	800e04c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	889b      	ldrh	r3, [r3, #4]
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f7ff feda 	bl	800dda0 <USBD_CoreFindIF>
 800dfec:	4603      	mov	r3, r0
 800dfee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dff0:	7bbb      	ldrb	r3, [r7, #14]
 800dff2:	2bff      	cmp	r3, #255	@ 0xff
 800dff4:	d01d      	beq.n	800e032 <USBD_StdItfReq+0x92>
 800dff6:	7bbb      	ldrb	r3, [r7, #14]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d11a      	bne.n	800e032 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dffc:	7bba      	ldrb	r2, [r7, #14]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	32ae      	adds	r2, #174	@ 0xae
 800e002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e006:	689b      	ldr	r3, [r3, #8]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d00f      	beq.n	800e02c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e00c:	7bba      	ldrb	r2, [r7, #14]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e014:	7bba      	ldrb	r2, [r7, #14]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	32ae      	adds	r2, #174	@ 0xae
 800e01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e01e:	689b      	ldr	r3, [r3, #8]
 800e020:	6839      	ldr	r1, [r7, #0]
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	4798      	blx	r3
 800e026:	4603      	mov	r3, r0
 800e028:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e02a:	e004      	b.n	800e036 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e02c:	2303      	movs	r3, #3
 800e02e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e030:	e001      	b.n	800e036 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e032:	2303      	movs	r3, #3
 800e034:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	88db      	ldrh	r3, [r3, #6]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d110      	bne.n	800e060 <USBD_StdItfReq+0xc0>
 800e03e:	7bfb      	ldrb	r3, [r7, #15]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d10d      	bne.n	800e060 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f000 fe06 	bl	800ec56 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e04a:	e009      	b.n	800e060 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e04c:	6839      	ldr	r1, [r7, #0]
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 fd23 	bl	800ea9a <USBD_CtlError>
          break;
 800e054:	e004      	b.n	800e060 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e056:	6839      	ldr	r1, [r7, #0]
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f000 fd1e 	bl	800ea9a <USBD_CtlError>
          break;
 800e05e:	e000      	b.n	800e062 <USBD_StdItfReq+0xc2>
          break;
 800e060:	bf00      	nop
      }
      break;
 800e062:	e004      	b.n	800e06e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e064:	6839      	ldr	r1, [r7, #0]
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 fd17 	bl	800ea9a <USBD_CtlError>
      break;
 800e06c:	bf00      	nop
  }

  return ret;
 800e06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e070:	4618      	mov	r0, r3
 800e072:	3710      	adds	r7, #16
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e082:	2300      	movs	r3, #0
 800e084:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	889b      	ldrh	r3, [r3, #4]
 800e08a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e094:	2b40      	cmp	r3, #64	@ 0x40
 800e096:	d007      	beq.n	800e0a8 <USBD_StdEPReq+0x30>
 800e098:	2b40      	cmp	r3, #64	@ 0x40
 800e09a:	f200 8181 	bhi.w	800e3a0 <USBD_StdEPReq+0x328>
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d02a      	beq.n	800e0f8 <USBD_StdEPReq+0x80>
 800e0a2:	2b20      	cmp	r3, #32
 800e0a4:	f040 817c 	bne.w	800e3a0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e0a8:	7bbb      	ldrb	r3, [r7, #14]
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f7ff fe84 	bl	800ddba <USBD_CoreFindEP>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e0b6:	7b7b      	ldrb	r3, [r7, #13]
 800e0b8:	2bff      	cmp	r3, #255	@ 0xff
 800e0ba:	f000 8176 	beq.w	800e3aa <USBD_StdEPReq+0x332>
 800e0be:	7b7b      	ldrb	r3, [r7, #13]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	f040 8172 	bne.w	800e3aa <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800e0c6:	7b7a      	ldrb	r2, [r7, #13]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e0ce:	7b7a      	ldrb	r2, [r7, #13]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	32ae      	adds	r2, #174	@ 0xae
 800e0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0d8:	689b      	ldr	r3, [r3, #8]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	f000 8165 	beq.w	800e3aa <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e0e0:	7b7a      	ldrb	r2, [r7, #13]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	32ae      	adds	r2, #174	@ 0xae
 800e0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ea:	689b      	ldr	r3, [r3, #8]
 800e0ec:	6839      	ldr	r1, [r7, #0]
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	4798      	blx	r3
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e0f6:	e158      	b.n	800e3aa <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	785b      	ldrb	r3, [r3, #1]
 800e0fc:	2b03      	cmp	r3, #3
 800e0fe:	d008      	beq.n	800e112 <USBD_StdEPReq+0x9a>
 800e100:	2b03      	cmp	r3, #3
 800e102:	f300 8147 	bgt.w	800e394 <USBD_StdEPReq+0x31c>
 800e106:	2b00      	cmp	r3, #0
 800e108:	f000 809b 	beq.w	800e242 <USBD_StdEPReq+0x1ca>
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d03c      	beq.n	800e18a <USBD_StdEPReq+0x112>
 800e110:	e140      	b.n	800e394 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	2b02      	cmp	r3, #2
 800e11c:	d002      	beq.n	800e124 <USBD_StdEPReq+0xac>
 800e11e:	2b03      	cmp	r3, #3
 800e120:	d016      	beq.n	800e150 <USBD_StdEPReq+0xd8>
 800e122:	e02c      	b.n	800e17e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e124:	7bbb      	ldrb	r3, [r7, #14]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d00d      	beq.n	800e146 <USBD_StdEPReq+0xce>
 800e12a:	7bbb      	ldrb	r3, [r7, #14]
 800e12c:	2b80      	cmp	r3, #128	@ 0x80
 800e12e:	d00a      	beq.n	800e146 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e130:	7bbb      	ldrb	r3, [r7, #14]
 800e132:	4619      	mov	r1, r3
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f001 f9bb 	bl	800f4b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e13a:	2180      	movs	r1, #128	@ 0x80
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f001 f9b7 	bl	800f4b0 <USBD_LL_StallEP>
 800e142:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e144:	e020      	b.n	800e188 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e146:	6839      	ldr	r1, [r7, #0]
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 fca6 	bl	800ea9a <USBD_CtlError>
              break;
 800e14e:	e01b      	b.n	800e188 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	885b      	ldrh	r3, [r3, #2]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d10e      	bne.n	800e176 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e158:	7bbb      	ldrb	r3, [r7, #14]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d00b      	beq.n	800e176 <USBD_StdEPReq+0xfe>
 800e15e:	7bbb      	ldrb	r3, [r7, #14]
 800e160:	2b80      	cmp	r3, #128	@ 0x80
 800e162:	d008      	beq.n	800e176 <USBD_StdEPReq+0xfe>
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	88db      	ldrh	r3, [r3, #6]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d104      	bne.n	800e176 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e16c:	7bbb      	ldrb	r3, [r7, #14]
 800e16e:	4619      	mov	r1, r3
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f001 f99d 	bl	800f4b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 fd6d 	bl	800ec56 <USBD_CtlSendStatus>

              break;
 800e17c:	e004      	b.n	800e188 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e17e:	6839      	ldr	r1, [r7, #0]
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 fc8a 	bl	800ea9a <USBD_CtlError>
              break;
 800e186:	bf00      	nop
          }
          break;
 800e188:	e109      	b.n	800e39e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e190:	b2db      	uxtb	r3, r3
 800e192:	2b02      	cmp	r3, #2
 800e194:	d002      	beq.n	800e19c <USBD_StdEPReq+0x124>
 800e196:	2b03      	cmp	r3, #3
 800e198:	d016      	beq.n	800e1c8 <USBD_StdEPReq+0x150>
 800e19a:	e04b      	b.n	800e234 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e19c:	7bbb      	ldrb	r3, [r7, #14]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d00d      	beq.n	800e1be <USBD_StdEPReq+0x146>
 800e1a2:	7bbb      	ldrb	r3, [r7, #14]
 800e1a4:	2b80      	cmp	r3, #128	@ 0x80
 800e1a6:	d00a      	beq.n	800e1be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1a8:	7bbb      	ldrb	r3, [r7, #14]
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f001 f97f 	bl	800f4b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1b2:	2180      	movs	r1, #128	@ 0x80
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f001 f97b 	bl	800f4b0 <USBD_LL_StallEP>
 800e1ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e1bc:	e040      	b.n	800e240 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e1be:	6839      	ldr	r1, [r7, #0]
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 fc6a 	bl	800ea9a <USBD_CtlError>
              break;
 800e1c6:	e03b      	b.n	800e240 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	885b      	ldrh	r3, [r3, #2]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d136      	bne.n	800e23e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e1d0:	7bbb      	ldrb	r3, [r7, #14]
 800e1d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d004      	beq.n	800e1e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e1da:	7bbb      	ldrb	r3, [r7, #14]
 800e1dc:	4619      	mov	r1, r3
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f001 f985 	bl	800f4ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 fd36 	bl	800ec56 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e1ea:	7bbb      	ldrb	r3, [r7, #14]
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f7ff fde3 	bl	800ddba <USBD_CoreFindEP>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e1f8:	7b7b      	ldrb	r3, [r7, #13]
 800e1fa:	2bff      	cmp	r3, #255	@ 0xff
 800e1fc:	d01f      	beq.n	800e23e <USBD_StdEPReq+0x1c6>
 800e1fe:	7b7b      	ldrb	r3, [r7, #13]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d11c      	bne.n	800e23e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e204:	7b7a      	ldrb	r2, [r7, #13]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e20c:	7b7a      	ldrb	r2, [r7, #13]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	32ae      	adds	r2, #174	@ 0xae
 800e212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d010      	beq.n	800e23e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e21c:	7b7a      	ldrb	r2, [r7, #13]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	32ae      	adds	r2, #174	@ 0xae
 800e222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e226:	689b      	ldr	r3, [r3, #8]
 800e228:	6839      	ldr	r1, [r7, #0]
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	4798      	blx	r3
 800e22e:	4603      	mov	r3, r0
 800e230:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e232:	e004      	b.n	800e23e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e234:	6839      	ldr	r1, [r7, #0]
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 fc2f 	bl	800ea9a <USBD_CtlError>
              break;
 800e23c:	e000      	b.n	800e240 <USBD_StdEPReq+0x1c8>
              break;
 800e23e:	bf00      	nop
          }
          break;
 800e240:	e0ad      	b.n	800e39e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	2b02      	cmp	r3, #2
 800e24c:	d002      	beq.n	800e254 <USBD_StdEPReq+0x1dc>
 800e24e:	2b03      	cmp	r3, #3
 800e250:	d033      	beq.n	800e2ba <USBD_StdEPReq+0x242>
 800e252:	e099      	b.n	800e388 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e254:	7bbb      	ldrb	r3, [r7, #14]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d007      	beq.n	800e26a <USBD_StdEPReq+0x1f2>
 800e25a:	7bbb      	ldrb	r3, [r7, #14]
 800e25c:	2b80      	cmp	r3, #128	@ 0x80
 800e25e:	d004      	beq.n	800e26a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 fc19 	bl	800ea9a <USBD_CtlError>
                break;
 800e268:	e093      	b.n	800e392 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e26a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	da0b      	bge.n	800e28a <USBD_StdEPReq+0x212>
 800e272:	7bbb      	ldrb	r3, [r7, #14]
 800e274:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e278:	4613      	mov	r3, r2
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	4413      	add	r3, r2
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	3310      	adds	r3, #16
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	4413      	add	r3, r2
 800e286:	3304      	adds	r3, #4
 800e288:	e00b      	b.n	800e2a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e28a:	7bbb      	ldrb	r3, [r7, #14]
 800e28c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e290:	4613      	mov	r3, r2
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	4413      	add	r3, r2
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	4413      	add	r3, r2
 800e2a0:	3304      	adds	r3, #4
 800e2a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	330e      	adds	r3, #14
 800e2ae:	2202      	movs	r2, #2
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 fc6e 	bl	800eb94 <USBD_CtlSendData>
              break;
 800e2b8:	e06b      	b.n	800e392 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e2ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	da11      	bge.n	800e2e6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e2c2:	7bbb      	ldrb	r3, [r7, #14]
 800e2c4:	f003 020f 	and.w	r2, r3, #15
 800e2c8:	6879      	ldr	r1, [r7, #4]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	4413      	add	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	440b      	add	r3, r1
 800e2d4:	3323      	adds	r3, #35	@ 0x23
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d117      	bne.n	800e30c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800e2dc:	6839      	ldr	r1, [r7, #0]
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f000 fbdb 	bl	800ea9a <USBD_CtlError>
                  break;
 800e2e4:	e055      	b.n	800e392 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e2e6:	7bbb      	ldrb	r3, [r7, #14]
 800e2e8:	f003 020f 	and.w	r2, r3, #15
 800e2ec:	6879      	ldr	r1, [r7, #4]
 800e2ee:	4613      	mov	r3, r2
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	4413      	add	r3, r2
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	440b      	add	r3, r1
 800e2f8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d104      	bne.n	800e30c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800e302:	6839      	ldr	r1, [r7, #0]
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 fbc8 	bl	800ea9a <USBD_CtlError>
                  break;
 800e30a:	e042      	b.n	800e392 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e30c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e310:	2b00      	cmp	r3, #0
 800e312:	da0b      	bge.n	800e32c <USBD_StdEPReq+0x2b4>
 800e314:	7bbb      	ldrb	r3, [r7, #14]
 800e316:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e31a:	4613      	mov	r3, r2
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	4413      	add	r3, r2
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	3310      	adds	r3, #16
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	4413      	add	r3, r2
 800e328:	3304      	adds	r3, #4
 800e32a:	e00b      	b.n	800e344 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e32c:	7bbb      	ldrb	r3, [r7, #14]
 800e32e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e332:	4613      	mov	r3, r2
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4413      	add	r3, r2
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	4413      	add	r3, r2
 800e342:	3304      	adds	r3, #4
 800e344:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e346:	7bbb      	ldrb	r3, [r7, #14]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d002      	beq.n	800e352 <USBD_StdEPReq+0x2da>
 800e34c:	7bbb      	ldrb	r3, [r7, #14]
 800e34e:	2b80      	cmp	r3, #128	@ 0x80
 800e350:	d103      	bne.n	800e35a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	2200      	movs	r2, #0
 800e356:	739a      	strb	r2, [r3, #14]
 800e358:	e00e      	b.n	800e378 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e35a:	7bbb      	ldrb	r3, [r7, #14]
 800e35c:	4619      	mov	r1, r3
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f001 f8e4 	bl	800f52c <USBD_LL_IsStallEP>
 800e364:	4603      	mov	r3, r0
 800e366:	2b00      	cmp	r3, #0
 800e368:	d003      	beq.n	800e372 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	2201      	movs	r2, #1
 800e36e:	739a      	strb	r2, [r3, #14]
 800e370:	e002      	b.n	800e378 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	2200      	movs	r2, #0
 800e376:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	330e      	adds	r3, #14
 800e37c:	2202      	movs	r2, #2
 800e37e:	4619      	mov	r1, r3
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 fc07 	bl	800eb94 <USBD_CtlSendData>
              break;
 800e386:	e004      	b.n	800e392 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800e388:	6839      	ldr	r1, [r7, #0]
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fb85 	bl	800ea9a <USBD_CtlError>
              break;
 800e390:	bf00      	nop
          }
          break;
 800e392:	e004      	b.n	800e39e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800e394:	6839      	ldr	r1, [r7, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 fb7f 	bl	800ea9a <USBD_CtlError>
          break;
 800e39c:	bf00      	nop
      }
      break;
 800e39e:	e005      	b.n	800e3ac <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800e3a0:	6839      	ldr	r1, [r7, #0]
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 fb79 	bl	800ea9a <USBD_CtlError>
      break;
 800e3a8:	e000      	b.n	800e3ac <USBD_StdEPReq+0x334>
      break;
 800e3aa:	bf00      	nop
  }

  return ret;
 800e3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3710      	adds	r7, #16
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
	...

0800e3b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	885b      	ldrh	r3, [r3, #2]
 800e3d2:	0a1b      	lsrs	r3, r3, #8
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	3b01      	subs	r3, #1
 800e3d8:	2b0e      	cmp	r3, #14
 800e3da:	f200 8152 	bhi.w	800e682 <USBD_GetDescriptor+0x2ca>
 800e3de:	a201      	add	r2, pc, #4	@ (adr r2, 800e3e4 <USBD_GetDescriptor+0x2c>)
 800e3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3e4:	0800e455 	.word	0x0800e455
 800e3e8:	0800e46d 	.word	0x0800e46d
 800e3ec:	0800e4ad 	.word	0x0800e4ad
 800e3f0:	0800e683 	.word	0x0800e683
 800e3f4:	0800e683 	.word	0x0800e683
 800e3f8:	0800e623 	.word	0x0800e623
 800e3fc:	0800e64f 	.word	0x0800e64f
 800e400:	0800e683 	.word	0x0800e683
 800e404:	0800e683 	.word	0x0800e683
 800e408:	0800e683 	.word	0x0800e683
 800e40c:	0800e683 	.word	0x0800e683
 800e410:	0800e683 	.word	0x0800e683
 800e414:	0800e683 	.word	0x0800e683
 800e418:	0800e683 	.word	0x0800e683
 800e41c:	0800e421 	.word	0x0800e421
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e426:	69db      	ldr	r3, [r3, #28]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d00b      	beq.n	800e444 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e432:	69db      	ldr	r3, [r3, #28]
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	7c12      	ldrb	r2, [r2, #16]
 800e438:	f107 0108 	add.w	r1, r7, #8
 800e43c:	4610      	mov	r0, r2
 800e43e:	4798      	blx	r3
 800e440:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e442:	e126      	b.n	800e692 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e444:	6839      	ldr	r1, [r7, #0]
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 fb27 	bl	800ea9a <USBD_CtlError>
        err++;
 800e44c:	7afb      	ldrb	r3, [r7, #11]
 800e44e:	3301      	adds	r3, #1
 800e450:	72fb      	strb	r3, [r7, #11]
      break;
 800e452:	e11e      	b.n	800e692 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	7c12      	ldrb	r2, [r2, #16]
 800e460:	f107 0108 	add.w	r1, r7, #8
 800e464:	4610      	mov	r0, r2
 800e466:	4798      	blx	r3
 800e468:	60f8      	str	r0, [r7, #12]
      break;
 800e46a:	e112      	b.n	800e692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	7c1b      	ldrb	r3, [r3, #16]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d10d      	bne.n	800e490 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e47a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e47c:	f107 0208 	add.w	r2, r7, #8
 800e480:	4610      	mov	r0, r2
 800e482:	4798      	blx	r3
 800e484:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	3301      	adds	r3, #1
 800e48a:	2202      	movs	r2, #2
 800e48c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e48e:	e100      	b.n	800e692 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e498:	f107 0208 	add.w	r2, r7, #8
 800e49c:	4610      	mov	r0, r2
 800e49e:	4798      	blx	r3
 800e4a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	2202      	movs	r2, #2
 800e4a8:	701a      	strb	r2, [r3, #0]
      break;
 800e4aa:	e0f2      	b.n	800e692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	885b      	ldrh	r3, [r3, #2]
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	2b05      	cmp	r3, #5
 800e4b4:	f200 80ac 	bhi.w	800e610 <USBD_GetDescriptor+0x258>
 800e4b8:	a201      	add	r2, pc, #4	@ (adr r2, 800e4c0 <USBD_GetDescriptor+0x108>)
 800e4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4be:	bf00      	nop
 800e4c0:	0800e4d9 	.word	0x0800e4d9
 800e4c4:	0800e50d 	.word	0x0800e50d
 800e4c8:	0800e541 	.word	0x0800e541
 800e4cc:	0800e575 	.word	0x0800e575
 800e4d0:	0800e5a9 	.word	0x0800e5a9
 800e4d4:	0800e5dd 	.word	0x0800e5dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d00b      	beq.n	800e4fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	7c12      	ldrb	r2, [r2, #16]
 800e4f0:	f107 0108 	add.w	r1, r7, #8
 800e4f4:	4610      	mov	r0, r2
 800e4f6:	4798      	blx	r3
 800e4f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4fa:	e091      	b.n	800e620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4fc:	6839      	ldr	r1, [r7, #0]
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 facb 	bl	800ea9a <USBD_CtlError>
            err++;
 800e504:	7afb      	ldrb	r3, [r7, #11]
 800e506:	3301      	adds	r3, #1
 800e508:	72fb      	strb	r3, [r7, #11]
          break;
 800e50a:	e089      	b.n	800e620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e512:	689b      	ldr	r3, [r3, #8]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00b      	beq.n	800e530 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e51e:	689b      	ldr	r3, [r3, #8]
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	7c12      	ldrb	r2, [r2, #16]
 800e524:	f107 0108 	add.w	r1, r7, #8
 800e528:	4610      	mov	r0, r2
 800e52a:	4798      	blx	r3
 800e52c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e52e:	e077      	b.n	800e620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e530:	6839      	ldr	r1, [r7, #0]
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f000 fab1 	bl	800ea9a <USBD_CtlError>
            err++;
 800e538:	7afb      	ldrb	r3, [r7, #11]
 800e53a:	3301      	adds	r3, #1
 800e53c:	72fb      	strb	r3, [r7, #11]
          break;
 800e53e:	e06f      	b.n	800e620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d00b      	beq.n	800e564 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	7c12      	ldrb	r2, [r2, #16]
 800e558:	f107 0108 	add.w	r1, r7, #8
 800e55c:	4610      	mov	r0, r2
 800e55e:	4798      	blx	r3
 800e560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e562:	e05d      	b.n	800e620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e564:	6839      	ldr	r1, [r7, #0]
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 fa97 	bl	800ea9a <USBD_CtlError>
            err++;
 800e56c:	7afb      	ldrb	r3, [r7, #11]
 800e56e:	3301      	adds	r3, #1
 800e570:	72fb      	strb	r3, [r7, #11]
          break;
 800e572:	e055      	b.n	800e620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e57a:	691b      	ldr	r3, [r3, #16]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d00b      	beq.n	800e598 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e586:	691b      	ldr	r3, [r3, #16]
 800e588:	687a      	ldr	r2, [r7, #4]
 800e58a:	7c12      	ldrb	r2, [r2, #16]
 800e58c:	f107 0108 	add.w	r1, r7, #8
 800e590:	4610      	mov	r0, r2
 800e592:	4798      	blx	r3
 800e594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e596:	e043      	b.n	800e620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e598:	6839      	ldr	r1, [r7, #0]
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f000 fa7d 	bl	800ea9a <USBD_CtlError>
            err++;
 800e5a0:	7afb      	ldrb	r3, [r7, #11]
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	72fb      	strb	r3, [r7, #11]
          break;
 800e5a6:	e03b      	b.n	800e620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5ae:	695b      	ldr	r3, [r3, #20]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00b      	beq.n	800e5cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5ba:	695b      	ldr	r3, [r3, #20]
 800e5bc:	687a      	ldr	r2, [r7, #4]
 800e5be:	7c12      	ldrb	r2, [r2, #16]
 800e5c0:	f107 0108 	add.w	r1, r7, #8
 800e5c4:	4610      	mov	r0, r2
 800e5c6:	4798      	blx	r3
 800e5c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5ca:	e029      	b.n	800e620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5cc:	6839      	ldr	r1, [r7, #0]
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 fa63 	bl	800ea9a <USBD_CtlError>
            err++;
 800e5d4:	7afb      	ldrb	r3, [r7, #11]
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	72fb      	strb	r3, [r7, #11]
          break;
 800e5da:	e021      	b.n	800e620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5e2:	699b      	ldr	r3, [r3, #24]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d00b      	beq.n	800e600 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5ee:	699b      	ldr	r3, [r3, #24]
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	7c12      	ldrb	r2, [r2, #16]
 800e5f4:	f107 0108 	add.w	r1, r7, #8
 800e5f8:	4610      	mov	r0, r2
 800e5fa:	4798      	blx	r3
 800e5fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5fe:	e00f      	b.n	800e620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e600:	6839      	ldr	r1, [r7, #0]
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 fa49 	bl	800ea9a <USBD_CtlError>
            err++;
 800e608:	7afb      	ldrb	r3, [r7, #11]
 800e60a:	3301      	adds	r3, #1
 800e60c:	72fb      	strb	r3, [r7, #11]
          break;
 800e60e:	e007      	b.n	800e620 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e610:	6839      	ldr	r1, [r7, #0]
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 fa41 	bl	800ea9a <USBD_CtlError>
          err++;
 800e618:	7afb      	ldrb	r3, [r7, #11]
 800e61a:	3301      	adds	r3, #1
 800e61c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e61e:	bf00      	nop
      }
      break;
 800e620:	e037      	b.n	800e692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	7c1b      	ldrb	r3, [r3, #16]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d109      	bne.n	800e63e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e632:	f107 0208 	add.w	r2, r7, #8
 800e636:	4610      	mov	r0, r2
 800e638:	4798      	blx	r3
 800e63a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e63c:	e029      	b.n	800e692 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e63e:	6839      	ldr	r1, [r7, #0]
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 fa2a 	bl	800ea9a <USBD_CtlError>
        err++;
 800e646:	7afb      	ldrb	r3, [r7, #11]
 800e648:	3301      	adds	r3, #1
 800e64a:	72fb      	strb	r3, [r7, #11]
      break;
 800e64c:	e021      	b.n	800e692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	7c1b      	ldrb	r3, [r3, #16]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d10d      	bne.n	800e672 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e65c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e65e:	f107 0208 	add.w	r2, r7, #8
 800e662:	4610      	mov	r0, r2
 800e664:	4798      	blx	r3
 800e666:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	3301      	adds	r3, #1
 800e66c:	2207      	movs	r2, #7
 800e66e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e670:	e00f      	b.n	800e692 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e672:	6839      	ldr	r1, [r7, #0]
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 fa10 	bl	800ea9a <USBD_CtlError>
        err++;
 800e67a:	7afb      	ldrb	r3, [r7, #11]
 800e67c:	3301      	adds	r3, #1
 800e67e:	72fb      	strb	r3, [r7, #11]
      break;
 800e680:	e007      	b.n	800e692 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e682:	6839      	ldr	r1, [r7, #0]
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f000 fa08 	bl	800ea9a <USBD_CtlError>
      err++;
 800e68a:	7afb      	ldrb	r3, [r7, #11]
 800e68c:	3301      	adds	r3, #1
 800e68e:	72fb      	strb	r3, [r7, #11]
      break;
 800e690:	bf00      	nop
  }

  if (err != 0U)
 800e692:	7afb      	ldrb	r3, [r7, #11]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d11e      	bne.n	800e6d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	88db      	ldrh	r3, [r3, #6]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d016      	beq.n	800e6ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e6a0:	893b      	ldrh	r3, [r7, #8]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d00e      	beq.n	800e6c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	88da      	ldrh	r2, [r3, #6]
 800e6aa:	893b      	ldrh	r3, [r7, #8]
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	bf28      	it	cs
 800e6b0:	4613      	movcs	r3, r2
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e6b6:	893b      	ldrh	r3, [r7, #8]
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	68f9      	ldr	r1, [r7, #12]
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 fa69 	bl	800eb94 <USBD_CtlSendData>
 800e6c2:	e009      	b.n	800e6d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e6c4:	6839      	ldr	r1, [r7, #0]
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 f9e7 	bl	800ea9a <USBD_CtlError>
 800e6cc:	e004      	b.n	800e6d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 fac1 	bl	800ec56 <USBD_CtlSendStatus>
 800e6d4:	e000      	b.n	800e6d8 <USBD_GetDescriptor+0x320>
    return;
 800e6d6:	bf00      	nop
  }
}
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop

0800e6e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	889b      	ldrh	r3, [r3, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d131      	bne.n	800e756 <USBD_SetAddress+0x76>
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	88db      	ldrh	r3, [r3, #6]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d12d      	bne.n	800e756 <USBD_SetAddress+0x76>
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	885b      	ldrh	r3, [r3, #2]
 800e6fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800e700:	d829      	bhi.n	800e756 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	885b      	ldrh	r3, [r3, #2]
 800e706:	b2db      	uxtb	r3, r3
 800e708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e70c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e714:	b2db      	uxtb	r3, r3
 800e716:	2b03      	cmp	r3, #3
 800e718:	d104      	bne.n	800e724 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 f9bc 	bl	800ea9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e722:	e01d      	b.n	800e760 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	7bfa      	ldrb	r2, [r7, #15]
 800e728:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e72c:	7bfb      	ldrb	r3, [r7, #15]
 800e72e:	4619      	mov	r1, r3
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f000 ff27 	bl	800f584 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f000 fa8d 	bl	800ec56 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e73c:	7bfb      	ldrb	r3, [r7, #15]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d004      	beq.n	800e74c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2202      	movs	r2, #2
 800e746:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e74a:	e009      	b.n	800e760 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2201      	movs	r2, #1
 800e750:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e754:	e004      	b.n	800e760 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e756:	6839      	ldr	r1, [r7, #0]
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f000 f99e 	bl	800ea9a <USBD_CtlError>
  }
}
 800e75e:	bf00      	nop
 800e760:	bf00      	nop
 800e762:	3710      	adds	r7, #16
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e772:	2300      	movs	r3, #0
 800e774:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	885b      	ldrh	r3, [r3, #2]
 800e77a:	b2da      	uxtb	r2, r3
 800e77c:	4b4e      	ldr	r3, [pc, #312]	@ (800e8b8 <USBD_SetConfig+0x150>)
 800e77e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e780:	4b4d      	ldr	r3, [pc, #308]	@ (800e8b8 <USBD_SetConfig+0x150>)
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	2b01      	cmp	r3, #1
 800e786:	d905      	bls.n	800e794 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e788:	6839      	ldr	r1, [r7, #0]
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 f985 	bl	800ea9a <USBD_CtlError>
    return USBD_FAIL;
 800e790:	2303      	movs	r3, #3
 800e792:	e08c      	b.n	800e8ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	2b02      	cmp	r3, #2
 800e79e:	d002      	beq.n	800e7a6 <USBD_SetConfig+0x3e>
 800e7a0:	2b03      	cmp	r3, #3
 800e7a2:	d029      	beq.n	800e7f8 <USBD_SetConfig+0x90>
 800e7a4:	e075      	b.n	800e892 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e7a6:	4b44      	ldr	r3, [pc, #272]	@ (800e8b8 <USBD_SetConfig+0x150>)
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d020      	beq.n	800e7f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e7ae:	4b42      	ldr	r3, [pc, #264]	@ (800e8b8 <USBD_SetConfig+0x150>)
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e7b8:	4b3f      	ldr	r3, [pc, #252]	@ (800e8b8 <USBD_SetConfig+0x150>)
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	4619      	mov	r1, r3
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f7fe ffa3 	bl	800d70a <USBD_SetClassConfig>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e7c8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d008      	beq.n	800e7e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e7ce:	6839      	ldr	r1, [r7, #0]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 f962 	bl	800ea9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2202      	movs	r2, #2
 800e7da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e7de:	e065      	b.n	800e8ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f000 fa38 	bl	800ec56 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2203      	movs	r2, #3
 800e7ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e7ee:	e05d      	b.n	800e8ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 fa30 	bl	800ec56 <USBD_CtlSendStatus>
      break;
 800e7f6:	e059      	b.n	800e8ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e7f8:	4b2f      	ldr	r3, [pc, #188]	@ (800e8b8 <USBD_SetConfig+0x150>)
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d112      	bne.n	800e826 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2202      	movs	r2, #2
 800e804:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e808:	4b2b      	ldr	r3, [pc, #172]	@ (800e8b8 <USBD_SetConfig+0x150>)
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	461a      	mov	r2, r3
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e812:	4b29      	ldr	r3, [pc, #164]	@ (800e8b8 <USBD_SetConfig+0x150>)
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	4619      	mov	r1, r3
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f7fe ff92 	bl	800d742 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 fa19 	bl	800ec56 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e824:	e042      	b.n	800e8ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e826:	4b24      	ldr	r3, [pc, #144]	@ (800e8b8 <USBD_SetConfig+0x150>)
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	461a      	mov	r2, r3
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	429a      	cmp	r2, r3
 800e832:	d02a      	beq.n	800e88a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	4619      	mov	r1, r3
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f7fe ff80 	bl	800d742 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e842:	4b1d      	ldr	r3, [pc, #116]	@ (800e8b8 <USBD_SetConfig+0x150>)
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	461a      	mov	r2, r3
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e84c:	4b1a      	ldr	r3, [pc, #104]	@ (800e8b8 <USBD_SetConfig+0x150>)
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	4619      	mov	r1, r3
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f7fe ff59 	bl	800d70a <USBD_SetClassConfig>
 800e858:	4603      	mov	r3, r0
 800e85a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e85c:	7bfb      	ldrb	r3, [r7, #15]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d00f      	beq.n	800e882 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e862:	6839      	ldr	r1, [r7, #0]
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f000 f918 	bl	800ea9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	4619      	mov	r1, r3
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7fe ff65 	bl	800d742 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2202      	movs	r2, #2
 800e87c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e880:	e014      	b.n	800e8ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 f9e7 	bl	800ec56 <USBD_CtlSendStatus>
      break;
 800e888:	e010      	b.n	800e8ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f000 f9e3 	bl	800ec56 <USBD_CtlSendStatus>
      break;
 800e890:	e00c      	b.n	800e8ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e892:	6839      	ldr	r1, [r7, #0]
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 f900 	bl	800ea9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e89a:	4b07      	ldr	r3, [pc, #28]	@ (800e8b8 <USBD_SetConfig+0x150>)
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	4619      	mov	r1, r3
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7fe ff4e 	bl	800d742 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e8a6:	2303      	movs	r3, #3
 800e8a8:	73fb      	strb	r3, [r7, #15]
      break;
 800e8aa:	bf00      	nop
  }

  return ret;
 800e8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	20000860 	.word	0x20000860

0800e8bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	88db      	ldrh	r3, [r3, #6]
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d004      	beq.n	800e8d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e8ce:	6839      	ldr	r1, [r7, #0]
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 f8e2 	bl	800ea9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e8d6:	e023      	b.n	800e920 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	2b02      	cmp	r3, #2
 800e8e2:	dc02      	bgt.n	800e8ea <USBD_GetConfig+0x2e>
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	dc03      	bgt.n	800e8f0 <USBD_GetConfig+0x34>
 800e8e8:	e015      	b.n	800e916 <USBD_GetConfig+0x5a>
 800e8ea:	2b03      	cmp	r3, #3
 800e8ec:	d00b      	beq.n	800e906 <USBD_GetConfig+0x4a>
 800e8ee:	e012      	b.n	800e916 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	3308      	adds	r3, #8
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f000 f948 	bl	800eb94 <USBD_CtlSendData>
        break;
 800e904:	e00c      	b.n	800e920 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	3304      	adds	r3, #4
 800e90a:	2201      	movs	r2, #1
 800e90c:	4619      	mov	r1, r3
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 f940 	bl	800eb94 <USBD_CtlSendData>
        break;
 800e914:	e004      	b.n	800e920 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e916:	6839      	ldr	r1, [r7, #0]
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 f8be 	bl	800ea9a <USBD_CtlError>
        break;
 800e91e:	bf00      	nop
}
 800e920:	bf00      	nop
 800e922:	3708      	adds	r7, #8
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}

0800e928 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	3b01      	subs	r3, #1
 800e93c:	2b02      	cmp	r3, #2
 800e93e:	d81e      	bhi.n	800e97e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	88db      	ldrh	r3, [r3, #6]
 800e944:	2b02      	cmp	r3, #2
 800e946:	d004      	beq.n	800e952 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e948:	6839      	ldr	r1, [r7, #0]
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f000 f8a5 	bl	800ea9a <USBD_CtlError>
        break;
 800e950:	e01a      	b.n	800e988 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2201      	movs	r2, #1
 800e956:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d005      	beq.n	800e96e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	f043 0202 	orr.w	r2, r3, #2
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	330c      	adds	r3, #12
 800e972:	2202      	movs	r2, #2
 800e974:	4619      	mov	r1, r3
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 f90c 	bl	800eb94 <USBD_CtlSendData>
      break;
 800e97c:	e004      	b.n	800e988 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e97e:	6839      	ldr	r1, [r7, #0]
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f000 f88a 	bl	800ea9a <USBD_CtlError>
      break;
 800e986:	bf00      	nop
  }
}
 800e988:	bf00      	nop
 800e98a:	3708      	adds	r7, #8
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b082      	sub	sp, #8
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	885b      	ldrh	r3, [r3, #2]
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d107      	bne.n	800e9b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 f953 	bl	800ec56 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e9b0:	e013      	b.n	800e9da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	885b      	ldrh	r3, [r3, #2]
 800e9b6:	2b02      	cmp	r3, #2
 800e9b8:	d10b      	bne.n	800e9d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	889b      	ldrh	r3, [r3, #4]
 800e9be:	0a1b      	lsrs	r3, r3, #8
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	b2da      	uxtb	r2, r3
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 f943 	bl	800ec56 <USBD_CtlSendStatus>
}
 800e9d0:	e003      	b.n	800e9da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e9d2:	6839      	ldr	r1, [r7, #0]
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 f860 	bl	800ea9a <USBD_CtlError>
}
 800e9da:	bf00      	nop
 800e9dc:	3708      	adds	r7, #8
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b082      	sub	sp, #8
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
 800e9ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	3b01      	subs	r3, #1
 800e9f6:	2b02      	cmp	r3, #2
 800e9f8:	d80b      	bhi.n	800ea12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	885b      	ldrh	r3, [r3, #2]
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d10c      	bne.n	800ea1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f000 f923 	bl	800ec56 <USBD_CtlSendStatus>
      }
      break;
 800ea10:	e004      	b.n	800ea1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ea12:	6839      	ldr	r1, [r7, #0]
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f000 f840 	bl	800ea9a <USBD_CtlError>
      break;
 800ea1a:	e000      	b.n	800ea1e <USBD_ClrFeature+0x3c>
      break;
 800ea1c:	bf00      	nop
  }
}
 800ea1e:	bf00      	nop
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}

0800ea26 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ea26:	b580      	push	{r7, lr}
 800ea28:	b084      	sub	sp, #16
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
 800ea2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	781a      	ldrb	r2, [r3, #0]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	781a      	ldrb	r2, [r3, #0]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ea50:	68f8      	ldr	r0, [r7, #12]
 800ea52:	f7ff fa13 	bl	800de7c <SWAPBYTE>
 800ea56:	4603      	mov	r3, r0
 800ea58:	461a      	mov	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	3301      	adds	r3, #1
 800ea62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	3301      	adds	r3, #1
 800ea68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	f7ff fa06 	bl	800de7c <SWAPBYTE>
 800ea70:	4603      	mov	r3, r0
 800ea72:	461a      	mov	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	3301      	adds	r3, #1
 800ea82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f7ff f9f9 	bl	800de7c <SWAPBYTE>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	80da      	strh	r2, [r3, #6]
}
 800ea92:	bf00      	nop
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b082      	sub	sp, #8
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
 800eaa2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eaa4:	2180      	movs	r1, #128	@ 0x80
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f000 fd02 	bl	800f4b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eaac:	2100      	movs	r1, #0
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f000 fcfe 	bl	800f4b0 <USBD_LL_StallEP>
}
 800eab4:	bf00      	nop
 800eab6:	3708      	adds	r7, #8
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b086      	sub	sp, #24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eac8:	2300      	movs	r3, #0
 800eaca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d042      	beq.n	800eb58 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ead6:	6938      	ldr	r0, [r7, #16]
 800ead8:	f000 f842 	bl	800eb60 <USBD_GetLen>
 800eadc:	4603      	mov	r3, r0
 800eade:	3301      	adds	r3, #1
 800eae0:	005b      	lsls	r3, r3, #1
 800eae2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eae6:	d808      	bhi.n	800eafa <USBD_GetString+0x3e>
 800eae8:	6938      	ldr	r0, [r7, #16]
 800eaea:	f000 f839 	bl	800eb60 <USBD_GetLen>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	005b      	lsls	r3, r3, #1
 800eaf6:	b29a      	uxth	r2, r3
 800eaf8:	e001      	b.n	800eafe <USBD_GetString+0x42>
 800eafa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eb02:	7dfb      	ldrb	r3, [r7, #23]
 800eb04:	68ba      	ldr	r2, [r7, #8]
 800eb06:	4413      	add	r3, r2
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	7812      	ldrb	r2, [r2, #0]
 800eb0c:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb0e:	7dfb      	ldrb	r3, [r7, #23]
 800eb10:	3301      	adds	r3, #1
 800eb12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eb14:	7dfb      	ldrb	r3, [r7, #23]
 800eb16:	68ba      	ldr	r2, [r7, #8]
 800eb18:	4413      	add	r3, r2
 800eb1a:	2203      	movs	r2, #3
 800eb1c:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb1e:	7dfb      	ldrb	r3, [r7, #23]
 800eb20:	3301      	adds	r3, #1
 800eb22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eb24:	e013      	b.n	800eb4e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800eb26:	7dfb      	ldrb	r3, [r7, #23]
 800eb28:	68ba      	ldr	r2, [r7, #8]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	693a      	ldr	r2, [r7, #16]
 800eb2e:	7812      	ldrb	r2, [r2, #0]
 800eb30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	3301      	adds	r3, #1
 800eb36:	613b      	str	r3, [r7, #16]
    idx++;
 800eb38:	7dfb      	ldrb	r3, [r7, #23]
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eb3e:	7dfb      	ldrb	r3, [r7, #23]
 800eb40:	68ba      	ldr	r2, [r7, #8]
 800eb42:	4413      	add	r3, r2
 800eb44:	2200      	movs	r2, #0
 800eb46:	701a      	strb	r2, [r3, #0]
    idx++;
 800eb48:	7dfb      	ldrb	r3, [r7, #23]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	781b      	ldrb	r3, [r3, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1e7      	bne.n	800eb26 <USBD_GetString+0x6a>
 800eb56:	e000      	b.n	800eb5a <USBD_GetString+0x9e>
    return;
 800eb58:	bf00      	nop
  }
}
 800eb5a:	3718      	adds	r7, #24
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b085      	sub	sp, #20
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eb70:	e005      	b.n	800eb7e <USBD_GetLen+0x1e>
  {
    len++;
 800eb72:	7bfb      	ldrb	r3, [r7, #15]
 800eb74:	3301      	adds	r3, #1
 800eb76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d1f5      	bne.n	800eb72 <USBD_GetLen+0x12>
  }

  return len;
 800eb86:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3714      	adds	r7, #20
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr

0800eb94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2202      	movs	r2, #2
 800eba4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	68ba      	ldr	r2, [r7, #8]
 800ebb2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	687a      	ldr	r2, [r7, #4]
 800ebb8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	68ba      	ldr	r2, [r7, #8]
 800ebbe:	2100      	movs	r1, #0
 800ebc0:	68f8      	ldr	r0, [r7, #12]
 800ebc2:	f000 fcfe 	bl	800f5c2 <USBD_LL_Transmit>

  return USBD_OK;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	60b9      	str	r1, [r7, #8]
 800ebda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	68ba      	ldr	r2, [r7, #8]
 800ebe0:	2100      	movs	r1, #0
 800ebe2:	68f8      	ldr	r0, [r7, #12]
 800ebe4:	f000 fced 	bl	800f5c2 <USBD_LL_Transmit>

  return USBD_OK;
 800ebe8:	2300      	movs	r3, #0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}

0800ebf2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ebf2:	b580      	push	{r7, lr}
 800ebf4:	b084      	sub	sp, #16
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	60f8      	str	r0, [r7, #12]
 800ebfa:	60b9      	str	r1, [r7, #8]
 800ebfc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2203      	movs	r2, #3
 800ec02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	68ba      	ldr	r2, [r7, #8]
 800ec12:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	68ba      	ldr	r2, [r7, #8]
 800ec22:	2100      	movs	r1, #0
 800ec24:	68f8      	ldr	r0, [r7, #12]
 800ec26:	f000 fced 	bl	800f604 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec2a:	2300      	movs	r3, #0
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3710      	adds	r7, #16
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b084      	sub	sp, #16
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	68ba      	ldr	r2, [r7, #8]
 800ec44:	2100      	movs	r1, #0
 800ec46:	68f8      	ldr	r0, [r7, #12]
 800ec48:	f000 fcdc 	bl	800f604 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec4c:	2300      	movs	r3, #0
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3710      	adds	r7, #16
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}

0800ec56 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b082      	sub	sp, #8
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2204      	movs	r2, #4
 800ec62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ec66:	2300      	movs	r3, #0
 800ec68:	2200      	movs	r2, #0
 800ec6a:	2100      	movs	r1, #0
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 fca8 	bl	800f5c2 <USBD_LL_Transmit>

  return USBD_OK;
 800ec72:	2300      	movs	r3, #0
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3708      	adds	r7, #8
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2205      	movs	r2, #5
 800ec88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	2200      	movs	r2, #0
 800ec90:	2100      	movs	r1, #0
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 fcb6 	bl	800f604 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec98:	2300      	movs	r3, #0
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
	...

0800eca4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800eca8:	2200      	movs	r2, #0
 800ecaa:	4912      	ldr	r1, [pc, #72]	@ (800ecf4 <MX_USB_DEVICE_Init+0x50>)
 800ecac:	4812      	ldr	r0, [pc, #72]	@ (800ecf8 <MX_USB_DEVICE_Init+0x54>)
 800ecae:	f7fe fcaf 	bl	800d610 <USBD_Init>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d001      	beq.n	800ecbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ecb8:	f7f4 f9da 	bl	8003070 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ecbc:	490f      	ldr	r1, [pc, #60]	@ (800ecfc <MX_USB_DEVICE_Init+0x58>)
 800ecbe:	480e      	ldr	r0, [pc, #56]	@ (800ecf8 <MX_USB_DEVICE_Init+0x54>)
 800ecc0:	f7fe fcd6 	bl	800d670 <USBD_RegisterClass>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d001      	beq.n	800ecce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ecca:	f7f4 f9d1 	bl	8003070 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ecce:	490c      	ldr	r1, [pc, #48]	@ (800ed00 <MX_USB_DEVICE_Init+0x5c>)
 800ecd0:	4809      	ldr	r0, [pc, #36]	@ (800ecf8 <MX_USB_DEVICE_Init+0x54>)
 800ecd2:	f7fe fc0d 	bl	800d4f0 <USBD_CDC_RegisterInterface>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d001      	beq.n	800ece0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ecdc:	f7f4 f9c8 	bl	8003070 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ece0:	4805      	ldr	r0, [pc, #20]	@ (800ecf8 <MX_USB_DEVICE_Init+0x54>)
 800ece2:	f7fe fcfb 	bl	800d6dc <USBD_Start>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d001      	beq.n	800ecf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ecec:	f7f4 f9c0 	bl	8003070 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ecf0:	bf00      	nop
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	200000ac 	.word	0x200000ac
 800ecf8:	20000864 	.word	0x20000864
 800ecfc:	20000018 	.word	0x20000018
 800ed00:	20000098 	.word	0x20000098

0800ed04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ed08:	2200      	movs	r2, #0
 800ed0a:	4905      	ldr	r1, [pc, #20]	@ (800ed20 <CDC_Init_FS+0x1c>)
 800ed0c:	4805      	ldr	r0, [pc, #20]	@ (800ed24 <CDC_Init_FS+0x20>)
 800ed0e:	f7fe fc09 	bl	800d524 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ed12:	4905      	ldr	r1, [pc, #20]	@ (800ed28 <CDC_Init_FS+0x24>)
 800ed14:	4803      	ldr	r0, [pc, #12]	@ (800ed24 <CDC_Init_FS+0x20>)
 800ed16:	f7fe fc27 	bl	800d568 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ed1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	20001340 	.word	0x20001340
 800ed24:	20000864 	.word	0x20000864
 800ed28:	20000b40 	.word	0x20000b40

0800ed2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ed30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	4603      	mov	r3, r0
 800ed44:	6039      	str	r1, [r7, #0]
 800ed46:	71fb      	strb	r3, [r7, #7]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ed4c:	79fb      	ldrb	r3, [r7, #7]
 800ed4e:	2b23      	cmp	r3, #35	@ 0x23
 800ed50:	d84a      	bhi.n	800ede8 <CDC_Control_FS+0xac>
 800ed52:	a201      	add	r2, pc, #4	@ (adr r2, 800ed58 <CDC_Control_FS+0x1c>)
 800ed54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed58:	0800ede9 	.word	0x0800ede9
 800ed5c:	0800ede9 	.word	0x0800ede9
 800ed60:	0800ede9 	.word	0x0800ede9
 800ed64:	0800ede9 	.word	0x0800ede9
 800ed68:	0800ede9 	.word	0x0800ede9
 800ed6c:	0800ede9 	.word	0x0800ede9
 800ed70:	0800ede9 	.word	0x0800ede9
 800ed74:	0800ede9 	.word	0x0800ede9
 800ed78:	0800ede9 	.word	0x0800ede9
 800ed7c:	0800ede9 	.word	0x0800ede9
 800ed80:	0800ede9 	.word	0x0800ede9
 800ed84:	0800ede9 	.word	0x0800ede9
 800ed88:	0800ede9 	.word	0x0800ede9
 800ed8c:	0800ede9 	.word	0x0800ede9
 800ed90:	0800ede9 	.word	0x0800ede9
 800ed94:	0800ede9 	.word	0x0800ede9
 800ed98:	0800ede9 	.word	0x0800ede9
 800ed9c:	0800ede9 	.word	0x0800ede9
 800eda0:	0800ede9 	.word	0x0800ede9
 800eda4:	0800ede9 	.word	0x0800ede9
 800eda8:	0800ede9 	.word	0x0800ede9
 800edac:	0800ede9 	.word	0x0800ede9
 800edb0:	0800ede9 	.word	0x0800ede9
 800edb4:	0800ede9 	.word	0x0800ede9
 800edb8:	0800ede9 	.word	0x0800ede9
 800edbc:	0800ede9 	.word	0x0800ede9
 800edc0:	0800ede9 	.word	0x0800ede9
 800edc4:	0800ede9 	.word	0x0800ede9
 800edc8:	0800ede9 	.word	0x0800ede9
 800edcc:	0800ede9 	.word	0x0800ede9
 800edd0:	0800ede9 	.word	0x0800ede9
 800edd4:	0800ede9 	.word	0x0800ede9
 800edd8:	0800ede9 	.word	0x0800ede9
 800eddc:	0800ede9 	.word	0x0800ede9
 800ede0:	0800ede9 	.word	0x0800ede9
 800ede4:	0800ede9 	.word	0x0800ede9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ede8:	bf00      	nop
  }

  return (USBD_OK);
 800edea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800edec:	4618      	mov	r0, r3
 800edee:	370c      	adds	r7, #12
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr

0800edf8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ee02:	6879      	ldr	r1, [r7, #4]
 800ee04:	4805      	ldr	r0, [pc, #20]	@ (800ee1c <CDC_Receive_FS+0x24>)
 800ee06:	f7fe fbaf 	bl	800d568 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ee0a:	4804      	ldr	r0, [pc, #16]	@ (800ee1c <CDC_Receive_FS+0x24>)
 800ee0c:	f7fe fbca 	bl	800d5a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ee10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3708      	adds	r7, #8
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	20000864 	.word	0x20000864

0800ee20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b087      	sub	sp, #28
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ee32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	371c      	adds	r7, #28
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee40:	4770      	bx	lr
	...

0800ee44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	6039      	str	r1, [r7, #0]
 800ee4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	2212      	movs	r2, #18
 800ee54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ee56:	4b03      	ldr	r3, [pc, #12]	@ (800ee64 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	370c      	adds	r7, #12
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr
 800ee64:	200000cc 	.word	0x200000cc

0800ee68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b083      	sub	sp, #12
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	4603      	mov	r3, r0
 800ee70:	6039      	str	r1, [r7, #0]
 800ee72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	2204      	movs	r2, #4
 800ee78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ee7a:	4b03      	ldr	r3, [pc, #12]	@ (800ee88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	370c      	adds	r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr
 800ee88:	200000ec 	.word	0x200000ec

0800ee8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	4603      	mov	r3, r0
 800ee94:	6039      	str	r1, [r7, #0]
 800ee96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ee98:	79fb      	ldrb	r3, [r7, #7]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d105      	bne.n	800eeaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ee9e:	683a      	ldr	r2, [r7, #0]
 800eea0:	4907      	ldr	r1, [pc, #28]	@ (800eec0 <USBD_FS_ProductStrDescriptor+0x34>)
 800eea2:	4808      	ldr	r0, [pc, #32]	@ (800eec4 <USBD_FS_ProductStrDescriptor+0x38>)
 800eea4:	f7ff fe0a 	bl	800eabc <USBD_GetString>
 800eea8:	e004      	b.n	800eeb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eeaa:	683a      	ldr	r2, [r7, #0]
 800eeac:	4904      	ldr	r1, [pc, #16]	@ (800eec0 <USBD_FS_ProductStrDescriptor+0x34>)
 800eeae:	4805      	ldr	r0, [pc, #20]	@ (800eec4 <USBD_FS_ProductStrDescriptor+0x38>)
 800eeb0:	f7ff fe04 	bl	800eabc <USBD_GetString>
  }
  return USBD_StrDesc;
 800eeb4:	4b02      	ldr	r3, [pc, #8]	@ (800eec0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3708      	adds	r7, #8
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
 800eebe:	bf00      	nop
 800eec0:	20001b40 	.word	0x20001b40
 800eec4:	08012598 	.word	0x08012598

0800eec8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	4603      	mov	r3, r0
 800eed0:	6039      	str	r1, [r7, #0]
 800eed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eed4:	683a      	ldr	r2, [r7, #0]
 800eed6:	4904      	ldr	r1, [pc, #16]	@ (800eee8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eed8:	4804      	ldr	r0, [pc, #16]	@ (800eeec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eeda:	f7ff fdef 	bl	800eabc <USBD_GetString>
  return USBD_StrDesc;
 800eede:	4b02      	ldr	r3, [pc, #8]	@ (800eee8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	20001b40 	.word	0x20001b40
 800eeec:	080125b0 	.word	0x080125b0

0800eef0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	4603      	mov	r3, r0
 800eef8:	6039      	str	r1, [r7, #0]
 800eefa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	221a      	movs	r2, #26
 800ef00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ef02:	f000 f855 	bl	800efb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ef06:	4b02      	ldr	r3, [pc, #8]	@ (800ef10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3708      	adds	r7, #8
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	200000f0 	.word	0x200000f0

0800ef14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	6039      	str	r1, [r7, #0]
 800ef1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ef20:	79fb      	ldrb	r3, [r7, #7]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d105      	bne.n	800ef32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef26:	683a      	ldr	r2, [r7, #0]
 800ef28:	4907      	ldr	r1, [pc, #28]	@ (800ef48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef2a:	4808      	ldr	r0, [pc, #32]	@ (800ef4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef2c:	f7ff fdc6 	bl	800eabc <USBD_GetString>
 800ef30:	e004      	b.n	800ef3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef32:	683a      	ldr	r2, [r7, #0]
 800ef34:	4904      	ldr	r1, [pc, #16]	@ (800ef48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef36:	4805      	ldr	r0, [pc, #20]	@ (800ef4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef38:	f7ff fdc0 	bl	800eabc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef3c:	4b02      	ldr	r3, [pc, #8]	@ (800ef48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3708      	adds	r7, #8
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	20001b40 	.word	0x20001b40
 800ef4c:	080125c4 	.word	0x080125c4

0800ef50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	4603      	mov	r3, r0
 800ef58:	6039      	str	r1, [r7, #0]
 800ef5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef5c:	79fb      	ldrb	r3, [r7, #7]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d105      	bne.n	800ef6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef62:	683a      	ldr	r2, [r7, #0]
 800ef64:	4907      	ldr	r1, [pc, #28]	@ (800ef84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef66:	4808      	ldr	r0, [pc, #32]	@ (800ef88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef68:	f7ff fda8 	bl	800eabc <USBD_GetString>
 800ef6c:	e004      	b.n	800ef78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef6e:	683a      	ldr	r2, [r7, #0]
 800ef70:	4904      	ldr	r1, [pc, #16]	@ (800ef84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef72:	4805      	ldr	r0, [pc, #20]	@ (800ef88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef74:	f7ff fda2 	bl	800eabc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef78:	4b02      	ldr	r3, [pc, #8]	@ (800ef84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3708      	adds	r7, #8
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	20001b40 	.word	0x20001b40
 800ef88:	080125d0 	.word	0x080125d0

0800ef8c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	4603      	mov	r3, r0
 800ef94:	6039      	str	r1, [r7, #0]
 800ef96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	220c      	movs	r2, #12
 800ef9c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ef9e:	4b03      	ldr	r3, [pc, #12]	@ (800efac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	370c      	adds	r7, #12
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr
 800efac:	200000e0 	.word	0x200000e0

0800efb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800efb6:	4b0f      	ldr	r3, [pc, #60]	@ (800eff4 <Get_SerialNum+0x44>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800efbc:	4b0e      	ldr	r3, [pc, #56]	@ (800eff8 <Get_SerialNum+0x48>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800efc2:	4b0e      	ldr	r3, [pc, #56]	@ (800effc <Get_SerialNum+0x4c>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800efc8:	68fa      	ldr	r2, [r7, #12]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	4413      	add	r3, r2
 800efce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d009      	beq.n	800efea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800efd6:	2208      	movs	r2, #8
 800efd8:	4909      	ldr	r1, [pc, #36]	@ (800f000 <Get_SerialNum+0x50>)
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f000 f814 	bl	800f008 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800efe0:	2204      	movs	r2, #4
 800efe2:	4908      	ldr	r1, [pc, #32]	@ (800f004 <Get_SerialNum+0x54>)
 800efe4:	68b8      	ldr	r0, [r7, #8]
 800efe6:	f000 f80f 	bl	800f008 <IntToUnicode>
  }
}
 800efea:	bf00      	nop
 800efec:	3710      	adds	r7, #16
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	1ff07a10 	.word	0x1ff07a10
 800eff8:	1ff07a14 	.word	0x1ff07a14
 800effc:	1ff07a18 	.word	0x1ff07a18
 800f000:	200000f2 	.word	0x200000f2
 800f004:	20000102 	.word	0x20000102

0800f008 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f008:	b480      	push	{r7}
 800f00a:	b087      	sub	sp, #28
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	4613      	mov	r3, r2
 800f014:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f016:	2300      	movs	r3, #0
 800f018:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f01a:	2300      	movs	r3, #0
 800f01c:	75fb      	strb	r3, [r7, #23]
 800f01e:	e027      	b.n	800f070 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	0f1b      	lsrs	r3, r3, #28
 800f024:	2b09      	cmp	r3, #9
 800f026:	d80b      	bhi.n	800f040 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	0f1b      	lsrs	r3, r3, #28
 800f02c:	b2da      	uxtb	r2, r3
 800f02e:	7dfb      	ldrb	r3, [r7, #23]
 800f030:	005b      	lsls	r3, r3, #1
 800f032:	4619      	mov	r1, r3
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	440b      	add	r3, r1
 800f038:	3230      	adds	r2, #48	@ 0x30
 800f03a:	b2d2      	uxtb	r2, r2
 800f03c:	701a      	strb	r2, [r3, #0]
 800f03e:	e00a      	b.n	800f056 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	0f1b      	lsrs	r3, r3, #28
 800f044:	b2da      	uxtb	r2, r3
 800f046:	7dfb      	ldrb	r3, [r7, #23]
 800f048:	005b      	lsls	r3, r3, #1
 800f04a:	4619      	mov	r1, r3
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	440b      	add	r3, r1
 800f050:	3237      	adds	r2, #55	@ 0x37
 800f052:	b2d2      	uxtb	r2, r2
 800f054:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	011b      	lsls	r3, r3, #4
 800f05a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f05c:	7dfb      	ldrb	r3, [r7, #23]
 800f05e:	005b      	lsls	r3, r3, #1
 800f060:	3301      	adds	r3, #1
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	4413      	add	r3, r2
 800f066:	2200      	movs	r2, #0
 800f068:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f06a:	7dfb      	ldrb	r3, [r7, #23]
 800f06c:	3301      	adds	r3, #1
 800f06e:	75fb      	strb	r3, [r7, #23]
 800f070:	7dfa      	ldrb	r2, [r7, #23]
 800f072:	79fb      	ldrb	r3, [r7, #7]
 800f074:	429a      	cmp	r2, r3
 800f076:	d3d3      	bcc.n	800f020 <IntToUnicode+0x18>
  }
}
 800f078:	bf00      	nop
 800f07a:	bf00      	nop
 800f07c:	371c      	adds	r7, #28
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr
	...

0800f088 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b0aa      	sub	sp, #168	@ 0xa8
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f090:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800f094:	2200      	movs	r2, #0
 800f096:	601a      	str	r2, [r3, #0]
 800f098:	605a      	str	r2, [r3, #4]
 800f09a:	609a      	str	r2, [r3, #8]
 800f09c:	60da      	str	r2, [r3, #12]
 800f09e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f0a0:	f107 0314 	add.w	r3, r7, #20
 800f0a4:	2280      	movs	r2, #128	@ 0x80
 800f0a6:	2100      	movs	r1, #0
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f001 f978 	bl	801039e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f0b6:	d151      	bne.n	800f15c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800f0b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800f0bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f0c4:	f107 0314 	add.w	r3, r7, #20
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7f8 f9c1 	bl	8007450 <HAL_RCCEx_PeriphCLKConfig>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d001      	beq.n	800f0d8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f0d4:	f7f3 ffcc 	bl	8003070 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f0d8:	4b22      	ldr	r3, [pc, #136]	@ (800f164 <HAL_PCD_MspInit+0xdc>)
 800f0da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0dc:	4a21      	ldr	r2, [pc, #132]	@ (800f164 <HAL_PCD_MspInit+0xdc>)
 800f0de:	f043 0301 	orr.w	r3, r3, #1
 800f0e2:	6313      	str	r3, [r2, #48]	@ 0x30
 800f0e4:	4b1f      	ldr	r3, [pc, #124]	@ (800f164 <HAL_PCD_MspInit+0xdc>)
 800f0e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0e8:	f003 0301 	and.w	r3, r3, #1
 800f0ec:	613b      	str	r3, [r7, #16]
 800f0ee:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f0f0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f0f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0f8:	2302      	movs	r3, #2
 800f0fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0fe:	2300      	movs	r3, #0
 800f100:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f104:	2303      	movs	r3, #3
 800f106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f10a:	230a      	movs	r3, #10
 800f10c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f110:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800f114:	4619      	mov	r1, r3
 800f116:	4814      	ldr	r0, [pc, #80]	@ (800f168 <HAL_PCD_MspInit+0xe0>)
 800f118:	f7f5 fef4 	bl	8004f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f11c:	4b11      	ldr	r3, [pc, #68]	@ (800f164 <HAL_PCD_MspInit+0xdc>)
 800f11e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f120:	4a10      	ldr	r2, [pc, #64]	@ (800f164 <HAL_PCD_MspInit+0xdc>)
 800f122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f126:	6353      	str	r3, [r2, #52]	@ 0x34
 800f128:	4b0e      	ldr	r3, [pc, #56]	@ (800f164 <HAL_PCD_MspInit+0xdc>)
 800f12a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f12c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f130:	60fb      	str	r3, [r7, #12]
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	4b0b      	ldr	r3, [pc, #44]	@ (800f164 <HAL_PCD_MspInit+0xdc>)
 800f136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f138:	4a0a      	ldr	r2, [pc, #40]	@ (800f164 <HAL_PCD_MspInit+0xdc>)
 800f13a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f13e:	6453      	str	r3, [r2, #68]	@ 0x44
 800f140:	4b08      	ldr	r3, [pc, #32]	@ (800f164 <HAL_PCD_MspInit+0xdc>)
 800f142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f148:	60bb      	str	r3, [r7, #8]
 800f14a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f14c:	2200      	movs	r2, #0
 800f14e:	2100      	movs	r1, #0
 800f150:	2043      	movs	r0, #67	@ 0x43
 800f152:	f7f5 fa1e 	bl	8004592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f156:	2043      	movs	r0, #67	@ 0x43
 800f158:	f7f5 fa37 	bl	80045ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f15c:	bf00      	nop
 800f15e:	37a8      	adds	r7, #168	@ 0xa8
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	40023800 	.word	0x40023800
 800f168:	40020000 	.word	0x40020000

0800f16c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b082      	sub	sp, #8
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f180:	4619      	mov	r1, r3
 800f182:	4610      	mov	r0, r2
 800f184:	f7fe faf7 	bl	800d776 <USBD_LL_SetupStage>
}
 800f188:	bf00      	nop
 800f18a:	3708      	adds	r7, #8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	460b      	mov	r3, r1
 800f19a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800f1a2:	78fa      	ldrb	r2, [r7, #3]
 800f1a4:	6879      	ldr	r1, [r7, #4]
 800f1a6:	4613      	mov	r3, r2
 800f1a8:	00db      	lsls	r3, r3, #3
 800f1aa:	4413      	add	r3, r2
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	440b      	add	r3, r1
 800f1b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	78fb      	ldrb	r3, [r7, #3]
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	f7fe fb31 	bl	800d820 <USBD_LL_DataOutStage>
}
 800f1be:	bf00      	nop
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b082      	sub	sp, #8
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800f1d8:	78fa      	ldrb	r2, [r7, #3]
 800f1da:	6879      	ldr	r1, [r7, #4]
 800f1dc:	4613      	mov	r3, r2
 800f1de:	00db      	lsls	r3, r3, #3
 800f1e0:	4413      	add	r3, r2
 800f1e2:	009b      	lsls	r3, r3, #2
 800f1e4:	440b      	add	r3, r1
 800f1e6:	3320      	adds	r3, #32
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	78fb      	ldrb	r3, [r7, #3]
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	f7fe fbd3 	bl	800d998 <USBD_LL_DataInStage>
}
 800f1f2:	bf00      	nop
 800f1f4:	3708      	adds	r7, #8
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	b082      	sub	sp, #8
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fe fd17 	bl	800dc3c <USBD_LL_SOF>
}
 800f20e:	bf00      	nop
 800f210:	3708      	adds	r7, #8
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b084      	sub	sp, #16
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f21e:	2301      	movs	r3, #1
 800f220:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	79db      	ldrb	r3, [r3, #7]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d102      	bne.n	800f230 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f22a:	2300      	movs	r3, #0
 800f22c:	73fb      	strb	r3, [r7, #15]
 800f22e:	e008      	b.n	800f242 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	79db      	ldrb	r3, [r3, #7]
 800f234:	2b02      	cmp	r3, #2
 800f236:	d102      	bne.n	800f23e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f238:	2301      	movs	r3, #1
 800f23a:	73fb      	strb	r3, [r7, #15]
 800f23c:	e001      	b.n	800f242 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f23e:	f7f3 ff17 	bl	8003070 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f248:	7bfa      	ldrb	r2, [r7, #15]
 800f24a:	4611      	mov	r1, r2
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7fe fcb1 	bl	800dbb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f258:	4618      	mov	r0, r3
 800f25a:	f7fe fc58 	bl	800db0e <USBD_LL_Reset>
}
 800f25e:	bf00      	nop
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
	...

0800f268 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f276:	4618      	mov	r0, r3
 800f278:	f7fe fcac 	bl	800dbd4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	6812      	ldr	r2, [r2, #0]
 800f28a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f28e:	f043 0301 	orr.w	r3, r3, #1
 800f292:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	7adb      	ldrb	r3, [r3, #11]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d005      	beq.n	800f2a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f29c:	4b04      	ldr	r3, [pc, #16]	@ (800f2b0 <HAL_PCD_SuspendCallback+0x48>)
 800f29e:	691b      	ldr	r3, [r3, #16]
 800f2a0:	4a03      	ldr	r2, [pc, #12]	@ (800f2b0 <HAL_PCD_SuspendCallback+0x48>)
 800f2a2:	f043 0306 	orr.w	r3, r3, #6
 800f2a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f2a8:	bf00      	nop
 800f2aa:	3708      	adds	r7, #8
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	e000ed00 	.word	0xe000ed00

0800f2b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7fe fca2 	bl	800dc0c <USBD_LL_Resume>
}
 800f2c8:	bf00      	nop
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	460b      	mov	r3, r1
 800f2da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f2e2:	78fa      	ldrb	r2, [r7, #3]
 800f2e4:	4611      	mov	r1, r2
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7fe fcfa 	bl	800dce0 <USBD_LL_IsoOUTIncomplete>
}
 800f2ec:	bf00      	nop
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	460b      	mov	r3, r1
 800f2fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f306:	78fa      	ldrb	r2, [r7, #3]
 800f308:	4611      	mov	r1, r2
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7fe fcb6 	bl	800dc7c <USBD_LL_IsoINIncomplete>
}
 800f310:	bf00      	nop
 800f312:	3708      	adds	r7, #8
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f326:	4618      	mov	r0, r3
 800f328:	f7fe fd0c 	bl	800dd44 <USBD_LL_DevConnected>
}
 800f32c:	bf00      	nop
 800f32e:	3708      	adds	r7, #8
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b082      	sub	sp, #8
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f342:	4618      	mov	r0, r3
 800f344:	f7fe fd09 	bl	800dd5a <USBD_LL_DevDisconnected>
}
 800f348:	bf00      	nop
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d13f      	bne.n	800f3e0 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f360:	4a22      	ldr	r2, [pc, #136]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	4a20      	ldr	r2, [pc, #128]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f36c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f370:	4b1e      	ldr	r3, [pc, #120]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f372:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f376:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f378:	4b1c      	ldr	r3, [pc, #112]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f37a:	2206      	movs	r2, #6
 800f37c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f37e:	4b1b      	ldr	r3, [pc, #108]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f380:	2202      	movs	r2, #2
 800f382:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f384:	4b19      	ldr	r3, [pc, #100]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f386:	2200      	movs	r2, #0
 800f388:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f38a:	4b18      	ldr	r3, [pc, #96]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f38c:	2202      	movs	r2, #2
 800f38e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f390:	4b16      	ldr	r3, [pc, #88]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f392:	2200      	movs	r2, #0
 800f394:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f396:	4b15      	ldr	r3, [pc, #84]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f398:	2200      	movs	r2, #0
 800f39a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f39c:	4b13      	ldr	r3, [pc, #76]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f39e:	2200      	movs	r2, #0
 800f3a0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f3a2:	4b12      	ldr	r3, [pc, #72]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f3a8:	4b10      	ldr	r3, [pc, #64]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f3ae:	4b0f      	ldr	r3, [pc, #60]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f3b4:	480d      	ldr	r0, [pc, #52]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f3b6:	f7f6 f8a6 	bl	8005506 <HAL_PCD_Init>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d001      	beq.n	800f3c4 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800f3c0:	f7f3 fe56 	bl	8003070 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f3c4:	2180      	movs	r1, #128	@ 0x80
 800f3c6:	4809      	ldr	r0, [pc, #36]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f3c8:	f7f7 faf3 	bl	80069b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f3cc:	2240      	movs	r2, #64	@ 0x40
 800f3ce:	2100      	movs	r1, #0
 800f3d0:	4806      	ldr	r0, [pc, #24]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f3d2:	f7f7 faa7 	bl	8006924 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f3d6:	2280      	movs	r2, #128	@ 0x80
 800f3d8:	2101      	movs	r1, #1
 800f3da:	4804      	ldr	r0, [pc, #16]	@ (800f3ec <USBD_LL_Init+0x9c>)
 800f3dc:	f7f7 faa2 	bl	8006924 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f3e0:	2300      	movs	r3, #0
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3708      	adds	r7, #8
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	20001d40 	.word	0x20001d40

0800f3f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f406:	4618      	mov	r0, r3
 800f408:	f7f6 f993 	bl	8005732 <HAL_PCD_Start>
 800f40c:	4603      	mov	r3, r0
 800f40e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f410:	7bfb      	ldrb	r3, [r7, #15]
 800f412:	4618      	mov	r0, r3
 800f414:	f000 f97e 	bl	800f714 <USBD_Get_USB_Status>
 800f418:	4603      	mov	r3, r0
 800f41a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f41c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3710      	adds	r7, #16
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}

0800f426 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f426:	b580      	push	{r7, lr}
 800f428:	b084      	sub	sp, #16
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	6078      	str	r0, [r7, #4]
 800f42e:	4608      	mov	r0, r1
 800f430:	4611      	mov	r1, r2
 800f432:	461a      	mov	r2, r3
 800f434:	4603      	mov	r3, r0
 800f436:	70fb      	strb	r3, [r7, #3]
 800f438:	460b      	mov	r3, r1
 800f43a:	70bb      	strb	r3, [r7, #2]
 800f43c:	4613      	mov	r3, r2
 800f43e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f440:	2300      	movs	r3, #0
 800f442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f444:	2300      	movs	r3, #0
 800f446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f44e:	78bb      	ldrb	r3, [r7, #2]
 800f450:	883a      	ldrh	r2, [r7, #0]
 800f452:	78f9      	ldrb	r1, [r7, #3]
 800f454:	f7f6 fe81 	bl	800615a <HAL_PCD_EP_Open>
 800f458:	4603      	mov	r3, r0
 800f45a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f45c:	7bfb      	ldrb	r3, [r7, #15]
 800f45e:	4618      	mov	r0, r3
 800f460:	f000 f958 	bl	800f714 <USBD_Get_USB_Status>
 800f464:	4603      	mov	r3, r0
 800f466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f468:	7bbb      	ldrb	r3, [r7, #14]
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f472:	b580      	push	{r7, lr}
 800f474:	b084      	sub	sp, #16
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
 800f47a:	460b      	mov	r3, r1
 800f47c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f47e:	2300      	movs	r3, #0
 800f480:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f482:	2300      	movs	r3, #0
 800f484:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f48c:	78fa      	ldrb	r2, [r7, #3]
 800f48e:	4611      	mov	r1, r2
 800f490:	4618      	mov	r0, r3
 800f492:	f7f6 fecc 	bl	800622e <HAL_PCD_EP_Close>
 800f496:	4603      	mov	r3, r0
 800f498:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f49a:	7bfb      	ldrb	r3, [r7, #15]
 800f49c:	4618      	mov	r0, r3
 800f49e:	f000 f939 	bl	800f714 <USBD_Get_USB_Status>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3710      	adds	r7, #16
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}

0800f4b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f4ca:	78fa      	ldrb	r2, [r7, #3]
 800f4cc:	4611      	mov	r1, r2
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7f6 ff84 	bl	80063dc <HAL_PCD_EP_SetStall>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f000 f91a 	bl	800f714 <USBD_Get_USB_Status>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}

0800f4ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4ee:	b580      	push	{r7, lr}
 800f4f0:	b084      	sub	sp, #16
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	6078      	str	r0, [r7, #4]
 800f4f6:	460b      	mov	r3, r1
 800f4f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4fe:	2300      	movs	r3, #0
 800f500:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f508:	78fa      	ldrb	r2, [r7, #3]
 800f50a:	4611      	mov	r1, r2
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7f6 ffc8 	bl	80064a2 <HAL_PCD_EP_ClrStall>
 800f512:	4603      	mov	r3, r0
 800f514:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f516:	7bfb      	ldrb	r3, [r7, #15]
 800f518:	4618      	mov	r0, r3
 800f51a:	f000 f8fb 	bl	800f714 <USBD_Get_USB_Status>
 800f51e:	4603      	mov	r3, r0
 800f520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f522:	7bbb      	ldrb	r3, [r7, #14]
}
 800f524:	4618      	mov	r0, r3
 800f526:	3710      	adds	r7, #16
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b085      	sub	sp, #20
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	460b      	mov	r3, r1
 800f536:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f53e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f544:	2b00      	cmp	r3, #0
 800f546:	da0b      	bge.n	800f560 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f548:	78fb      	ldrb	r3, [r7, #3]
 800f54a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f54e:	68f9      	ldr	r1, [r7, #12]
 800f550:	4613      	mov	r3, r2
 800f552:	00db      	lsls	r3, r3, #3
 800f554:	4413      	add	r3, r2
 800f556:	009b      	lsls	r3, r3, #2
 800f558:	440b      	add	r3, r1
 800f55a:	3316      	adds	r3, #22
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	e00b      	b.n	800f578 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f560:	78fb      	ldrb	r3, [r7, #3]
 800f562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f566:	68f9      	ldr	r1, [r7, #12]
 800f568:	4613      	mov	r3, r2
 800f56a:	00db      	lsls	r3, r3, #3
 800f56c:	4413      	add	r3, r2
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	440b      	add	r3, r1
 800f572:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f576:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3714      	adds	r7, #20
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	460b      	mov	r3, r1
 800f58e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f590:	2300      	movs	r3, #0
 800f592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f594:	2300      	movs	r3, #0
 800f596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f59e:	78fa      	ldrb	r2, [r7, #3]
 800f5a0:	4611      	mov	r1, r2
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7f6 fdb5 	bl	8006112 <HAL_PCD_SetAddress>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5ac:	7bfb      	ldrb	r3, [r7, #15]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f000 f8b0 	bl	800f714 <USBD_Get_USB_Status>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}

0800f5c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b086      	sub	sp, #24
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	60f8      	str	r0, [r7, #12]
 800f5ca:	607a      	str	r2, [r7, #4]
 800f5cc:	603b      	str	r3, [r7, #0]
 800f5ce:	460b      	mov	r3, r1
 800f5d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f5e0:	7af9      	ldrb	r1, [r7, #11]
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	f7f6 febf 	bl	8006368 <HAL_PCD_EP_Transmit>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5ee:	7dfb      	ldrb	r3, [r7, #23]
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f000 f88f 	bl	800f714 <USBD_Get_USB_Status>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f5fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3718      	adds	r7, #24
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b086      	sub	sp, #24
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	607a      	str	r2, [r7, #4]
 800f60e:	603b      	str	r3, [r7, #0]
 800f610:	460b      	mov	r3, r1
 800f612:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f614:	2300      	movs	r3, #0
 800f616:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f618:	2300      	movs	r3, #0
 800f61a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f622:	7af9      	ldrb	r1, [r7, #11]
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	687a      	ldr	r2, [r7, #4]
 800f628:	f7f6 fe4b 	bl	80062c2 <HAL_PCD_EP_Receive>
 800f62c:	4603      	mov	r3, r0
 800f62e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f630:	7dfb      	ldrb	r3, [r7, #23]
 800f632:	4618      	mov	r0, r3
 800f634:	f000 f86e 	bl	800f714 <USBD_Get_USB_Status>
 800f638:	4603      	mov	r3, r0
 800f63a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f63c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3718      	adds	r7, #24
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}

0800f646 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f646:	b580      	push	{r7, lr}
 800f648:	b082      	sub	sp, #8
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
 800f64e:	460b      	mov	r3, r1
 800f650:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f658:	78fa      	ldrb	r2, [r7, #3]
 800f65a:	4611      	mov	r1, r2
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7f6 fe6b 	bl	8006338 <HAL_PCD_EP_GetRxCount>
 800f662:	4603      	mov	r3, r0
}
 800f664:	4618      	mov	r0, r3
 800f666:	3708      	adds	r7, #8
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	460b      	mov	r3, r1
 800f676:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f678:	78fb      	ldrb	r3, [r7, #3]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d002      	beq.n	800f684 <HAL_PCDEx_LPM_Callback+0x18>
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d01f      	beq.n	800f6c2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f682:	e03b      	b.n	800f6fc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	7adb      	ldrb	r3, [r3, #11]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d007      	beq.n	800f69c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f68c:	f000 f83c 	bl	800f708 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f690:	4b1c      	ldr	r3, [pc, #112]	@ (800f704 <HAL_PCDEx_LPM_Callback+0x98>)
 800f692:	691b      	ldr	r3, [r3, #16]
 800f694:	4a1b      	ldr	r2, [pc, #108]	@ (800f704 <HAL_PCDEx_LPM_Callback+0x98>)
 800f696:	f023 0306 	bic.w	r3, r3, #6
 800f69a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	6812      	ldr	r2, [r2, #0]
 800f6aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f6ae:	f023 0301 	bic.w	r3, r3, #1
 800f6b2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fe faa6 	bl	800dc0c <USBD_LL_Resume>
    break;
 800f6c0:	e01c      	b.n	800f6fc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	6812      	ldr	r2, [r2, #0]
 800f6d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f6d4:	f043 0301 	orr.w	r3, r3, #1
 800f6d8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7fe fa77 	bl	800dbd4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	7adb      	ldrb	r3, [r3, #11]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d005      	beq.n	800f6fa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f6ee:	4b05      	ldr	r3, [pc, #20]	@ (800f704 <HAL_PCDEx_LPM_Callback+0x98>)
 800f6f0:	691b      	ldr	r3, [r3, #16]
 800f6f2:	4a04      	ldr	r2, [pc, #16]	@ (800f704 <HAL_PCDEx_LPM_Callback+0x98>)
 800f6f4:	f043 0306 	orr.w	r3, r3, #6
 800f6f8:	6113      	str	r3, [r2, #16]
    break;
 800f6fa:	bf00      	nop
}
 800f6fc:	bf00      	nop
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	e000ed00 	.word	0xe000ed00

0800f708 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f70c:	f7f3 f8c6 	bl	800289c <SystemClock_Config>
}
 800f710:	bf00      	nop
 800f712:	bd80      	pop	{r7, pc}

0800f714 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f714:	b480      	push	{r7}
 800f716:	b085      	sub	sp, #20
 800f718:	af00      	add	r7, sp, #0
 800f71a:	4603      	mov	r3, r0
 800f71c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f71e:	2300      	movs	r3, #0
 800f720:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f722:	79fb      	ldrb	r3, [r7, #7]
 800f724:	2b03      	cmp	r3, #3
 800f726:	d817      	bhi.n	800f758 <USBD_Get_USB_Status+0x44>
 800f728:	a201      	add	r2, pc, #4	@ (adr r2, 800f730 <USBD_Get_USB_Status+0x1c>)
 800f72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f72e:	bf00      	nop
 800f730:	0800f741 	.word	0x0800f741
 800f734:	0800f747 	.word	0x0800f747
 800f738:	0800f74d 	.word	0x0800f74d
 800f73c:	0800f753 	.word	0x0800f753
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f740:	2300      	movs	r3, #0
 800f742:	73fb      	strb	r3, [r7, #15]
    break;
 800f744:	e00b      	b.n	800f75e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f746:	2303      	movs	r3, #3
 800f748:	73fb      	strb	r3, [r7, #15]
    break;
 800f74a:	e008      	b.n	800f75e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f74c:	2301      	movs	r3, #1
 800f74e:	73fb      	strb	r3, [r7, #15]
    break;
 800f750:	e005      	b.n	800f75e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f752:	2303      	movs	r3, #3
 800f754:	73fb      	strb	r3, [r7, #15]
    break;
 800f756:	e002      	b.n	800f75e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f758:	2303      	movs	r3, #3
 800f75a:	73fb      	strb	r3, [r7, #15]
    break;
 800f75c:	bf00      	nop
  }
  return usb_status;
 800f75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f760:	4618      	mov	r0, r3
 800f762:	3714      	adds	r7, #20
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <malloc>:
 800f76c:	4b02      	ldr	r3, [pc, #8]	@ (800f778 <malloc+0xc>)
 800f76e:	4601      	mov	r1, r0
 800f770:	6818      	ldr	r0, [r3, #0]
 800f772:	f000 b82d 	b.w	800f7d0 <_malloc_r>
 800f776:	bf00      	nop
 800f778:	20000118 	.word	0x20000118

0800f77c <free>:
 800f77c:	4b02      	ldr	r3, [pc, #8]	@ (800f788 <free+0xc>)
 800f77e:	4601      	mov	r1, r0
 800f780:	6818      	ldr	r0, [r3, #0]
 800f782:	f001 bd05 	b.w	8011190 <_free_r>
 800f786:	bf00      	nop
 800f788:	20000118 	.word	0x20000118

0800f78c <sbrk_aligned>:
 800f78c:	b570      	push	{r4, r5, r6, lr}
 800f78e:	4e0f      	ldr	r6, [pc, #60]	@ (800f7cc <sbrk_aligned+0x40>)
 800f790:	460c      	mov	r4, r1
 800f792:	6831      	ldr	r1, [r6, #0]
 800f794:	4605      	mov	r5, r0
 800f796:	b911      	cbnz	r1, 800f79e <sbrk_aligned+0x12>
 800f798:	f000 fe42 	bl	8010420 <_sbrk_r>
 800f79c:	6030      	str	r0, [r6, #0]
 800f79e:	4621      	mov	r1, r4
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	f000 fe3d 	bl	8010420 <_sbrk_r>
 800f7a6:	1c43      	adds	r3, r0, #1
 800f7a8:	d103      	bne.n	800f7b2 <sbrk_aligned+0x26>
 800f7aa:	f04f 34ff 	mov.w	r4, #4294967295
 800f7ae:	4620      	mov	r0, r4
 800f7b0:	bd70      	pop	{r4, r5, r6, pc}
 800f7b2:	1cc4      	adds	r4, r0, #3
 800f7b4:	f024 0403 	bic.w	r4, r4, #3
 800f7b8:	42a0      	cmp	r0, r4
 800f7ba:	d0f8      	beq.n	800f7ae <sbrk_aligned+0x22>
 800f7bc:	1a21      	subs	r1, r4, r0
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f000 fe2e 	bl	8010420 <_sbrk_r>
 800f7c4:	3001      	adds	r0, #1
 800f7c6:	d1f2      	bne.n	800f7ae <sbrk_aligned+0x22>
 800f7c8:	e7ef      	b.n	800f7aa <sbrk_aligned+0x1e>
 800f7ca:	bf00      	nop
 800f7cc:	20002220 	.word	0x20002220

0800f7d0 <_malloc_r>:
 800f7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7d4:	1ccd      	adds	r5, r1, #3
 800f7d6:	f025 0503 	bic.w	r5, r5, #3
 800f7da:	3508      	adds	r5, #8
 800f7dc:	2d0c      	cmp	r5, #12
 800f7de:	bf38      	it	cc
 800f7e0:	250c      	movcc	r5, #12
 800f7e2:	2d00      	cmp	r5, #0
 800f7e4:	4606      	mov	r6, r0
 800f7e6:	db01      	blt.n	800f7ec <_malloc_r+0x1c>
 800f7e8:	42a9      	cmp	r1, r5
 800f7ea:	d904      	bls.n	800f7f6 <_malloc_r+0x26>
 800f7ec:	230c      	movs	r3, #12
 800f7ee:	6033      	str	r3, [r6, #0]
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f8cc <_malloc_r+0xfc>
 800f7fa:	f000 f869 	bl	800f8d0 <__malloc_lock>
 800f7fe:	f8d8 3000 	ldr.w	r3, [r8]
 800f802:	461c      	mov	r4, r3
 800f804:	bb44      	cbnz	r4, 800f858 <_malloc_r+0x88>
 800f806:	4629      	mov	r1, r5
 800f808:	4630      	mov	r0, r6
 800f80a:	f7ff ffbf 	bl	800f78c <sbrk_aligned>
 800f80e:	1c43      	adds	r3, r0, #1
 800f810:	4604      	mov	r4, r0
 800f812:	d158      	bne.n	800f8c6 <_malloc_r+0xf6>
 800f814:	f8d8 4000 	ldr.w	r4, [r8]
 800f818:	4627      	mov	r7, r4
 800f81a:	2f00      	cmp	r7, #0
 800f81c:	d143      	bne.n	800f8a6 <_malloc_r+0xd6>
 800f81e:	2c00      	cmp	r4, #0
 800f820:	d04b      	beq.n	800f8ba <_malloc_r+0xea>
 800f822:	6823      	ldr	r3, [r4, #0]
 800f824:	4639      	mov	r1, r7
 800f826:	4630      	mov	r0, r6
 800f828:	eb04 0903 	add.w	r9, r4, r3
 800f82c:	f000 fdf8 	bl	8010420 <_sbrk_r>
 800f830:	4581      	cmp	r9, r0
 800f832:	d142      	bne.n	800f8ba <_malloc_r+0xea>
 800f834:	6821      	ldr	r1, [r4, #0]
 800f836:	1a6d      	subs	r5, r5, r1
 800f838:	4629      	mov	r1, r5
 800f83a:	4630      	mov	r0, r6
 800f83c:	f7ff ffa6 	bl	800f78c <sbrk_aligned>
 800f840:	3001      	adds	r0, #1
 800f842:	d03a      	beq.n	800f8ba <_malloc_r+0xea>
 800f844:	6823      	ldr	r3, [r4, #0]
 800f846:	442b      	add	r3, r5
 800f848:	6023      	str	r3, [r4, #0]
 800f84a:	f8d8 3000 	ldr.w	r3, [r8]
 800f84e:	685a      	ldr	r2, [r3, #4]
 800f850:	bb62      	cbnz	r2, 800f8ac <_malloc_r+0xdc>
 800f852:	f8c8 7000 	str.w	r7, [r8]
 800f856:	e00f      	b.n	800f878 <_malloc_r+0xa8>
 800f858:	6822      	ldr	r2, [r4, #0]
 800f85a:	1b52      	subs	r2, r2, r5
 800f85c:	d420      	bmi.n	800f8a0 <_malloc_r+0xd0>
 800f85e:	2a0b      	cmp	r2, #11
 800f860:	d917      	bls.n	800f892 <_malloc_r+0xc2>
 800f862:	1961      	adds	r1, r4, r5
 800f864:	42a3      	cmp	r3, r4
 800f866:	6025      	str	r5, [r4, #0]
 800f868:	bf18      	it	ne
 800f86a:	6059      	strne	r1, [r3, #4]
 800f86c:	6863      	ldr	r3, [r4, #4]
 800f86e:	bf08      	it	eq
 800f870:	f8c8 1000 	streq.w	r1, [r8]
 800f874:	5162      	str	r2, [r4, r5]
 800f876:	604b      	str	r3, [r1, #4]
 800f878:	4630      	mov	r0, r6
 800f87a:	f000 f82f 	bl	800f8dc <__malloc_unlock>
 800f87e:	f104 000b 	add.w	r0, r4, #11
 800f882:	1d23      	adds	r3, r4, #4
 800f884:	f020 0007 	bic.w	r0, r0, #7
 800f888:	1ac2      	subs	r2, r0, r3
 800f88a:	bf1c      	itt	ne
 800f88c:	1a1b      	subne	r3, r3, r0
 800f88e:	50a3      	strne	r3, [r4, r2]
 800f890:	e7af      	b.n	800f7f2 <_malloc_r+0x22>
 800f892:	6862      	ldr	r2, [r4, #4]
 800f894:	42a3      	cmp	r3, r4
 800f896:	bf0c      	ite	eq
 800f898:	f8c8 2000 	streq.w	r2, [r8]
 800f89c:	605a      	strne	r2, [r3, #4]
 800f89e:	e7eb      	b.n	800f878 <_malloc_r+0xa8>
 800f8a0:	4623      	mov	r3, r4
 800f8a2:	6864      	ldr	r4, [r4, #4]
 800f8a4:	e7ae      	b.n	800f804 <_malloc_r+0x34>
 800f8a6:	463c      	mov	r4, r7
 800f8a8:	687f      	ldr	r7, [r7, #4]
 800f8aa:	e7b6      	b.n	800f81a <_malloc_r+0x4a>
 800f8ac:	461a      	mov	r2, r3
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	42a3      	cmp	r3, r4
 800f8b2:	d1fb      	bne.n	800f8ac <_malloc_r+0xdc>
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	6053      	str	r3, [r2, #4]
 800f8b8:	e7de      	b.n	800f878 <_malloc_r+0xa8>
 800f8ba:	230c      	movs	r3, #12
 800f8bc:	6033      	str	r3, [r6, #0]
 800f8be:	4630      	mov	r0, r6
 800f8c0:	f000 f80c 	bl	800f8dc <__malloc_unlock>
 800f8c4:	e794      	b.n	800f7f0 <_malloc_r+0x20>
 800f8c6:	6005      	str	r5, [r0, #0]
 800f8c8:	e7d6      	b.n	800f878 <_malloc_r+0xa8>
 800f8ca:	bf00      	nop
 800f8cc:	20002224 	.word	0x20002224

0800f8d0 <__malloc_lock>:
 800f8d0:	4801      	ldr	r0, [pc, #4]	@ (800f8d8 <__malloc_lock+0x8>)
 800f8d2:	f000 bdf2 	b.w	80104ba <__retarget_lock_acquire_recursive>
 800f8d6:	bf00      	nop
 800f8d8:	20002368 	.word	0x20002368

0800f8dc <__malloc_unlock>:
 800f8dc:	4801      	ldr	r0, [pc, #4]	@ (800f8e4 <__malloc_unlock+0x8>)
 800f8de:	f000 bded 	b.w	80104bc <__retarget_lock_release_recursive>
 800f8e2:	bf00      	nop
 800f8e4:	20002368 	.word	0x20002368

0800f8e8 <__cvt>:
 800f8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8ec:	ec57 6b10 	vmov	r6, r7, d0
 800f8f0:	2f00      	cmp	r7, #0
 800f8f2:	460c      	mov	r4, r1
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	463b      	mov	r3, r7
 800f8f8:	bfbb      	ittet	lt
 800f8fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f8fe:	461f      	movlt	r7, r3
 800f900:	2300      	movge	r3, #0
 800f902:	232d      	movlt	r3, #45	@ 0x2d
 800f904:	700b      	strb	r3, [r1, #0]
 800f906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f908:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f90c:	4691      	mov	r9, r2
 800f90e:	f023 0820 	bic.w	r8, r3, #32
 800f912:	bfbc      	itt	lt
 800f914:	4632      	movlt	r2, r6
 800f916:	4616      	movlt	r6, r2
 800f918:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f91c:	d005      	beq.n	800f92a <__cvt+0x42>
 800f91e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f922:	d100      	bne.n	800f926 <__cvt+0x3e>
 800f924:	3401      	adds	r4, #1
 800f926:	2102      	movs	r1, #2
 800f928:	e000      	b.n	800f92c <__cvt+0x44>
 800f92a:	2103      	movs	r1, #3
 800f92c:	ab03      	add	r3, sp, #12
 800f92e:	9301      	str	r3, [sp, #4]
 800f930:	ab02      	add	r3, sp, #8
 800f932:	9300      	str	r3, [sp, #0]
 800f934:	ec47 6b10 	vmov	d0, r6, r7
 800f938:	4653      	mov	r3, sl
 800f93a:	4622      	mov	r2, r4
 800f93c:	f000 fe58 	bl	80105f0 <_dtoa_r>
 800f940:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f944:	4605      	mov	r5, r0
 800f946:	d119      	bne.n	800f97c <__cvt+0x94>
 800f948:	f019 0f01 	tst.w	r9, #1
 800f94c:	d00e      	beq.n	800f96c <__cvt+0x84>
 800f94e:	eb00 0904 	add.w	r9, r0, r4
 800f952:	2200      	movs	r2, #0
 800f954:	2300      	movs	r3, #0
 800f956:	4630      	mov	r0, r6
 800f958:	4639      	mov	r1, r7
 800f95a:	f7f1 f8dd 	bl	8000b18 <__aeabi_dcmpeq>
 800f95e:	b108      	cbz	r0, 800f964 <__cvt+0x7c>
 800f960:	f8cd 900c 	str.w	r9, [sp, #12]
 800f964:	2230      	movs	r2, #48	@ 0x30
 800f966:	9b03      	ldr	r3, [sp, #12]
 800f968:	454b      	cmp	r3, r9
 800f96a:	d31e      	bcc.n	800f9aa <__cvt+0xc2>
 800f96c:	9b03      	ldr	r3, [sp, #12]
 800f96e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f970:	1b5b      	subs	r3, r3, r5
 800f972:	4628      	mov	r0, r5
 800f974:	6013      	str	r3, [r2, #0]
 800f976:	b004      	add	sp, #16
 800f978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f97c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f980:	eb00 0904 	add.w	r9, r0, r4
 800f984:	d1e5      	bne.n	800f952 <__cvt+0x6a>
 800f986:	7803      	ldrb	r3, [r0, #0]
 800f988:	2b30      	cmp	r3, #48	@ 0x30
 800f98a:	d10a      	bne.n	800f9a2 <__cvt+0xba>
 800f98c:	2200      	movs	r2, #0
 800f98e:	2300      	movs	r3, #0
 800f990:	4630      	mov	r0, r6
 800f992:	4639      	mov	r1, r7
 800f994:	f7f1 f8c0 	bl	8000b18 <__aeabi_dcmpeq>
 800f998:	b918      	cbnz	r0, 800f9a2 <__cvt+0xba>
 800f99a:	f1c4 0401 	rsb	r4, r4, #1
 800f99e:	f8ca 4000 	str.w	r4, [sl]
 800f9a2:	f8da 3000 	ldr.w	r3, [sl]
 800f9a6:	4499      	add	r9, r3
 800f9a8:	e7d3      	b.n	800f952 <__cvt+0x6a>
 800f9aa:	1c59      	adds	r1, r3, #1
 800f9ac:	9103      	str	r1, [sp, #12]
 800f9ae:	701a      	strb	r2, [r3, #0]
 800f9b0:	e7d9      	b.n	800f966 <__cvt+0x7e>

0800f9b2 <__exponent>:
 800f9b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9b4:	2900      	cmp	r1, #0
 800f9b6:	bfba      	itte	lt
 800f9b8:	4249      	neglt	r1, r1
 800f9ba:	232d      	movlt	r3, #45	@ 0x2d
 800f9bc:	232b      	movge	r3, #43	@ 0x2b
 800f9be:	2909      	cmp	r1, #9
 800f9c0:	7002      	strb	r2, [r0, #0]
 800f9c2:	7043      	strb	r3, [r0, #1]
 800f9c4:	dd29      	ble.n	800fa1a <__exponent+0x68>
 800f9c6:	f10d 0307 	add.w	r3, sp, #7
 800f9ca:	461d      	mov	r5, r3
 800f9cc:	270a      	movs	r7, #10
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	fbb1 f6f7 	udiv	r6, r1, r7
 800f9d4:	fb07 1416 	mls	r4, r7, r6, r1
 800f9d8:	3430      	adds	r4, #48	@ 0x30
 800f9da:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f9de:	460c      	mov	r4, r1
 800f9e0:	2c63      	cmp	r4, #99	@ 0x63
 800f9e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f9e6:	4631      	mov	r1, r6
 800f9e8:	dcf1      	bgt.n	800f9ce <__exponent+0x1c>
 800f9ea:	3130      	adds	r1, #48	@ 0x30
 800f9ec:	1e94      	subs	r4, r2, #2
 800f9ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f9f2:	1c41      	adds	r1, r0, #1
 800f9f4:	4623      	mov	r3, r4
 800f9f6:	42ab      	cmp	r3, r5
 800f9f8:	d30a      	bcc.n	800fa10 <__exponent+0x5e>
 800f9fa:	f10d 0309 	add.w	r3, sp, #9
 800f9fe:	1a9b      	subs	r3, r3, r2
 800fa00:	42ac      	cmp	r4, r5
 800fa02:	bf88      	it	hi
 800fa04:	2300      	movhi	r3, #0
 800fa06:	3302      	adds	r3, #2
 800fa08:	4403      	add	r3, r0
 800fa0a:	1a18      	subs	r0, r3, r0
 800fa0c:	b003      	add	sp, #12
 800fa0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa10:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fa14:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fa18:	e7ed      	b.n	800f9f6 <__exponent+0x44>
 800fa1a:	2330      	movs	r3, #48	@ 0x30
 800fa1c:	3130      	adds	r1, #48	@ 0x30
 800fa1e:	7083      	strb	r3, [r0, #2]
 800fa20:	70c1      	strb	r1, [r0, #3]
 800fa22:	1d03      	adds	r3, r0, #4
 800fa24:	e7f1      	b.n	800fa0a <__exponent+0x58>
	...

0800fa28 <_printf_float>:
 800fa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa2c:	b08d      	sub	sp, #52	@ 0x34
 800fa2e:	460c      	mov	r4, r1
 800fa30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fa34:	4616      	mov	r6, r2
 800fa36:	461f      	mov	r7, r3
 800fa38:	4605      	mov	r5, r0
 800fa3a:	f000 fcb9 	bl	80103b0 <_localeconv_r>
 800fa3e:	6803      	ldr	r3, [r0, #0]
 800fa40:	9304      	str	r3, [sp, #16]
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7f0 fc3c 	bl	80002c0 <strlen>
 800fa48:	2300      	movs	r3, #0
 800fa4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa4c:	f8d8 3000 	ldr.w	r3, [r8]
 800fa50:	9005      	str	r0, [sp, #20]
 800fa52:	3307      	adds	r3, #7
 800fa54:	f023 0307 	bic.w	r3, r3, #7
 800fa58:	f103 0208 	add.w	r2, r3, #8
 800fa5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fa60:	f8d4 b000 	ldr.w	fp, [r4]
 800fa64:	f8c8 2000 	str.w	r2, [r8]
 800fa68:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fa70:	9307      	str	r3, [sp, #28]
 800fa72:	f8cd 8018 	str.w	r8, [sp, #24]
 800fa76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fa7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa7e:	4b9c      	ldr	r3, [pc, #624]	@ (800fcf0 <_printf_float+0x2c8>)
 800fa80:	f04f 32ff 	mov.w	r2, #4294967295
 800fa84:	f7f1 f87a 	bl	8000b7c <__aeabi_dcmpun>
 800fa88:	bb70      	cbnz	r0, 800fae8 <_printf_float+0xc0>
 800fa8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa8e:	4b98      	ldr	r3, [pc, #608]	@ (800fcf0 <_printf_float+0x2c8>)
 800fa90:	f04f 32ff 	mov.w	r2, #4294967295
 800fa94:	f7f1 f854 	bl	8000b40 <__aeabi_dcmple>
 800fa98:	bb30      	cbnz	r0, 800fae8 <_printf_float+0xc0>
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	4640      	mov	r0, r8
 800faa0:	4649      	mov	r1, r9
 800faa2:	f7f1 f843 	bl	8000b2c <__aeabi_dcmplt>
 800faa6:	b110      	cbz	r0, 800faae <_printf_float+0x86>
 800faa8:	232d      	movs	r3, #45	@ 0x2d
 800faaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800faae:	4a91      	ldr	r2, [pc, #580]	@ (800fcf4 <_printf_float+0x2cc>)
 800fab0:	4b91      	ldr	r3, [pc, #580]	@ (800fcf8 <_printf_float+0x2d0>)
 800fab2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fab6:	bf8c      	ite	hi
 800fab8:	4690      	movhi	r8, r2
 800faba:	4698      	movls	r8, r3
 800fabc:	2303      	movs	r3, #3
 800fabe:	6123      	str	r3, [r4, #16]
 800fac0:	f02b 0304 	bic.w	r3, fp, #4
 800fac4:	6023      	str	r3, [r4, #0]
 800fac6:	f04f 0900 	mov.w	r9, #0
 800faca:	9700      	str	r7, [sp, #0]
 800facc:	4633      	mov	r3, r6
 800face:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fad0:	4621      	mov	r1, r4
 800fad2:	4628      	mov	r0, r5
 800fad4:	f000 f9d2 	bl	800fe7c <_printf_common>
 800fad8:	3001      	adds	r0, #1
 800fada:	f040 808d 	bne.w	800fbf8 <_printf_float+0x1d0>
 800fade:	f04f 30ff 	mov.w	r0, #4294967295
 800fae2:	b00d      	add	sp, #52	@ 0x34
 800fae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae8:	4642      	mov	r2, r8
 800faea:	464b      	mov	r3, r9
 800faec:	4640      	mov	r0, r8
 800faee:	4649      	mov	r1, r9
 800faf0:	f7f1 f844 	bl	8000b7c <__aeabi_dcmpun>
 800faf4:	b140      	cbz	r0, 800fb08 <_printf_float+0xe0>
 800faf6:	464b      	mov	r3, r9
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	bfbc      	itt	lt
 800fafc:	232d      	movlt	r3, #45	@ 0x2d
 800fafe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fb02:	4a7e      	ldr	r2, [pc, #504]	@ (800fcfc <_printf_float+0x2d4>)
 800fb04:	4b7e      	ldr	r3, [pc, #504]	@ (800fd00 <_printf_float+0x2d8>)
 800fb06:	e7d4      	b.n	800fab2 <_printf_float+0x8a>
 800fb08:	6863      	ldr	r3, [r4, #4]
 800fb0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fb0e:	9206      	str	r2, [sp, #24]
 800fb10:	1c5a      	adds	r2, r3, #1
 800fb12:	d13b      	bne.n	800fb8c <_printf_float+0x164>
 800fb14:	2306      	movs	r3, #6
 800fb16:	6063      	str	r3, [r4, #4]
 800fb18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	6022      	str	r2, [r4, #0]
 800fb20:	9303      	str	r3, [sp, #12]
 800fb22:	ab0a      	add	r3, sp, #40	@ 0x28
 800fb24:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fb28:	ab09      	add	r3, sp, #36	@ 0x24
 800fb2a:	9300      	str	r3, [sp, #0]
 800fb2c:	6861      	ldr	r1, [r4, #4]
 800fb2e:	ec49 8b10 	vmov	d0, r8, r9
 800fb32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fb36:	4628      	mov	r0, r5
 800fb38:	f7ff fed6 	bl	800f8e8 <__cvt>
 800fb3c:	9b06      	ldr	r3, [sp, #24]
 800fb3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fb40:	2b47      	cmp	r3, #71	@ 0x47
 800fb42:	4680      	mov	r8, r0
 800fb44:	d129      	bne.n	800fb9a <_printf_float+0x172>
 800fb46:	1cc8      	adds	r0, r1, #3
 800fb48:	db02      	blt.n	800fb50 <_printf_float+0x128>
 800fb4a:	6863      	ldr	r3, [r4, #4]
 800fb4c:	4299      	cmp	r1, r3
 800fb4e:	dd41      	ble.n	800fbd4 <_printf_float+0x1ac>
 800fb50:	f1aa 0a02 	sub.w	sl, sl, #2
 800fb54:	fa5f fa8a 	uxtb.w	sl, sl
 800fb58:	3901      	subs	r1, #1
 800fb5a:	4652      	mov	r2, sl
 800fb5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fb60:	9109      	str	r1, [sp, #36]	@ 0x24
 800fb62:	f7ff ff26 	bl	800f9b2 <__exponent>
 800fb66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb68:	1813      	adds	r3, r2, r0
 800fb6a:	2a01      	cmp	r2, #1
 800fb6c:	4681      	mov	r9, r0
 800fb6e:	6123      	str	r3, [r4, #16]
 800fb70:	dc02      	bgt.n	800fb78 <_printf_float+0x150>
 800fb72:	6822      	ldr	r2, [r4, #0]
 800fb74:	07d2      	lsls	r2, r2, #31
 800fb76:	d501      	bpl.n	800fb7c <_printf_float+0x154>
 800fb78:	3301      	adds	r3, #1
 800fb7a:	6123      	str	r3, [r4, #16]
 800fb7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d0a2      	beq.n	800faca <_printf_float+0xa2>
 800fb84:	232d      	movs	r3, #45	@ 0x2d
 800fb86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb8a:	e79e      	b.n	800faca <_printf_float+0xa2>
 800fb8c:	9a06      	ldr	r2, [sp, #24]
 800fb8e:	2a47      	cmp	r2, #71	@ 0x47
 800fb90:	d1c2      	bne.n	800fb18 <_printf_float+0xf0>
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d1c0      	bne.n	800fb18 <_printf_float+0xf0>
 800fb96:	2301      	movs	r3, #1
 800fb98:	e7bd      	b.n	800fb16 <_printf_float+0xee>
 800fb9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fb9e:	d9db      	bls.n	800fb58 <_printf_float+0x130>
 800fba0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fba4:	d118      	bne.n	800fbd8 <_printf_float+0x1b0>
 800fba6:	2900      	cmp	r1, #0
 800fba8:	6863      	ldr	r3, [r4, #4]
 800fbaa:	dd0b      	ble.n	800fbc4 <_printf_float+0x19c>
 800fbac:	6121      	str	r1, [r4, #16]
 800fbae:	b913      	cbnz	r3, 800fbb6 <_printf_float+0x18e>
 800fbb0:	6822      	ldr	r2, [r4, #0]
 800fbb2:	07d0      	lsls	r0, r2, #31
 800fbb4:	d502      	bpl.n	800fbbc <_printf_float+0x194>
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	440b      	add	r3, r1
 800fbba:	6123      	str	r3, [r4, #16]
 800fbbc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fbbe:	f04f 0900 	mov.w	r9, #0
 800fbc2:	e7db      	b.n	800fb7c <_printf_float+0x154>
 800fbc4:	b913      	cbnz	r3, 800fbcc <_printf_float+0x1a4>
 800fbc6:	6822      	ldr	r2, [r4, #0]
 800fbc8:	07d2      	lsls	r2, r2, #31
 800fbca:	d501      	bpl.n	800fbd0 <_printf_float+0x1a8>
 800fbcc:	3302      	adds	r3, #2
 800fbce:	e7f4      	b.n	800fbba <_printf_float+0x192>
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	e7f2      	b.n	800fbba <_printf_float+0x192>
 800fbd4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fbd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbda:	4299      	cmp	r1, r3
 800fbdc:	db05      	blt.n	800fbea <_printf_float+0x1c2>
 800fbde:	6823      	ldr	r3, [r4, #0]
 800fbe0:	6121      	str	r1, [r4, #16]
 800fbe2:	07d8      	lsls	r0, r3, #31
 800fbe4:	d5ea      	bpl.n	800fbbc <_printf_float+0x194>
 800fbe6:	1c4b      	adds	r3, r1, #1
 800fbe8:	e7e7      	b.n	800fbba <_printf_float+0x192>
 800fbea:	2900      	cmp	r1, #0
 800fbec:	bfd4      	ite	le
 800fbee:	f1c1 0202 	rsble	r2, r1, #2
 800fbf2:	2201      	movgt	r2, #1
 800fbf4:	4413      	add	r3, r2
 800fbf6:	e7e0      	b.n	800fbba <_printf_float+0x192>
 800fbf8:	6823      	ldr	r3, [r4, #0]
 800fbfa:	055a      	lsls	r2, r3, #21
 800fbfc:	d407      	bmi.n	800fc0e <_printf_float+0x1e6>
 800fbfe:	6923      	ldr	r3, [r4, #16]
 800fc00:	4642      	mov	r2, r8
 800fc02:	4631      	mov	r1, r6
 800fc04:	4628      	mov	r0, r5
 800fc06:	47b8      	blx	r7
 800fc08:	3001      	adds	r0, #1
 800fc0a:	d12b      	bne.n	800fc64 <_printf_float+0x23c>
 800fc0c:	e767      	b.n	800fade <_printf_float+0xb6>
 800fc0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fc12:	f240 80dd 	bls.w	800fdd0 <_printf_float+0x3a8>
 800fc16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	f7f0 ff7b 	bl	8000b18 <__aeabi_dcmpeq>
 800fc22:	2800      	cmp	r0, #0
 800fc24:	d033      	beq.n	800fc8e <_printf_float+0x266>
 800fc26:	4a37      	ldr	r2, [pc, #220]	@ (800fd04 <_printf_float+0x2dc>)
 800fc28:	2301      	movs	r3, #1
 800fc2a:	4631      	mov	r1, r6
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	47b8      	blx	r7
 800fc30:	3001      	adds	r0, #1
 800fc32:	f43f af54 	beq.w	800fade <_printf_float+0xb6>
 800fc36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fc3a:	4543      	cmp	r3, r8
 800fc3c:	db02      	blt.n	800fc44 <_printf_float+0x21c>
 800fc3e:	6823      	ldr	r3, [r4, #0]
 800fc40:	07d8      	lsls	r0, r3, #31
 800fc42:	d50f      	bpl.n	800fc64 <_printf_float+0x23c>
 800fc44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc48:	4631      	mov	r1, r6
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	47b8      	blx	r7
 800fc4e:	3001      	adds	r0, #1
 800fc50:	f43f af45 	beq.w	800fade <_printf_float+0xb6>
 800fc54:	f04f 0900 	mov.w	r9, #0
 800fc58:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc5c:	f104 0a1a 	add.w	sl, r4, #26
 800fc60:	45c8      	cmp	r8, r9
 800fc62:	dc09      	bgt.n	800fc78 <_printf_float+0x250>
 800fc64:	6823      	ldr	r3, [r4, #0]
 800fc66:	079b      	lsls	r3, r3, #30
 800fc68:	f100 8103 	bmi.w	800fe72 <_printf_float+0x44a>
 800fc6c:	68e0      	ldr	r0, [r4, #12]
 800fc6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc70:	4298      	cmp	r0, r3
 800fc72:	bfb8      	it	lt
 800fc74:	4618      	movlt	r0, r3
 800fc76:	e734      	b.n	800fae2 <_printf_float+0xba>
 800fc78:	2301      	movs	r3, #1
 800fc7a:	4652      	mov	r2, sl
 800fc7c:	4631      	mov	r1, r6
 800fc7e:	4628      	mov	r0, r5
 800fc80:	47b8      	blx	r7
 800fc82:	3001      	adds	r0, #1
 800fc84:	f43f af2b 	beq.w	800fade <_printf_float+0xb6>
 800fc88:	f109 0901 	add.w	r9, r9, #1
 800fc8c:	e7e8      	b.n	800fc60 <_printf_float+0x238>
 800fc8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	dc39      	bgt.n	800fd08 <_printf_float+0x2e0>
 800fc94:	4a1b      	ldr	r2, [pc, #108]	@ (800fd04 <_printf_float+0x2dc>)
 800fc96:	2301      	movs	r3, #1
 800fc98:	4631      	mov	r1, r6
 800fc9a:	4628      	mov	r0, r5
 800fc9c:	47b8      	blx	r7
 800fc9e:	3001      	adds	r0, #1
 800fca0:	f43f af1d 	beq.w	800fade <_printf_float+0xb6>
 800fca4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fca8:	ea59 0303 	orrs.w	r3, r9, r3
 800fcac:	d102      	bne.n	800fcb4 <_printf_float+0x28c>
 800fcae:	6823      	ldr	r3, [r4, #0]
 800fcb0:	07d9      	lsls	r1, r3, #31
 800fcb2:	d5d7      	bpl.n	800fc64 <_printf_float+0x23c>
 800fcb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcb8:	4631      	mov	r1, r6
 800fcba:	4628      	mov	r0, r5
 800fcbc:	47b8      	blx	r7
 800fcbe:	3001      	adds	r0, #1
 800fcc0:	f43f af0d 	beq.w	800fade <_printf_float+0xb6>
 800fcc4:	f04f 0a00 	mov.w	sl, #0
 800fcc8:	f104 0b1a 	add.w	fp, r4, #26
 800fccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcce:	425b      	negs	r3, r3
 800fcd0:	4553      	cmp	r3, sl
 800fcd2:	dc01      	bgt.n	800fcd8 <_printf_float+0x2b0>
 800fcd4:	464b      	mov	r3, r9
 800fcd6:	e793      	b.n	800fc00 <_printf_float+0x1d8>
 800fcd8:	2301      	movs	r3, #1
 800fcda:	465a      	mov	r2, fp
 800fcdc:	4631      	mov	r1, r6
 800fcde:	4628      	mov	r0, r5
 800fce0:	47b8      	blx	r7
 800fce2:	3001      	adds	r0, #1
 800fce4:	f43f aefb 	beq.w	800fade <_printf_float+0xb6>
 800fce8:	f10a 0a01 	add.w	sl, sl, #1
 800fcec:	e7ee      	b.n	800fccc <_printf_float+0x2a4>
 800fcee:	bf00      	nop
 800fcf0:	7fefffff 	.word	0x7fefffff
 800fcf4:	08012604 	.word	0x08012604
 800fcf8:	08012600 	.word	0x08012600
 800fcfc:	0801260c 	.word	0x0801260c
 800fd00:	08012608 	.word	0x08012608
 800fd04:	08012610 	.word	0x08012610
 800fd08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fd0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fd0e:	4553      	cmp	r3, sl
 800fd10:	bfa8      	it	ge
 800fd12:	4653      	movge	r3, sl
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	4699      	mov	r9, r3
 800fd18:	dc36      	bgt.n	800fd88 <_printf_float+0x360>
 800fd1a:	f04f 0b00 	mov.w	fp, #0
 800fd1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd22:	f104 021a 	add.w	r2, r4, #26
 800fd26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fd28:	9306      	str	r3, [sp, #24]
 800fd2a:	eba3 0309 	sub.w	r3, r3, r9
 800fd2e:	455b      	cmp	r3, fp
 800fd30:	dc31      	bgt.n	800fd96 <_printf_float+0x36e>
 800fd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd34:	459a      	cmp	sl, r3
 800fd36:	dc3a      	bgt.n	800fdae <_printf_float+0x386>
 800fd38:	6823      	ldr	r3, [r4, #0]
 800fd3a:	07da      	lsls	r2, r3, #31
 800fd3c:	d437      	bmi.n	800fdae <_printf_float+0x386>
 800fd3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd40:	ebaa 0903 	sub.w	r9, sl, r3
 800fd44:	9b06      	ldr	r3, [sp, #24]
 800fd46:	ebaa 0303 	sub.w	r3, sl, r3
 800fd4a:	4599      	cmp	r9, r3
 800fd4c:	bfa8      	it	ge
 800fd4e:	4699      	movge	r9, r3
 800fd50:	f1b9 0f00 	cmp.w	r9, #0
 800fd54:	dc33      	bgt.n	800fdbe <_printf_float+0x396>
 800fd56:	f04f 0800 	mov.w	r8, #0
 800fd5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd5e:	f104 0b1a 	add.w	fp, r4, #26
 800fd62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd64:	ebaa 0303 	sub.w	r3, sl, r3
 800fd68:	eba3 0309 	sub.w	r3, r3, r9
 800fd6c:	4543      	cmp	r3, r8
 800fd6e:	f77f af79 	ble.w	800fc64 <_printf_float+0x23c>
 800fd72:	2301      	movs	r3, #1
 800fd74:	465a      	mov	r2, fp
 800fd76:	4631      	mov	r1, r6
 800fd78:	4628      	mov	r0, r5
 800fd7a:	47b8      	blx	r7
 800fd7c:	3001      	adds	r0, #1
 800fd7e:	f43f aeae 	beq.w	800fade <_printf_float+0xb6>
 800fd82:	f108 0801 	add.w	r8, r8, #1
 800fd86:	e7ec      	b.n	800fd62 <_printf_float+0x33a>
 800fd88:	4642      	mov	r2, r8
 800fd8a:	4631      	mov	r1, r6
 800fd8c:	4628      	mov	r0, r5
 800fd8e:	47b8      	blx	r7
 800fd90:	3001      	adds	r0, #1
 800fd92:	d1c2      	bne.n	800fd1a <_printf_float+0x2f2>
 800fd94:	e6a3      	b.n	800fade <_printf_float+0xb6>
 800fd96:	2301      	movs	r3, #1
 800fd98:	4631      	mov	r1, r6
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	9206      	str	r2, [sp, #24]
 800fd9e:	47b8      	blx	r7
 800fda0:	3001      	adds	r0, #1
 800fda2:	f43f ae9c 	beq.w	800fade <_printf_float+0xb6>
 800fda6:	9a06      	ldr	r2, [sp, #24]
 800fda8:	f10b 0b01 	add.w	fp, fp, #1
 800fdac:	e7bb      	b.n	800fd26 <_printf_float+0x2fe>
 800fdae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdb2:	4631      	mov	r1, r6
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	47b8      	blx	r7
 800fdb8:	3001      	adds	r0, #1
 800fdba:	d1c0      	bne.n	800fd3e <_printf_float+0x316>
 800fdbc:	e68f      	b.n	800fade <_printf_float+0xb6>
 800fdbe:	9a06      	ldr	r2, [sp, #24]
 800fdc0:	464b      	mov	r3, r9
 800fdc2:	4442      	add	r2, r8
 800fdc4:	4631      	mov	r1, r6
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	47b8      	blx	r7
 800fdca:	3001      	adds	r0, #1
 800fdcc:	d1c3      	bne.n	800fd56 <_printf_float+0x32e>
 800fdce:	e686      	b.n	800fade <_printf_float+0xb6>
 800fdd0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fdd4:	f1ba 0f01 	cmp.w	sl, #1
 800fdd8:	dc01      	bgt.n	800fdde <_printf_float+0x3b6>
 800fdda:	07db      	lsls	r3, r3, #31
 800fddc:	d536      	bpl.n	800fe4c <_printf_float+0x424>
 800fdde:	2301      	movs	r3, #1
 800fde0:	4642      	mov	r2, r8
 800fde2:	4631      	mov	r1, r6
 800fde4:	4628      	mov	r0, r5
 800fde6:	47b8      	blx	r7
 800fde8:	3001      	adds	r0, #1
 800fdea:	f43f ae78 	beq.w	800fade <_printf_float+0xb6>
 800fdee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdf2:	4631      	mov	r1, r6
 800fdf4:	4628      	mov	r0, r5
 800fdf6:	47b8      	blx	r7
 800fdf8:	3001      	adds	r0, #1
 800fdfa:	f43f ae70 	beq.w	800fade <_printf_float+0xb6>
 800fdfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fe02:	2200      	movs	r2, #0
 800fe04:	2300      	movs	r3, #0
 800fe06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe0a:	f7f0 fe85 	bl	8000b18 <__aeabi_dcmpeq>
 800fe0e:	b9c0      	cbnz	r0, 800fe42 <_printf_float+0x41a>
 800fe10:	4653      	mov	r3, sl
 800fe12:	f108 0201 	add.w	r2, r8, #1
 800fe16:	4631      	mov	r1, r6
 800fe18:	4628      	mov	r0, r5
 800fe1a:	47b8      	blx	r7
 800fe1c:	3001      	adds	r0, #1
 800fe1e:	d10c      	bne.n	800fe3a <_printf_float+0x412>
 800fe20:	e65d      	b.n	800fade <_printf_float+0xb6>
 800fe22:	2301      	movs	r3, #1
 800fe24:	465a      	mov	r2, fp
 800fe26:	4631      	mov	r1, r6
 800fe28:	4628      	mov	r0, r5
 800fe2a:	47b8      	blx	r7
 800fe2c:	3001      	adds	r0, #1
 800fe2e:	f43f ae56 	beq.w	800fade <_printf_float+0xb6>
 800fe32:	f108 0801 	add.w	r8, r8, #1
 800fe36:	45d0      	cmp	r8, sl
 800fe38:	dbf3      	blt.n	800fe22 <_printf_float+0x3fa>
 800fe3a:	464b      	mov	r3, r9
 800fe3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fe40:	e6df      	b.n	800fc02 <_printf_float+0x1da>
 800fe42:	f04f 0800 	mov.w	r8, #0
 800fe46:	f104 0b1a 	add.w	fp, r4, #26
 800fe4a:	e7f4      	b.n	800fe36 <_printf_float+0x40e>
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	4642      	mov	r2, r8
 800fe50:	e7e1      	b.n	800fe16 <_printf_float+0x3ee>
 800fe52:	2301      	movs	r3, #1
 800fe54:	464a      	mov	r2, r9
 800fe56:	4631      	mov	r1, r6
 800fe58:	4628      	mov	r0, r5
 800fe5a:	47b8      	blx	r7
 800fe5c:	3001      	adds	r0, #1
 800fe5e:	f43f ae3e 	beq.w	800fade <_printf_float+0xb6>
 800fe62:	f108 0801 	add.w	r8, r8, #1
 800fe66:	68e3      	ldr	r3, [r4, #12]
 800fe68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fe6a:	1a5b      	subs	r3, r3, r1
 800fe6c:	4543      	cmp	r3, r8
 800fe6e:	dcf0      	bgt.n	800fe52 <_printf_float+0x42a>
 800fe70:	e6fc      	b.n	800fc6c <_printf_float+0x244>
 800fe72:	f04f 0800 	mov.w	r8, #0
 800fe76:	f104 0919 	add.w	r9, r4, #25
 800fe7a:	e7f4      	b.n	800fe66 <_printf_float+0x43e>

0800fe7c <_printf_common>:
 800fe7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe80:	4616      	mov	r6, r2
 800fe82:	4698      	mov	r8, r3
 800fe84:	688a      	ldr	r2, [r1, #8]
 800fe86:	690b      	ldr	r3, [r1, #16]
 800fe88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	bfb8      	it	lt
 800fe90:	4613      	movlt	r3, r2
 800fe92:	6033      	str	r3, [r6, #0]
 800fe94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fe98:	4607      	mov	r7, r0
 800fe9a:	460c      	mov	r4, r1
 800fe9c:	b10a      	cbz	r2, 800fea2 <_printf_common+0x26>
 800fe9e:	3301      	adds	r3, #1
 800fea0:	6033      	str	r3, [r6, #0]
 800fea2:	6823      	ldr	r3, [r4, #0]
 800fea4:	0699      	lsls	r1, r3, #26
 800fea6:	bf42      	ittt	mi
 800fea8:	6833      	ldrmi	r3, [r6, #0]
 800feaa:	3302      	addmi	r3, #2
 800feac:	6033      	strmi	r3, [r6, #0]
 800feae:	6825      	ldr	r5, [r4, #0]
 800feb0:	f015 0506 	ands.w	r5, r5, #6
 800feb4:	d106      	bne.n	800fec4 <_printf_common+0x48>
 800feb6:	f104 0a19 	add.w	sl, r4, #25
 800feba:	68e3      	ldr	r3, [r4, #12]
 800febc:	6832      	ldr	r2, [r6, #0]
 800febe:	1a9b      	subs	r3, r3, r2
 800fec0:	42ab      	cmp	r3, r5
 800fec2:	dc26      	bgt.n	800ff12 <_printf_common+0x96>
 800fec4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fec8:	6822      	ldr	r2, [r4, #0]
 800feca:	3b00      	subs	r3, #0
 800fecc:	bf18      	it	ne
 800fece:	2301      	movne	r3, #1
 800fed0:	0692      	lsls	r2, r2, #26
 800fed2:	d42b      	bmi.n	800ff2c <_printf_common+0xb0>
 800fed4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fed8:	4641      	mov	r1, r8
 800feda:	4638      	mov	r0, r7
 800fedc:	47c8      	blx	r9
 800fede:	3001      	adds	r0, #1
 800fee0:	d01e      	beq.n	800ff20 <_printf_common+0xa4>
 800fee2:	6823      	ldr	r3, [r4, #0]
 800fee4:	6922      	ldr	r2, [r4, #16]
 800fee6:	f003 0306 	and.w	r3, r3, #6
 800feea:	2b04      	cmp	r3, #4
 800feec:	bf02      	ittt	eq
 800feee:	68e5      	ldreq	r5, [r4, #12]
 800fef0:	6833      	ldreq	r3, [r6, #0]
 800fef2:	1aed      	subeq	r5, r5, r3
 800fef4:	68a3      	ldr	r3, [r4, #8]
 800fef6:	bf0c      	ite	eq
 800fef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fefc:	2500      	movne	r5, #0
 800fefe:	4293      	cmp	r3, r2
 800ff00:	bfc4      	itt	gt
 800ff02:	1a9b      	subgt	r3, r3, r2
 800ff04:	18ed      	addgt	r5, r5, r3
 800ff06:	2600      	movs	r6, #0
 800ff08:	341a      	adds	r4, #26
 800ff0a:	42b5      	cmp	r5, r6
 800ff0c:	d11a      	bne.n	800ff44 <_printf_common+0xc8>
 800ff0e:	2000      	movs	r0, #0
 800ff10:	e008      	b.n	800ff24 <_printf_common+0xa8>
 800ff12:	2301      	movs	r3, #1
 800ff14:	4652      	mov	r2, sl
 800ff16:	4641      	mov	r1, r8
 800ff18:	4638      	mov	r0, r7
 800ff1a:	47c8      	blx	r9
 800ff1c:	3001      	adds	r0, #1
 800ff1e:	d103      	bne.n	800ff28 <_printf_common+0xac>
 800ff20:	f04f 30ff 	mov.w	r0, #4294967295
 800ff24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff28:	3501      	adds	r5, #1
 800ff2a:	e7c6      	b.n	800feba <_printf_common+0x3e>
 800ff2c:	18e1      	adds	r1, r4, r3
 800ff2e:	1c5a      	adds	r2, r3, #1
 800ff30:	2030      	movs	r0, #48	@ 0x30
 800ff32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ff36:	4422      	add	r2, r4
 800ff38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ff3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ff40:	3302      	adds	r3, #2
 800ff42:	e7c7      	b.n	800fed4 <_printf_common+0x58>
 800ff44:	2301      	movs	r3, #1
 800ff46:	4622      	mov	r2, r4
 800ff48:	4641      	mov	r1, r8
 800ff4a:	4638      	mov	r0, r7
 800ff4c:	47c8      	blx	r9
 800ff4e:	3001      	adds	r0, #1
 800ff50:	d0e6      	beq.n	800ff20 <_printf_common+0xa4>
 800ff52:	3601      	adds	r6, #1
 800ff54:	e7d9      	b.n	800ff0a <_printf_common+0x8e>
	...

0800ff58 <_printf_i>:
 800ff58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff5c:	7e0f      	ldrb	r7, [r1, #24]
 800ff5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ff60:	2f78      	cmp	r7, #120	@ 0x78
 800ff62:	4691      	mov	r9, r2
 800ff64:	4680      	mov	r8, r0
 800ff66:	460c      	mov	r4, r1
 800ff68:	469a      	mov	sl, r3
 800ff6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ff6e:	d807      	bhi.n	800ff80 <_printf_i+0x28>
 800ff70:	2f62      	cmp	r7, #98	@ 0x62
 800ff72:	d80a      	bhi.n	800ff8a <_printf_i+0x32>
 800ff74:	2f00      	cmp	r7, #0
 800ff76:	f000 80d1 	beq.w	801011c <_printf_i+0x1c4>
 800ff7a:	2f58      	cmp	r7, #88	@ 0x58
 800ff7c:	f000 80b8 	beq.w	80100f0 <_printf_i+0x198>
 800ff80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ff88:	e03a      	b.n	8010000 <_printf_i+0xa8>
 800ff8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ff8e:	2b15      	cmp	r3, #21
 800ff90:	d8f6      	bhi.n	800ff80 <_printf_i+0x28>
 800ff92:	a101      	add	r1, pc, #4	@ (adr r1, 800ff98 <_printf_i+0x40>)
 800ff94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff98:	0800fff1 	.word	0x0800fff1
 800ff9c:	08010005 	.word	0x08010005
 800ffa0:	0800ff81 	.word	0x0800ff81
 800ffa4:	0800ff81 	.word	0x0800ff81
 800ffa8:	0800ff81 	.word	0x0800ff81
 800ffac:	0800ff81 	.word	0x0800ff81
 800ffb0:	08010005 	.word	0x08010005
 800ffb4:	0800ff81 	.word	0x0800ff81
 800ffb8:	0800ff81 	.word	0x0800ff81
 800ffbc:	0800ff81 	.word	0x0800ff81
 800ffc0:	0800ff81 	.word	0x0800ff81
 800ffc4:	08010103 	.word	0x08010103
 800ffc8:	0801002f 	.word	0x0801002f
 800ffcc:	080100bd 	.word	0x080100bd
 800ffd0:	0800ff81 	.word	0x0800ff81
 800ffd4:	0800ff81 	.word	0x0800ff81
 800ffd8:	08010125 	.word	0x08010125
 800ffdc:	0800ff81 	.word	0x0800ff81
 800ffe0:	0801002f 	.word	0x0801002f
 800ffe4:	0800ff81 	.word	0x0800ff81
 800ffe8:	0800ff81 	.word	0x0800ff81
 800ffec:	080100c5 	.word	0x080100c5
 800fff0:	6833      	ldr	r3, [r6, #0]
 800fff2:	1d1a      	adds	r2, r3, #4
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	6032      	str	r2, [r6, #0]
 800fff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fffc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010000:	2301      	movs	r3, #1
 8010002:	e09c      	b.n	801013e <_printf_i+0x1e6>
 8010004:	6833      	ldr	r3, [r6, #0]
 8010006:	6820      	ldr	r0, [r4, #0]
 8010008:	1d19      	adds	r1, r3, #4
 801000a:	6031      	str	r1, [r6, #0]
 801000c:	0606      	lsls	r6, r0, #24
 801000e:	d501      	bpl.n	8010014 <_printf_i+0xbc>
 8010010:	681d      	ldr	r5, [r3, #0]
 8010012:	e003      	b.n	801001c <_printf_i+0xc4>
 8010014:	0645      	lsls	r5, r0, #25
 8010016:	d5fb      	bpl.n	8010010 <_printf_i+0xb8>
 8010018:	f9b3 5000 	ldrsh.w	r5, [r3]
 801001c:	2d00      	cmp	r5, #0
 801001e:	da03      	bge.n	8010028 <_printf_i+0xd0>
 8010020:	232d      	movs	r3, #45	@ 0x2d
 8010022:	426d      	negs	r5, r5
 8010024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010028:	4858      	ldr	r0, [pc, #352]	@ (801018c <_printf_i+0x234>)
 801002a:	230a      	movs	r3, #10
 801002c:	e011      	b.n	8010052 <_printf_i+0xfa>
 801002e:	6821      	ldr	r1, [r4, #0]
 8010030:	6833      	ldr	r3, [r6, #0]
 8010032:	0608      	lsls	r0, r1, #24
 8010034:	f853 5b04 	ldr.w	r5, [r3], #4
 8010038:	d402      	bmi.n	8010040 <_printf_i+0xe8>
 801003a:	0649      	lsls	r1, r1, #25
 801003c:	bf48      	it	mi
 801003e:	b2ad      	uxthmi	r5, r5
 8010040:	2f6f      	cmp	r7, #111	@ 0x6f
 8010042:	4852      	ldr	r0, [pc, #328]	@ (801018c <_printf_i+0x234>)
 8010044:	6033      	str	r3, [r6, #0]
 8010046:	bf14      	ite	ne
 8010048:	230a      	movne	r3, #10
 801004a:	2308      	moveq	r3, #8
 801004c:	2100      	movs	r1, #0
 801004e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010052:	6866      	ldr	r6, [r4, #4]
 8010054:	60a6      	str	r6, [r4, #8]
 8010056:	2e00      	cmp	r6, #0
 8010058:	db05      	blt.n	8010066 <_printf_i+0x10e>
 801005a:	6821      	ldr	r1, [r4, #0]
 801005c:	432e      	orrs	r6, r5
 801005e:	f021 0104 	bic.w	r1, r1, #4
 8010062:	6021      	str	r1, [r4, #0]
 8010064:	d04b      	beq.n	80100fe <_printf_i+0x1a6>
 8010066:	4616      	mov	r6, r2
 8010068:	fbb5 f1f3 	udiv	r1, r5, r3
 801006c:	fb03 5711 	mls	r7, r3, r1, r5
 8010070:	5dc7      	ldrb	r7, [r0, r7]
 8010072:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010076:	462f      	mov	r7, r5
 8010078:	42bb      	cmp	r3, r7
 801007a:	460d      	mov	r5, r1
 801007c:	d9f4      	bls.n	8010068 <_printf_i+0x110>
 801007e:	2b08      	cmp	r3, #8
 8010080:	d10b      	bne.n	801009a <_printf_i+0x142>
 8010082:	6823      	ldr	r3, [r4, #0]
 8010084:	07df      	lsls	r7, r3, #31
 8010086:	d508      	bpl.n	801009a <_printf_i+0x142>
 8010088:	6923      	ldr	r3, [r4, #16]
 801008a:	6861      	ldr	r1, [r4, #4]
 801008c:	4299      	cmp	r1, r3
 801008e:	bfde      	ittt	le
 8010090:	2330      	movle	r3, #48	@ 0x30
 8010092:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010096:	f106 36ff 	addle.w	r6, r6, #4294967295
 801009a:	1b92      	subs	r2, r2, r6
 801009c:	6122      	str	r2, [r4, #16]
 801009e:	f8cd a000 	str.w	sl, [sp]
 80100a2:	464b      	mov	r3, r9
 80100a4:	aa03      	add	r2, sp, #12
 80100a6:	4621      	mov	r1, r4
 80100a8:	4640      	mov	r0, r8
 80100aa:	f7ff fee7 	bl	800fe7c <_printf_common>
 80100ae:	3001      	adds	r0, #1
 80100b0:	d14a      	bne.n	8010148 <_printf_i+0x1f0>
 80100b2:	f04f 30ff 	mov.w	r0, #4294967295
 80100b6:	b004      	add	sp, #16
 80100b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100bc:	6823      	ldr	r3, [r4, #0]
 80100be:	f043 0320 	orr.w	r3, r3, #32
 80100c2:	6023      	str	r3, [r4, #0]
 80100c4:	4832      	ldr	r0, [pc, #200]	@ (8010190 <_printf_i+0x238>)
 80100c6:	2778      	movs	r7, #120	@ 0x78
 80100c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80100cc:	6823      	ldr	r3, [r4, #0]
 80100ce:	6831      	ldr	r1, [r6, #0]
 80100d0:	061f      	lsls	r7, r3, #24
 80100d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80100d6:	d402      	bmi.n	80100de <_printf_i+0x186>
 80100d8:	065f      	lsls	r7, r3, #25
 80100da:	bf48      	it	mi
 80100dc:	b2ad      	uxthmi	r5, r5
 80100de:	6031      	str	r1, [r6, #0]
 80100e0:	07d9      	lsls	r1, r3, #31
 80100e2:	bf44      	itt	mi
 80100e4:	f043 0320 	orrmi.w	r3, r3, #32
 80100e8:	6023      	strmi	r3, [r4, #0]
 80100ea:	b11d      	cbz	r5, 80100f4 <_printf_i+0x19c>
 80100ec:	2310      	movs	r3, #16
 80100ee:	e7ad      	b.n	801004c <_printf_i+0xf4>
 80100f0:	4826      	ldr	r0, [pc, #152]	@ (801018c <_printf_i+0x234>)
 80100f2:	e7e9      	b.n	80100c8 <_printf_i+0x170>
 80100f4:	6823      	ldr	r3, [r4, #0]
 80100f6:	f023 0320 	bic.w	r3, r3, #32
 80100fa:	6023      	str	r3, [r4, #0]
 80100fc:	e7f6      	b.n	80100ec <_printf_i+0x194>
 80100fe:	4616      	mov	r6, r2
 8010100:	e7bd      	b.n	801007e <_printf_i+0x126>
 8010102:	6833      	ldr	r3, [r6, #0]
 8010104:	6825      	ldr	r5, [r4, #0]
 8010106:	6961      	ldr	r1, [r4, #20]
 8010108:	1d18      	adds	r0, r3, #4
 801010a:	6030      	str	r0, [r6, #0]
 801010c:	062e      	lsls	r6, r5, #24
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	d501      	bpl.n	8010116 <_printf_i+0x1be>
 8010112:	6019      	str	r1, [r3, #0]
 8010114:	e002      	b.n	801011c <_printf_i+0x1c4>
 8010116:	0668      	lsls	r0, r5, #25
 8010118:	d5fb      	bpl.n	8010112 <_printf_i+0x1ba>
 801011a:	8019      	strh	r1, [r3, #0]
 801011c:	2300      	movs	r3, #0
 801011e:	6123      	str	r3, [r4, #16]
 8010120:	4616      	mov	r6, r2
 8010122:	e7bc      	b.n	801009e <_printf_i+0x146>
 8010124:	6833      	ldr	r3, [r6, #0]
 8010126:	1d1a      	adds	r2, r3, #4
 8010128:	6032      	str	r2, [r6, #0]
 801012a:	681e      	ldr	r6, [r3, #0]
 801012c:	6862      	ldr	r2, [r4, #4]
 801012e:	2100      	movs	r1, #0
 8010130:	4630      	mov	r0, r6
 8010132:	f7f0 f875 	bl	8000220 <memchr>
 8010136:	b108      	cbz	r0, 801013c <_printf_i+0x1e4>
 8010138:	1b80      	subs	r0, r0, r6
 801013a:	6060      	str	r0, [r4, #4]
 801013c:	6863      	ldr	r3, [r4, #4]
 801013e:	6123      	str	r3, [r4, #16]
 8010140:	2300      	movs	r3, #0
 8010142:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010146:	e7aa      	b.n	801009e <_printf_i+0x146>
 8010148:	6923      	ldr	r3, [r4, #16]
 801014a:	4632      	mov	r2, r6
 801014c:	4649      	mov	r1, r9
 801014e:	4640      	mov	r0, r8
 8010150:	47d0      	blx	sl
 8010152:	3001      	adds	r0, #1
 8010154:	d0ad      	beq.n	80100b2 <_printf_i+0x15a>
 8010156:	6823      	ldr	r3, [r4, #0]
 8010158:	079b      	lsls	r3, r3, #30
 801015a:	d413      	bmi.n	8010184 <_printf_i+0x22c>
 801015c:	68e0      	ldr	r0, [r4, #12]
 801015e:	9b03      	ldr	r3, [sp, #12]
 8010160:	4298      	cmp	r0, r3
 8010162:	bfb8      	it	lt
 8010164:	4618      	movlt	r0, r3
 8010166:	e7a6      	b.n	80100b6 <_printf_i+0x15e>
 8010168:	2301      	movs	r3, #1
 801016a:	4632      	mov	r2, r6
 801016c:	4649      	mov	r1, r9
 801016e:	4640      	mov	r0, r8
 8010170:	47d0      	blx	sl
 8010172:	3001      	adds	r0, #1
 8010174:	d09d      	beq.n	80100b2 <_printf_i+0x15a>
 8010176:	3501      	adds	r5, #1
 8010178:	68e3      	ldr	r3, [r4, #12]
 801017a:	9903      	ldr	r1, [sp, #12]
 801017c:	1a5b      	subs	r3, r3, r1
 801017e:	42ab      	cmp	r3, r5
 8010180:	dcf2      	bgt.n	8010168 <_printf_i+0x210>
 8010182:	e7eb      	b.n	801015c <_printf_i+0x204>
 8010184:	2500      	movs	r5, #0
 8010186:	f104 0619 	add.w	r6, r4, #25
 801018a:	e7f5      	b.n	8010178 <_printf_i+0x220>
 801018c:	08012612 	.word	0x08012612
 8010190:	08012623 	.word	0x08012623

08010194 <std>:
 8010194:	2300      	movs	r3, #0
 8010196:	b510      	push	{r4, lr}
 8010198:	4604      	mov	r4, r0
 801019a:	e9c0 3300 	strd	r3, r3, [r0]
 801019e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101a2:	6083      	str	r3, [r0, #8]
 80101a4:	8181      	strh	r1, [r0, #12]
 80101a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80101a8:	81c2      	strh	r2, [r0, #14]
 80101aa:	6183      	str	r3, [r0, #24]
 80101ac:	4619      	mov	r1, r3
 80101ae:	2208      	movs	r2, #8
 80101b0:	305c      	adds	r0, #92	@ 0x5c
 80101b2:	f000 f8f4 	bl	801039e <memset>
 80101b6:	4b0d      	ldr	r3, [pc, #52]	@ (80101ec <std+0x58>)
 80101b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80101ba:	4b0d      	ldr	r3, [pc, #52]	@ (80101f0 <std+0x5c>)
 80101bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80101be:	4b0d      	ldr	r3, [pc, #52]	@ (80101f4 <std+0x60>)
 80101c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80101c2:	4b0d      	ldr	r3, [pc, #52]	@ (80101f8 <std+0x64>)
 80101c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80101c6:	4b0d      	ldr	r3, [pc, #52]	@ (80101fc <std+0x68>)
 80101c8:	6224      	str	r4, [r4, #32]
 80101ca:	429c      	cmp	r4, r3
 80101cc:	d006      	beq.n	80101dc <std+0x48>
 80101ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80101d2:	4294      	cmp	r4, r2
 80101d4:	d002      	beq.n	80101dc <std+0x48>
 80101d6:	33d0      	adds	r3, #208	@ 0xd0
 80101d8:	429c      	cmp	r4, r3
 80101da:	d105      	bne.n	80101e8 <std+0x54>
 80101dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80101e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101e4:	f000 b968 	b.w	80104b8 <__retarget_lock_init_recursive>
 80101e8:	bd10      	pop	{r4, pc}
 80101ea:	bf00      	nop
 80101ec:	08010319 	.word	0x08010319
 80101f0:	0801033b 	.word	0x0801033b
 80101f4:	08010373 	.word	0x08010373
 80101f8:	08010397 	.word	0x08010397
 80101fc:	20002228 	.word	0x20002228

08010200 <stdio_exit_handler>:
 8010200:	4a02      	ldr	r2, [pc, #8]	@ (801020c <stdio_exit_handler+0xc>)
 8010202:	4903      	ldr	r1, [pc, #12]	@ (8010210 <stdio_exit_handler+0x10>)
 8010204:	4803      	ldr	r0, [pc, #12]	@ (8010214 <stdio_exit_handler+0x14>)
 8010206:	f000 b869 	b.w	80102dc <_fwalk_sglue>
 801020a:	bf00      	nop
 801020c:	2000010c 	.word	0x2000010c
 8010210:	08011a21 	.word	0x08011a21
 8010214:	2000011c 	.word	0x2000011c

08010218 <cleanup_stdio>:
 8010218:	6841      	ldr	r1, [r0, #4]
 801021a:	4b0c      	ldr	r3, [pc, #48]	@ (801024c <cleanup_stdio+0x34>)
 801021c:	4299      	cmp	r1, r3
 801021e:	b510      	push	{r4, lr}
 8010220:	4604      	mov	r4, r0
 8010222:	d001      	beq.n	8010228 <cleanup_stdio+0x10>
 8010224:	f001 fbfc 	bl	8011a20 <_fflush_r>
 8010228:	68a1      	ldr	r1, [r4, #8]
 801022a:	4b09      	ldr	r3, [pc, #36]	@ (8010250 <cleanup_stdio+0x38>)
 801022c:	4299      	cmp	r1, r3
 801022e:	d002      	beq.n	8010236 <cleanup_stdio+0x1e>
 8010230:	4620      	mov	r0, r4
 8010232:	f001 fbf5 	bl	8011a20 <_fflush_r>
 8010236:	68e1      	ldr	r1, [r4, #12]
 8010238:	4b06      	ldr	r3, [pc, #24]	@ (8010254 <cleanup_stdio+0x3c>)
 801023a:	4299      	cmp	r1, r3
 801023c:	d004      	beq.n	8010248 <cleanup_stdio+0x30>
 801023e:	4620      	mov	r0, r4
 8010240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010244:	f001 bbec 	b.w	8011a20 <_fflush_r>
 8010248:	bd10      	pop	{r4, pc}
 801024a:	bf00      	nop
 801024c:	20002228 	.word	0x20002228
 8010250:	20002290 	.word	0x20002290
 8010254:	200022f8 	.word	0x200022f8

08010258 <global_stdio_init.part.0>:
 8010258:	b510      	push	{r4, lr}
 801025a:	4b0b      	ldr	r3, [pc, #44]	@ (8010288 <global_stdio_init.part.0+0x30>)
 801025c:	4c0b      	ldr	r4, [pc, #44]	@ (801028c <global_stdio_init.part.0+0x34>)
 801025e:	4a0c      	ldr	r2, [pc, #48]	@ (8010290 <global_stdio_init.part.0+0x38>)
 8010260:	601a      	str	r2, [r3, #0]
 8010262:	4620      	mov	r0, r4
 8010264:	2200      	movs	r2, #0
 8010266:	2104      	movs	r1, #4
 8010268:	f7ff ff94 	bl	8010194 <std>
 801026c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010270:	2201      	movs	r2, #1
 8010272:	2109      	movs	r1, #9
 8010274:	f7ff ff8e 	bl	8010194 <std>
 8010278:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801027c:	2202      	movs	r2, #2
 801027e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010282:	2112      	movs	r1, #18
 8010284:	f7ff bf86 	b.w	8010194 <std>
 8010288:	20002360 	.word	0x20002360
 801028c:	20002228 	.word	0x20002228
 8010290:	08010201 	.word	0x08010201

08010294 <__sfp_lock_acquire>:
 8010294:	4801      	ldr	r0, [pc, #4]	@ (801029c <__sfp_lock_acquire+0x8>)
 8010296:	f000 b910 	b.w	80104ba <__retarget_lock_acquire_recursive>
 801029a:	bf00      	nop
 801029c:	20002369 	.word	0x20002369

080102a0 <__sfp_lock_release>:
 80102a0:	4801      	ldr	r0, [pc, #4]	@ (80102a8 <__sfp_lock_release+0x8>)
 80102a2:	f000 b90b 	b.w	80104bc <__retarget_lock_release_recursive>
 80102a6:	bf00      	nop
 80102a8:	20002369 	.word	0x20002369

080102ac <__sinit>:
 80102ac:	b510      	push	{r4, lr}
 80102ae:	4604      	mov	r4, r0
 80102b0:	f7ff fff0 	bl	8010294 <__sfp_lock_acquire>
 80102b4:	6a23      	ldr	r3, [r4, #32]
 80102b6:	b11b      	cbz	r3, 80102c0 <__sinit+0x14>
 80102b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102bc:	f7ff bff0 	b.w	80102a0 <__sfp_lock_release>
 80102c0:	4b04      	ldr	r3, [pc, #16]	@ (80102d4 <__sinit+0x28>)
 80102c2:	6223      	str	r3, [r4, #32]
 80102c4:	4b04      	ldr	r3, [pc, #16]	@ (80102d8 <__sinit+0x2c>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d1f5      	bne.n	80102b8 <__sinit+0xc>
 80102cc:	f7ff ffc4 	bl	8010258 <global_stdio_init.part.0>
 80102d0:	e7f2      	b.n	80102b8 <__sinit+0xc>
 80102d2:	bf00      	nop
 80102d4:	08010219 	.word	0x08010219
 80102d8:	20002360 	.word	0x20002360

080102dc <_fwalk_sglue>:
 80102dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102e0:	4607      	mov	r7, r0
 80102e2:	4688      	mov	r8, r1
 80102e4:	4614      	mov	r4, r2
 80102e6:	2600      	movs	r6, #0
 80102e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80102ec:	f1b9 0901 	subs.w	r9, r9, #1
 80102f0:	d505      	bpl.n	80102fe <_fwalk_sglue+0x22>
 80102f2:	6824      	ldr	r4, [r4, #0]
 80102f4:	2c00      	cmp	r4, #0
 80102f6:	d1f7      	bne.n	80102e8 <_fwalk_sglue+0xc>
 80102f8:	4630      	mov	r0, r6
 80102fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102fe:	89ab      	ldrh	r3, [r5, #12]
 8010300:	2b01      	cmp	r3, #1
 8010302:	d907      	bls.n	8010314 <_fwalk_sglue+0x38>
 8010304:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010308:	3301      	adds	r3, #1
 801030a:	d003      	beq.n	8010314 <_fwalk_sglue+0x38>
 801030c:	4629      	mov	r1, r5
 801030e:	4638      	mov	r0, r7
 8010310:	47c0      	blx	r8
 8010312:	4306      	orrs	r6, r0
 8010314:	3568      	adds	r5, #104	@ 0x68
 8010316:	e7e9      	b.n	80102ec <_fwalk_sglue+0x10>

08010318 <__sread>:
 8010318:	b510      	push	{r4, lr}
 801031a:	460c      	mov	r4, r1
 801031c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010320:	f000 f86c 	bl	80103fc <_read_r>
 8010324:	2800      	cmp	r0, #0
 8010326:	bfab      	itete	ge
 8010328:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801032a:	89a3      	ldrhlt	r3, [r4, #12]
 801032c:	181b      	addge	r3, r3, r0
 801032e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010332:	bfac      	ite	ge
 8010334:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010336:	81a3      	strhlt	r3, [r4, #12]
 8010338:	bd10      	pop	{r4, pc}

0801033a <__swrite>:
 801033a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801033e:	461f      	mov	r7, r3
 8010340:	898b      	ldrh	r3, [r1, #12]
 8010342:	05db      	lsls	r3, r3, #23
 8010344:	4605      	mov	r5, r0
 8010346:	460c      	mov	r4, r1
 8010348:	4616      	mov	r6, r2
 801034a:	d505      	bpl.n	8010358 <__swrite+0x1e>
 801034c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010350:	2302      	movs	r3, #2
 8010352:	2200      	movs	r2, #0
 8010354:	f000 f840 	bl	80103d8 <_lseek_r>
 8010358:	89a3      	ldrh	r3, [r4, #12]
 801035a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801035e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010362:	81a3      	strh	r3, [r4, #12]
 8010364:	4632      	mov	r2, r6
 8010366:	463b      	mov	r3, r7
 8010368:	4628      	mov	r0, r5
 801036a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801036e:	f000 b867 	b.w	8010440 <_write_r>

08010372 <__sseek>:
 8010372:	b510      	push	{r4, lr}
 8010374:	460c      	mov	r4, r1
 8010376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801037a:	f000 f82d 	bl	80103d8 <_lseek_r>
 801037e:	1c43      	adds	r3, r0, #1
 8010380:	89a3      	ldrh	r3, [r4, #12]
 8010382:	bf15      	itete	ne
 8010384:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010386:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801038a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801038e:	81a3      	strheq	r3, [r4, #12]
 8010390:	bf18      	it	ne
 8010392:	81a3      	strhne	r3, [r4, #12]
 8010394:	bd10      	pop	{r4, pc}

08010396 <__sclose>:
 8010396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801039a:	f000 b80d 	b.w	80103b8 <_close_r>

0801039e <memset>:
 801039e:	4402      	add	r2, r0
 80103a0:	4603      	mov	r3, r0
 80103a2:	4293      	cmp	r3, r2
 80103a4:	d100      	bne.n	80103a8 <memset+0xa>
 80103a6:	4770      	bx	lr
 80103a8:	f803 1b01 	strb.w	r1, [r3], #1
 80103ac:	e7f9      	b.n	80103a2 <memset+0x4>
	...

080103b0 <_localeconv_r>:
 80103b0:	4800      	ldr	r0, [pc, #0]	@ (80103b4 <_localeconv_r+0x4>)
 80103b2:	4770      	bx	lr
 80103b4:	20000258 	.word	0x20000258

080103b8 <_close_r>:
 80103b8:	b538      	push	{r3, r4, r5, lr}
 80103ba:	4d06      	ldr	r5, [pc, #24]	@ (80103d4 <_close_r+0x1c>)
 80103bc:	2300      	movs	r3, #0
 80103be:	4604      	mov	r4, r0
 80103c0:	4608      	mov	r0, r1
 80103c2:	602b      	str	r3, [r5, #0]
 80103c4:	f7f3 faae 	bl	8003924 <_close>
 80103c8:	1c43      	adds	r3, r0, #1
 80103ca:	d102      	bne.n	80103d2 <_close_r+0x1a>
 80103cc:	682b      	ldr	r3, [r5, #0]
 80103ce:	b103      	cbz	r3, 80103d2 <_close_r+0x1a>
 80103d0:	6023      	str	r3, [r4, #0]
 80103d2:	bd38      	pop	{r3, r4, r5, pc}
 80103d4:	20002364 	.word	0x20002364

080103d8 <_lseek_r>:
 80103d8:	b538      	push	{r3, r4, r5, lr}
 80103da:	4d07      	ldr	r5, [pc, #28]	@ (80103f8 <_lseek_r+0x20>)
 80103dc:	4604      	mov	r4, r0
 80103de:	4608      	mov	r0, r1
 80103e0:	4611      	mov	r1, r2
 80103e2:	2200      	movs	r2, #0
 80103e4:	602a      	str	r2, [r5, #0]
 80103e6:	461a      	mov	r2, r3
 80103e8:	f7f3 fac3 	bl	8003972 <_lseek>
 80103ec:	1c43      	adds	r3, r0, #1
 80103ee:	d102      	bne.n	80103f6 <_lseek_r+0x1e>
 80103f0:	682b      	ldr	r3, [r5, #0]
 80103f2:	b103      	cbz	r3, 80103f6 <_lseek_r+0x1e>
 80103f4:	6023      	str	r3, [r4, #0]
 80103f6:	bd38      	pop	{r3, r4, r5, pc}
 80103f8:	20002364 	.word	0x20002364

080103fc <_read_r>:
 80103fc:	b538      	push	{r3, r4, r5, lr}
 80103fe:	4d07      	ldr	r5, [pc, #28]	@ (801041c <_read_r+0x20>)
 8010400:	4604      	mov	r4, r0
 8010402:	4608      	mov	r0, r1
 8010404:	4611      	mov	r1, r2
 8010406:	2200      	movs	r2, #0
 8010408:	602a      	str	r2, [r5, #0]
 801040a:	461a      	mov	r2, r3
 801040c:	f7f3 fa51 	bl	80038b2 <_read>
 8010410:	1c43      	adds	r3, r0, #1
 8010412:	d102      	bne.n	801041a <_read_r+0x1e>
 8010414:	682b      	ldr	r3, [r5, #0]
 8010416:	b103      	cbz	r3, 801041a <_read_r+0x1e>
 8010418:	6023      	str	r3, [r4, #0]
 801041a:	bd38      	pop	{r3, r4, r5, pc}
 801041c:	20002364 	.word	0x20002364

08010420 <_sbrk_r>:
 8010420:	b538      	push	{r3, r4, r5, lr}
 8010422:	4d06      	ldr	r5, [pc, #24]	@ (801043c <_sbrk_r+0x1c>)
 8010424:	2300      	movs	r3, #0
 8010426:	4604      	mov	r4, r0
 8010428:	4608      	mov	r0, r1
 801042a:	602b      	str	r3, [r5, #0]
 801042c:	f7f3 faae 	bl	800398c <_sbrk>
 8010430:	1c43      	adds	r3, r0, #1
 8010432:	d102      	bne.n	801043a <_sbrk_r+0x1a>
 8010434:	682b      	ldr	r3, [r5, #0]
 8010436:	b103      	cbz	r3, 801043a <_sbrk_r+0x1a>
 8010438:	6023      	str	r3, [r4, #0]
 801043a:	bd38      	pop	{r3, r4, r5, pc}
 801043c:	20002364 	.word	0x20002364

08010440 <_write_r>:
 8010440:	b538      	push	{r3, r4, r5, lr}
 8010442:	4d07      	ldr	r5, [pc, #28]	@ (8010460 <_write_r+0x20>)
 8010444:	4604      	mov	r4, r0
 8010446:	4608      	mov	r0, r1
 8010448:	4611      	mov	r1, r2
 801044a:	2200      	movs	r2, #0
 801044c:	602a      	str	r2, [r5, #0]
 801044e:	461a      	mov	r2, r3
 8010450:	f7f3 fa4c 	bl	80038ec <_write>
 8010454:	1c43      	adds	r3, r0, #1
 8010456:	d102      	bne.n	801045e <_write_r+0x1e>
 8010458:	682b      	ldr	r3, [r5, #0]
 801045a:	b103      	cbz	r3, 801045e <_write_r+0x1e>
 801045c:	6023      	str	r3, [r4, #0]
 801045e:	bd38      	pop	{r3, r4, r5, pc}
 8010460:	20002364 	.word	0x20002364

08010464 <__errno>:
 8010464:	4b01      	ldr	r3, [pc, #4]	@ (801046c <__errno+0x8>)
 8010466:	6818      	ldr	r0, [r3, #0]
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop
 801046c:	20000118 	.word	0x20000118

08010470 <__libc_init_array>:
 8010470:	b570      	push	{r4, r5, r6, lr}
 8010472:	4d0d      	ldr	r5, [pc, #52]	@ (80104a8 <__libc_init_array+0x38>)
 8010474:	4c0d      	ldr	r4, [pc, #52]	@ (80104ac <__libc_init_array+0x3c>)
 8010476:	1b64      	subs	r4, r4, r5
 8010478:	10a4      	asrs	r4, r4, #2
 801047a:	2600      	movs	r6, #0
 801047c:	42a6      	cmp	r6, r4
 801047e:	d109      	bne.n	8010494 <__libc_init_array+0x24>
 8010480:	4d0b      	ldr	r5, [pc, #44]	@ (80104b0 <__libc_init_array+0x40>)
 8010482:	4c0c      	ldr	r4, [pc, #48]	@ (80104b4 <__libc_init_array+0x44>)
 8010484:	f002 f87c 	bl	8012580 <_init>
 8010488:	1b64      	subs	r4, r4, r5
 801048a:	10a4      	asrs	r4, r4, #2
 801048c:	2600      	movs	r6, #0
 801048e:	42a6      	cmp	r6, r4
 8010490:	d105      	bne.n	801049e <__libc_init_array+0x2e>
 8010492:	bd70      	pop	{r4, r5, r6, pc}
 8010494:	f855 3b04 	ldr.w	r3, [r5], #4
 8010498:	4798      	blx	r3
 801049a:	3601      	adds	r6, #1
 801049c:	e7ee      	b.n	801047c <__libc_init_array+0xc>
 801049e:	f855 3b04 	ldr.w	r3, [r5], #4
 80104a2:	4798      	blx	r3
 80104a4:	3601      	adds	r6, #1
 80104a6:	e7f2      	b.n	801048e <__libc_init_array+0x1e>
 80104a8:	080129c8 	.word	0x080129c8
 80104ac:	080129c8 	.word	0x080129c8
 80104b0:	080129c8 	.word	0x080129c8
 80104b4:	080129cc 	.word	0x080129cc

080104b8 <__retarget_lock_init_recursive>:
 80104b8:	4770      	bx	lr

080104ba <__retarget_lock_acquire_recursive>:
 80104ba:	4770      	bx	lr

080104bc <__retarget_lock_release_recursive>:
 80104bc:	4770      	bx	lr

080104be <memcpy>:
 80104be:	440a      	add	r2, r1
 80104c0:	4291      	cmp	r1, r2
 80104c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80104c6:	d100      	bne.n	80104ca <memcpy+0xc>
 80104c8:	4770      	bx	lr
 80104ca:	b510      	push	{r4, lr}
 80104cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104d4:	4291      	cmp	r1, r2
 80104d6:	d1f9      	bne.n	80104cc <memcpy+0xe>
 80104d8:	bd10      	pop	{r4, pc}

080104da <quorem>:
 80104da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104de:	6903      	ldr	r3, [r0, #16]
 80104e0:	690c      	ldr	r4, [r1, #16]
 80104e2:	42a3      	cmp	r3, r4
 80104e4:	4607      	mov	r7, r0
 80104e6:	db7e      	blt.n	80105e6 <quorem+0x10c>
 80104e8:	3c01      	subs	r4, #1
 80104ea:	f101 0814 	add.w	r8, r1, #20
 80104ee:	00a3      	lsls	r3, r4, #2
 80104f0:	f100 0514 	add.w	r5, r0, #20
 80104f4:	9300      	str	r3, [sp, #0]
 80104f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80104fa:	9301      	str	r3, [sp, #4]
 80104fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010500:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010504:	3301      	adds	r3, #1
 8010506:	429a      	cmp	r2, r3
 8010508:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801050c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010510:	d32e      	bcc.n	8010570 <quorem+0x96>
 8010512:	f04f 0a00 	mov.w	sl, #0
 8010516:	46c4      	mov	ip, r8
 8010518:	46ae      	mov	lr, r5
 801051a:	46d3      	mov	fp, sl
 801051c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010520:	b298      	uxth	r0, r3
 8010522:	fb06 a000 	mla	r0, r6, r0, sl
 8010526:	0c02      	lsrs	r2, r0, #16
 8010528:	0c1b      	lsrs	r3, r3, #16
 801052a:	fb06 2303 	mla	r3, r6, r3, r2
 801052e:	f8de 2000 	ldr.w	r2, [lr]
 8010532:	b280      	uxth	r0, r0
 8010534:	b292      	uxth	r2, r2
 8010536:	1a12      	subs	r2, r2, r0
 8010538:	445a      	add	r2, fp
 801053a:	f8de 0000 	ldr.w	r0, [lr]
 801053e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010542:	b29b      	uxth	r3, r3
 8010544:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010548:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801054c:	b292      	uxth	r2, r2
 801054e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010552:	45e1      	cmp	r9, ip
 8010554:	f84e 2b04 	str.w	r2, [lr], #4
 8010558:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801055c:	d2de      	bcs.n	801051c <quorem+0x42>
 801055e:	9b00      	ldr	r3, [sp, #0]
 8010560:	58eb      	ldr	r3, [r5, r3]
 8010562:	b92b      	cbnz	r3, 8010570 <quorem+0x96>
 8010564:	9b01      	ldr	r3, [sp, #4]
 8010566:	3b04      	subs	r3, #4
 8010568:	429d      	cmp	r5, r3
 801056a:	461a      	mov	r2, r3
 801056c:	d32f      	bcc.n	80105ce <quorem+0xf4>
 801056e:	613c      	str	r4, [r7, #16]
 8010570:	4638      	mov	r0, r7
 8010572:	f001 f8c9 	bl	8011708 <__mcmp>
 8010576:	2800      	cmp	r0, #0
 8010578:	db25      	blt.n	80105c6 <quorem+0xec>
 801057a:	4629      	mov	r1, r5
 801057c:	2000      	movs	r0, #0
 801057e:	f858 2b04 	ldr.w	r2, [r8], #4
 8010582:	f8d1 c000 	ldr.w	ip, [r1]
 8010586:	fa1f fe82 	uxth.w	lr, r2
 801058a:	fa1f f38c 	uxth.w	r3, ip
 801058e:	eba3 030e 	sub.w	r3, r3, lr
 8010592:	4403      	add	r3, r0
 8010594:	0c12      	lsrs	r2, r2, #16
 8010596:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801059a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801059e:	b29b      	uxth	r3, r3
 80105a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80105a4:	45c1      	cmp	r9, r8
 80105a6:	f841 3b04 	str.w	r3, [r1], #4
 80105aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80105ae:	d2e6      	bcs.n	801057e <quorem+0xa4>
 80105b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80105b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80105b8:	b922      	cbnz	r2, 80105c4 <quorem+0xea>
 80105ba:	3b04      	subs	r3, #4
 80105bc:	429d      	cmp	r5, r3
 80105be:	461a      	mov	r2, r3
 80105c0:	d30b      	bcc.n	80105da <quorem+0x100>
 80105c2:	613c      	str	r4, [r7, #16]
 80105c4:	3601      	adds	r6, #1
 80105c6:	4630      	mov	r0, r6
 80105c8:	b003      	add	sp, #12
 80105ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ce:	6812      	ldr	r2, [r2, #0]
 80105d0:	3b04      	subs	r3, #4
 80105d2:	2a00      	cmp	r2, #0
 80105d4:	d1cb      	bne.n	801056e <quorem+0x94>
 80105d6:	3c01      	subs	r4, #1
 80105d8:	e7c6      	b.n	8010568 <quorem+0x8e>
 80105da:	6812      	ldr	r2, [r2, #0]
 80105dc:	3b04      	subs	r3, #4
 80105de:	2a00      	cmp	r2, #0
 80105e0:	d1ef      	bne.n	80105c2 <quorem+0xe8>
 80105e2:	3c01      	subs	r4, #1
 80105e4:	e7ea      	b.n	80105bc <quorem+0xe2>
 80105e6:	2000      	movs	r0, #0
 80105e8:	e7ee      	b.n	80105c8 <quorem+0xee>
 80105ea:	0000      	movs	r0, r0
 80105ec:	0000      	movs	r0, r0
	...

080105f0 <_dtoa_r>:
 80105f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f4:	69c7      	ldr	r7, [r0, #28]
 80105f6:	b097      	sub	sp, #92	@ 0x5c
 80105f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80105fc:	ec55 4b10 	vmov	r4, r5, d0
 8010600:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010602:	9107      	str	r1, [sp, #28]
 8010604:	4681      	mov	r9, r0
 8010606:	920c      	str	r2, [sp, #48]	@ 0x30
 8010608:	9311      	str	r3, [sp, #68]	@ 0x44
 801060a:	b97f      	cbnz	r7, 801062c <_dtoa_r+0x3c>
 801060c:	2010      	movs	r0, #16
 801060e:	f7ff f8ad 	bl	800f76c <malloc>
 8010612:	4602      	mov	r2, r0
 8010614:	f8c9 001c 	str.w	r0, [r9, #28]
 8010618:	b920      	cbnz	r0, 8010624 <_dtoa_r+0x34>
 801061a:	4ba9      	ldr	r3, [pc, #676]	@ (80108c0 <_dtoa_r+0x2d0>)
 801061c:	21ef      	movs	r1, #239	@ 0xef
 801061e:	48a9      	ldr	r0, [pc, #676]	@ (80108c4 <_dtoa_r+0x2d4>)
 8010620:	f001 fa26 	bl	8011a70 <__assert_func>
 8010624:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010628:	6007      	str	r7, [r0, #0]
 801062a:	60c7      	str	r7, [r0, #12]
 801062c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010630:	6819      	ldr	r1, [r3, #0]
 8010632:	b159      	cbz	r1, 801064c <_dtoa_r+0x5c>
 8010634:	685a      	ldr	r2, [r3, #4]
 8010636:	604a      	str	r2, [r1, #4]
 8010638:	2301      	movs	r3, #1
 801063a:	4093      	lsls	r3, r2
 801063c:	608b      	str	r3, [r1, #8]
 801063e:	4648      	mov	r0, r9
 8010640:	f000 fe30 	bl	80112a4 <_Bfree>
 8010644:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010648:	2200      	movs	r2, #0
 801064a:	601a      	str	r2, [r3, #0]
 801064c:	1e2b      	subs	r3, r5, #0
 801064e:	bfb9      	ittee	lt
 8010650:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010654:	9305      	strlt	r3, [sp, #20]
 8010656:	2300      	movge	r3, #0
 8010658:	6033      	strge	r3, [r6, #0]
 801065a:	9f05      	ldr	r7, [sp, #20]
 801065c:	4b9a      	ldr	r3, [pc, #616]	@ (80108c8 <_dtoa_r+0x2d8>)
 801065e:	bfbc      	itt	lt
 8010660:	2201      	movlt	r2, #1
 8010662:	6032      	strlt	r2, [r6, #0]
 8010664:	43bb      	bics	r3, r7
 8010666:	d112      	bne.n	801068e <_dtoa_r+0x9e>
 8010668:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801066a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801066e:	6013      	str	r3, [r2, #0]
 8010670:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010674:	4323      	orrs	r3, r4
 8010676:	f000 855a 	beq.w	801112e <_dtoa_r+0xb3e>
 801067a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801067c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80108dc <_dtoa_r+0x2ec>
 8010680:	2b00      	cmp	r3, #0
 8010682:	f000 855c 	beq.w	801113e <_dtoa_r+0xb4e>
 8010686:	f10a 0303 	add.w	r3, sl, #3
 801068a:	f000 bd56 	b.w	801113a <_dtoa_r+0xb4a>
 801068e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010692:	2200      	movs	r2, #0
 8010694:	ec51 0b17 	vmov	r0, r1, d7
 8010698:	2300      	movs	r3, #0
 801069a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801069e:	f7f0 fa3b 	bl	8000b18 <__aeabi_dcmpeq>
 80106a2:	4680      	mov	r8, r0
 80106a4:	b158      	cbz	r0, 80106be <_dtoa_r+0xce>
 80106a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80106a8:	2301      	movs	r3, #1
 80106aa:	6013      	str	r3, [r2, #0]
 80106ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80106ae:	b113      	cbz	r3, 80106b6 <_dtoa_r+0xc6>
 80106b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80106b2:	4b86      	ldr	r3, [pc, #536]	@ (80108cc <_dtoa_r+0x2dc>)
 80106b4:	6013      	str	r3, [r2, #0]
 80106b6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80108e0 <_dtoa_r+0x2f0>
 80106ba:	f000 bd40 	b.w	801113e <_dtoa_r+0xb4e>
 80106be:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80106c2:	aa14      	add	r2, sp, #80	@ 0x50
 80106c4:	a915      	add	r1, sp, #84	@ 0x54
 80106c6:	4648      	mov	r0, r9
 80106c8:	f001 f8ce 	bl	8011868 <__d2b>
 80106cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80106d0:	9002      	str	r0, [sp, #8]
 80106d2:	2e00      	cmp	r6, #0
 80106d4:	d078      	beq.n	80107c8 <_dtoa_r+0x1d8>
 80106d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106d8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80106dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80106e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80106e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80106ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80106f0:	4619      	mov	r1, r3
 80106f2:	2200      	movs	r2, #0
 80106f4:	4b76      	ldr	r3, [pc, #472]	@ (80108d0 <_dtoa_r+0x2e0>)
 80106f6:	f7ef fdef 	bl	80002d8 <__aeabi_dsub>
 80106fa:	a36b      	add	r3, pc, #428	@ (adr r3, 80108a8 <_dtoa_r+0x2b8>)
 80106fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010700:	f7ef ffa2 	bl	8000648 <__aeabi_dmul>
 8010704:	a36a      	add	r3, pc, #424	@ (adr r3, 80108b0 <_dtoa_r+0x2c0>)
 8010706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070a:	f7ef fde7 	bl	80002dc <__adddf3>
 801070e:	4604      	mov	r4, r0
 8010710:	4630      	mov	r0, r6
 8010712:	460d      	mov	r5, r1
 8010714:	f7ef ff2e 	bl	8000574 <__aeabi_i2d>
 8010718:	a367      	add	r3, pc, #412	@ (adr r3, 80108b8 <_dtoa_r+0x2c8>)
 801071a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071e:	f7ef ff93 	bl	8000648 <__aeabi_dmul>
 8010722:	4602      	mov	r2, r0
 8010724:	460b      	mov	r3, r1
 8010726:	4620      	mov	r0, r4
 8010728:	4629      	mov	r1, r5
 801072a:	f7ef fdd7 	bl	80002dc <__adddf3>
 801072e:	4604      	mov	r4, r0
 8010730:	460d      	mov	r5, r1
 8010732:	f7f0 fa39 	bl	8000ba8 <__aeabi_d2iz>
 8010736:	2200      	movs	r2, #0
 8010738:	4607      	mov	r7, r0
 801073a:	2300      	movs	r3, #0
 801073c:	4620      	mov	r0, r4
 801073e:	4629      	mov	r1, r5
 8010740:	f7f0 f9f4 	bl	8000b2c <__aeabi_dcmplt>
 8010744:	b140      	cbz	r0, 8010758 <_dtoa_r+0x168>
 8010746:	4638      	mov	r0, r7
 8010748:	f7ef ff14 	bl	8000574 <__aeabi_i2d>
 801074c:	4622      	mov	r2, r4
 801074e:	462b      	mov	r3, r5
 8010750:	f7f0 f9e2 	bl	8000b18 <__aeabi_dcmpeq>
 8010754:	b900      	cbnz	r0, 8010758 <_dtoa_r+0x168>
 8010756:	3f01      	subs	r7, #1
 8010758:	2f16      	cmp	r7, #22
 801075a:	d852      	bhi.n	8010802 <_dtoa_r+0x212>
 801075c:	4b5d      	ldr	r3, [pc, #372]	@ (80108d4 <_dtoa_r+0x2e4>)
 801075e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010766:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801076a:	f7f0 f9df 	bl	8000b2c <__aeabi_dcmplt>
 801076e:	2800      	cmp	r0, #0
 8010770:	d049      	beq.n	8010806 <_dtoa_r+0x216>
 8010772:	3f01      	subs	r7, #1
 8010774:	2300      	movs	r3, #0
 8010776:	9310      	str	r3, [sp, #64]	@ 0x40
 8010778:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801077a:	1b9b      	subs	r3, r3, r6
 801077c:	1e5a      	subs	r2, r3, #1
 801077e:	bf45      	ittet	mi
 8010780:	f1c3 0301 	rsbmi	r3, r3, #1
 8010784:	9300      	strmi	r3, [sp, #0]
 8010786:	2300      	movpl	r3, #0
 8010788:	2300      	movmi	r3, #0
 801078a:	9206      	str	r2, [sp, #24]
 801078c:	bf54      	ite	pl
 801078e:	9300      	strpl	r3, [sp, #0]
 8010790:	9306      	strmi	r3, [sp, #24]
 8010792:	2f00      	cmp	r7, #0
 8010794:	db39      	blt.n	801080a <_dtoa_r+0x21a>
 8010796:	9b06      	ldr	r3, [sp, #24]
 8010798:	970d      	str	r7, [sp, #52]	@ 0x34
 801079a:	443b      	add	r3, r7
 801079c:	9306      	str	r3, [sp, #24]
 801079e:	2300      	movs	r3, #0
 80107a0:	9308      	str	r3, [sp, #32]
 80107a2:	9b07      	ldr	r3, [sp, #28]
 80107a4:	2b09      	cmp	r3, #9
 80107a6:	d863      	bhi.n	8010870 <_dtoa_r+0x280>
 80107a8:	2b05      	cmp	r3, #5
 80107aa:	bfc4      	itt	gt
 80107ac:	3b04      	subgt	r3, #4
 80107ae:	9307      	strgt	r3, [sp, #28]
 80107b0:	9b07      	ldr	r3, [sp, #28]
 80107b2:	f1a3 0302 	sub.w	r3, r3, #2
 80107b6:	bfcc      	ite	gt
 80107b8:	2400      	movgt	r4, #0
 80107ba:	2401      	movle	r4, #1
 80107bc:	2b03      	cmp	r3, #3
 80107be:	d863      	bhi.n	8010888 <_dtoa_r+0x298>
 80107c0:	e8df f003 	tbb	[pc, r3]
 80107c4:	2b375452 	.word	0x2b375452
 80107c8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80107cc:	441e      	add	r6, r3
 80107ce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80107d2:	2b20      	cmp	r3, #32
 80107d4:	bfc1      	itttt	gt
 80107d6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80107da:	409f      	lslgt	r7, r3
 80107dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80107e0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80107e4:	bfd6      	itet	le
 80107e6:	f1c3 0320 	rsble	r3, r3, #32
 80107ea:	ea47 0003 	orrgt.w	r0, r7, r3
 80107ee:	fa04 f003 	lslle.w	r0, r4, r3
 80107f2:	f7ef feaf 	bl	8000554 <__aeabi_ui2d>
 80107f6:	2201      	movs	r2, #1
 80107f8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80107fc:	3e01      	subs	r6, #1
 80107fe:	9212      	str	r2, [sp, #72]	@ 0x48
 8010800:	e776      	b.n	80106f0 <_dtoa_r+0x100>
 8010802:	2301      	movs	r3, #1
 8010804:	e7b7      	b.n	8010776 <_dtoa_r+0x186>
 8010806:	9010      	str	r0, [sp, #64]	@ 0x40
 8010808:	e7b6      	b.n	8010778 <_dtoa_r+0x188>
 801080a:	9b00      	ldr	r3, [sp, #0]
 801080c:	1bdb      	subs	r3, r3, r7
 801080e:	9300      	str	r3, [sp, #0]
 8010810:	427b      	negs	r3, r7
 8010812:	9308      	str	r3, [sp, #32]
 8010814:	2300      	movs	r3, #0
 8010816:	930d      	str	r3, [sp, #52]	@ 0x34
 8010818:	e7c3      	b.n	80107a2 <_dtoa_r+0x1b2>
 801081a:	2301      	movs	r3, #1
 801081c:	9309      	str	r3, [sp, #36]	@ 0x24
 801081e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010820:	eb07 0b03 	add.w	fp, r7, r3
 8010824:	f10b 0301 	add.w	r3, fp, #1
 8010828:	2b01      	cmp	r3, #1
 801082a:	9303      	str	r3, [sp, #12]
 801082c:	bfb8      	it	lt
 801082e:	2301      	movlt	r3, #1
 8010830:	e006      	b.n	8010840 <_dtoa_r+0x250>
 8010832:	2301      	movs	r3, #1
 8010834:	9309      	str	r3, [sp, #36]	@ 0x24
 8010836:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010838:	2b00      	cmp	r3, #0
 801083a:	dd28      	ble.n	801088e <_dtoa_r+0x29e>
 801083c:	469b      	mov	fp, r3
 801083e:	9303      	str	r3, [sp, #12]
 8010840:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8010844:	2100      	movs	r1, #0
 8010846:	2204      	movs	r2, #4
 8010848:	f102 0514 	add.w	r5, r2, #20
 801084c:	429d      	cmp	r5, r3
 801084e:	d926      	bls.n	801089e <_dtoa_r+0x2ae>
 8010850:	6041      	str	r1, [r0, #4]
 8010852:	4648      	mov	r0, r9
 8010854:	f000 fce6 	bl	8011224 <_Balloc>
 8010858:	4682      	mov	sl, r0
 801085a:	2800      	cmp	r0, #0
 801085c:	d142      	bne.n	80108e4 <_dtoa_r+0x2f4>
 801085e:	4b1e      	ldr	r3, [pc, #120]	@ (80108d8 <_dtoa_r+0x2e8>)
 8010860:	4602      	mov	r2, r0
 8010862:	f240 11af 	movw	r1, #431	@ 0x1af
 8010866:	e6da      	b.n	801061e <_dtoa_r+0x2e>
 8010868:	2300      	movs	r3, #0
 801086a:	e7e3      	b.n	8010834 <_dtoa_r+0x244>
 801086c:	2300      	movs	r3, #0
 801086e:	e7d5      	b.n	801081c <_dtoa_r+0x22c>
 8010870:	2401      	movs	r4, #1
 8010872:	2300      	movs	r3, #0
 8010874:	9307      	str	r3, [sp, #28]
 8010876:	9409      	str	r4, [sp, #36]	@ 0x24
 8010878:	f04f 3bff 	mov.w	fp, #4294967295
 801087c:	2200      	movs	r2, #0
 801087e:	f8cd b00c 	str.w	fp, [sp, #12]
 8010882:	2312      	movs	r3, #18
 8010884:	920c      	str	r2, [sp, #48]	@ 0x30
 8010886:	e7db      	b.n	8010840 <_dtoa_r+0x250>
 8010888:	2301      	movs	r3, #1
 801088a:	9309      	str	r3, [sp, #36]	@ 0x24
 801088c:	e7f4      	b.n	8010878 <_dtoa_r+0x288>
 801088e:	f04f 0b01 	mov.w	fp, #1
 8010892:	f8cd b00c 	str.w	fp, [sp, #12]
 8010896:	465b      	mov	r3, fp
 8010898:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801089c:	e7d0      	b.n	8010840 <_dtoa_r+0x250>
 801089e:	3101      	adds	r1, #1
 80108a0:	0052      	lsls	r2, r2, #1
 80108a2:	e7d1      	b.n	8010848 <_dtoa_r+0x258>
 80108a4:	f3af 8000 	nop.w
 80108a8:	636f4361 	.word	0x636f4361
 80108ac:	3fd287a7 	.word	0x3fd287a7
 80108b0:	8b60c8b3 	.word	0x8b60c8b3
 80108b4:	3fc68a28 	.word	0x3fc68a28
 80108b8:	509f79fb 	.word	0x509f79fb
 80108bc:	3fd34413 	.word	0x3fd34413
 80108c0:	08012641 	.word	0x08012641
 80108c4:	08012658 	.word	0x08012658
 80108c8:	7ff00000 	.word	0x7ff00000
 80108cc:	08012611 	.word	0x08012611
 80108d0:	3ff80000 	.word	0x3ff80000
 80108d4:	080127a8 	.word	0x080127a8
 80108d8:	080126b0 	.word	0x080126b0
 80108dc:	0801263d 	.word	0x0801263d
 80108e0:	08012610 	.word	0x08012610
 80108e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80108e8:	6018      	str	r0, [r3, #0]
 80108ea:	9b03      	ldr	r3, [sp, #12]
 80108ec:	2b0e      	cmp	r3, #14
 80108ee:	f200 80a1 	bhi.w	8010a34 <_dtoa_r+0x444>
 80108f2:	2c00      	cmp	r4, #0
 80108f4:	f000 809e 	beq.w	8010a34 <_dtoa_r+0x444>
 80108f8:	2f00      	cmp	r7, #0
 80108fa:	dd33      	ble.n	8010964 <_dtoa_r+0x374>
 80108fc:	4b9c      	ldr	r3, [pc, #624]	@ (8010b70 <_dtoa_r+0x580>)
 80108fe:	f007 020f 	and.w	r2, r7, #15
 8010902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010906:	ed93 7b00 	vldr	d7, [r3]
 801090a:	05f8      	lsls	r0, r7, #23
 801090c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010910:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010914:	d516      	bpl.n	8010944 <_dtoa_r+0x354>
 8010916:	4b97      	ldr	r3, [pc, #604]	@ (8010b74 <_dtoa_r+0x584>)
 8010918:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801091c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010920:	f7ef ffbc 	bl	800089c <__aeabi_ddiv>
 8010924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010928:	f004 040f 	and.w	r4, r4, #15
 801092c:	2603      	movs	r6, #3
 801092e:	4d91      	ldr	r5, [pc, #580]	@ (8010b74 <_dtoa_r+0x584>)
 8010930:	b954      	cbnz	r4, 8010948 <_dtoa_r+0x358>
 8010932:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010936:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801093a:	f7ef ffaf 	bl	800089c <__aeabi_ddiv>
 801093e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010942:	e028      	b.n	8010996 <_dtoa_r+0x3a6>
 8010944:	2602      	movs	r6, #2
 8010946:	e7f2      	b.n	801092e <_dtoa_r+0x33e>
 8010948:	07e1      	lsls	r1, r4, #31
 801094a:	d508      	bpl.n	801095e <_dtoa_r+0x36e>
 801094c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010950:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010954:	f7ef fe78 	bl	8000648 <__aeabi_dmul>
 8010958:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801095c:	3601      	adds	r6, #1
 801095e:	1064      	asrs	r4, r4, #1
 8010960:	3508      	adds	r5, #8
 8010962:	e7e5      	b.n	8010930 <_dtoa_r+0x340>
 8010964:	f000 80af 	beq.w	8010ac6 <_dtoa_r+0x4d6>
 8010968:	427c      	negs	r4, r7
 801096a:	4b81      	ldr	r3, [pc, #516]	@ (8010b70 <_dtoa_r+0x580>)
 801096c:	4d81      	ldr	r5, [pc, #516]	@ (8010b74 <_dtoa_r+0x584>)
 801096e:	f004 020f 	and.w	r2, r4, #15
 8010972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801097a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801097e:	f7ef fe63 	bl	8000648 <__aeabi_dmul>
 8010982:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010986:	1124      	asrs	r4, r4, #4
 8010988:	2300      	movs	r3, #0
 801098a:	2602      	movs	r6, #2
 801098c:	2c00      	cmp	r4, #0
 801098e:	f040 808f 	bne.w	8010ab0 <_dtoa_r+0x4c0>
 8010992:	2b00      	cmp	r3, #0
 8010994:	d1d3      	bne.n	801093e <_dtoa_r+0x34e>
 8010996:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010998:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801099c:	2b00      	cmp	r3, #0
 801099e:	f000 8094 	beq.w	8010aca <_dtoa_r+0x4da>
 80109a2:	4b75      	ldr	r3, [pc, #468]	@ (8010b78 <_dtoa_r+0x588>)
 80109a4:	2200      	movs	r2, #0
 80109a6:	4620      	mov	r0, r4
 80109a8:	4629      	mov	r1, r5
 80109aa:	f7f0 f8bf 	bl	8000b2c <__aeabi_dcmplt>
 80109ae:	2800      	cmp	r0, #0
 80109b0:	f000 808b 	beq.w	8010aca <_dtoa_r+0x4da>
 80109b4:	9b03      	ldr	r3, [sp, #12]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	f000 8087 	beq.w	8010aca <_dtoa_r+0x4da>
 80109bc:	f1bb 0f00 	cmp.w	fp, #0
 80109c0:	dd34      	ble.n	8010a2c <_dtoa_r+0x43c>
 80109c2:	4620      	mov	r0, r4
 80109c4:	4b6d      	ldr	r3, [pc, #436]	@ (8010b7c <_dtoa_r+0x58c>)
 80109c6:	2200      	movs	r2, #0
 80109c8:	4629      	mov	r1, r5
 80109ca:	f7ef fe3d 	bl	8000648 <__aeabi_dmul>
 80109ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109d2:	f107 38ff 	add.w	r8, r7, #4294967295
 80109d6:	3601      	adds	r6, #1
 80109d8:	465c      	mov	r4, fp
 80109da:	4630      	mov	r0, r6
 80109dc:	f7ef fdca 	bl	8000574 <__aeabi_i2d>
 80109e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109e4:	f7ef fe30 	bl	8000648 <__aeabi_dmul>
 80109e8:	4b65      	ldr	r3, [pc, #404]	@ (8010b80 <_dtoa_r+0x590>)
 80109ea:	2200      	movs	r2, #0
 80109ec:	f7ef fc76 	bl	80002dc <__adddf3>
 80109f0:	4605      	mov	r5, r0
 80109f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80109f6:	2c00      	cmp	r4, #0
 80109f8:	d16a      	bne.n	8010ad0 <_dtoa_r+0x4e0>
 80109fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109fe:	4b61      	ldr	r3, [pc, #388]	@ (8010b84 <_dtoa_r+0x594>)
 8010a00:	2200      	movs	r2, #0
 8010a02:	f7ef fc69 	bl	80002d8 <__aeabi_dsub>
 8010a06:	4602      	mov	r2, r0
 8010a08:	460b      	mov	r3, r1
 8010a0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010a0e:	462a      	mov	r2, r5
 8010a10:	4633      	mov	r3, r6
 8010a12:	f7f0 f8a9 	bl	8000b68 <__aeabi_dcmpgt>
 8010a16:	2800      	cmp	r0, #0
 8010a18:	f040 8298 	bne.w	8010f4c <_dtoa_r+0x95c>
 8010a1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a20:	462a      	mov	r2, r5
 8010a22:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010a26:	f7f0 f881 	bl	8000b2c <__aeabi_dcmplt>
 8010a2a:	bb38      	cbnz	r0, 8010a7c <_dtoa_r+0x48c>
 8010a2c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010a30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010a34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	f2c0 8157 	blt.w	8010cea <_dtoa_r+0x6fa>
 8010a3c:	2f0e      	cmp	r7, #14
 8010a3e:	f300 8154 	bgt.w	8010cea <_dtoa_r+0x6fa>
 8010a42:	4b4b      	ldr	r3, [pc, #300]	@ (8010b70 <_dtoa_r+0x580>)
 8010a44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010a48:	ed93 7b00 	vldr	d7, [r3]
 8010a4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	ed8d 7b00 	vstr	d7, [sp]
 8010a54:	f280 80e5 	bge.w	8010c22 <_dtoa_r+0x632>
 8010a58:	9b03      	ldr	r3, [sp, #12]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	f300 80e1 	bgt.w	8010c22 <_dtoa_r+0x632>
 8010a60:	d10c      	bne.n	8010a7c <_dtoa_r+0x48c>
 8010a62:	4b48      	ldr	r3, [pc, #288]	@ (8010b84 <_dtoa_r+0x594>)
 8010a64:	2200      	movs	r2, #0
 8010a66:	ec51 0b17 	vmov	r0, r1, d7
 8010a6a:	f7ef fded 	bl	8000648 <__aeabi_dmul>
 8010a6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a72:	f7f0 f86f 	bl	8000b54 <__aeabi_dcmpge>
 8010a76:	2800      	cmp	r0, #0
 8010a78:	f000 8266 	beq.w	8010f48 <_dtoa_r+0x958>
 8010a7c:	2400      	movs	r4, #0
 8010a7e:	4625      	mov	r5, r4
 8010a80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a82:	4656      	mov	r6, sl
 8010a84:	ea6f 0803 	mvn.w	r8, r3
 8010a88:	2700      	movs	r7, #0
 8010a8a:	4621      	mov	r1, r4
 8010a8c:	4648      	mov	r0, r9
 8010a8e:	f000 fc09 	bl	80112a4 <_Bfree>
 8010a92:	2d00      	cmp	r5, #0
 8010a94:	f000 80bd 	beq.w	8010c12 <_dtoa_r+0x622>
 8010a98:	b12f      	cbz	r7, 8010aa6 <_dtoa_r+0x4b6>
 8010a9a:	42af      	cmp	r7, r5
 8010a9c:	d003      	beq.n	8010aa6 <_dtoa_r+0x4b6>
 8010a9e:	4639      	mov	r1, r7
 8010aa0:	4648      	mov	r0, r9
 8010aa2:	f000 fbff 	bl	80112a4 <_Bfree>
 8010aa6:	4629      	mov	r1, r5
 8010aa8:	4648      	mov	r0, r9
 8010aaa:	f000 fbfb 	bl	80112a4 <_Bfree>
 8010aae:	e0b0      	b.n	8010c12 <_dtoa_r+0x622>
 8010ab0:	07e2      	lsls	r2, r4, #31
 8010ab2:	d505      	bpl.n	8010ac0 <_dtoa_r+0x4d0>
 8010ab4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010ab8:	f7ef fdc6 	bl	8000648 <__aeabi_dmul>
 8010abc:	3601      	adds	r6, #1
 8010abe:	2301      	movs	r3, #1
 8010ac0:	1064      	asrs	r4, r4, #1
 8010ac2:	3508      	adds	r5, #8
 8010ac4:	e762      	b.n	801098c <_dtoa_r+0x39c>
 8010ac6:	2602      	movs	r6, #2
 8010ac8:	e765      	b.n	8010996 <_dtoa_r+0x3a6>
 8010aca:	9c03      	ldr	r4, [sp, #12]
 8010acc:	46b8      	mov	r8, r7
 8010ace:	e784      	b.n	80109da <_dtoa_r+0x3ea>
 8010ad0:	4b27      	ldr	r3, [pc, #156]	@ (8010b70 <_dtoa_r+0x580>)
 8010ad2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010ad4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ad8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010adc:	4454      	add	r4, sl
 8010ade:	2900      	cmp	r1, #0
 8010ae0:	d054      	beq.n	8010b8c <_dtoa_r+0x59c>
 8010ae2:	4929      	ldr	r1, [pc, #164]	@ (8010b88 <_dtoa_r+0x598>)
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	f7ef fed9 	bl	800089c <__aeabi_ddiv>
 8010aea:	4633      	mov	r3, r6
 8010aec:	462a      	mov	r2, r5
 8010aee:	f7ef fbf3 	bl	80002d8 <__aeabi_dsub>
 8010af2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010af6:	4656      	mov	r6, sl
 8010af8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010afc:	f7f0 f854 	bl	8000ba8 <__aeabi_d2iz>
 8010b00:	4605      	mov	r5, r0
 8010b02:	f7ef fd37 	bl	8000574 <__aeabi_i2d>
 8010b06:	4602      	mov	r2, r0
 8010b08:	460b      	mov	r3, r1
 8010b0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b0e:	f7ef fbe3 	bl	80002d8 <__aeabi_dsub>
 8010b12:	3530      	adds	r5, #48	@ 0x30
 8010b14:	4602      	mov	r2, r0
 8010b16:	460b      	mov	r3, r1
 8010b18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010b1c:	f806 5b01 	strb.w	r5, [r6], #1
 8010b20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010b24:	f7f0 f802 	bl	8000b2c <__aeabi_dcmplt>
 8010b28:	2800      	cmp	r0, #0
 8010b2a:	d172      	bne.n	8010c12 <_dtoa_r+0x622>
 8010b2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b30:	4911      	ldr	r1, [pc, #68]	@ (8010b78 <_dtoa_r+0x588>)
 8010b32:	2000      	movs	r0, #0
 8010b34:	f7ef fbd0 	bl	80002d8 <__aeabi_dsub>
 8010b38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010b3c:	f7ef fff6 	bl	8000b2c <__aeabi_dcmplt>
 8010b40:	2800      	cmp	r0, #0
 8010b42:	f040 80b4 	bne.w	8010cae <_dtoa_r+0x6be>
 8010b46:	42a6      	cmp	r6, r4
 8010b48:	f43f af70 	beq.w	8010a2c <_dtoa_r+0x43c>
 8010b4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010b50:	4b0a      	ldr	r3, [pc, #40]	@ (8010b7c <_dtoa_r+0x58c>)
 8010b52:	2200      	movs	r2, #0
 8010b54:	f7ef fd78 	bl	8000648 <__aeabi_dmul>
 8010b58:	4b08      	ldr	r3, [pc, #32]	@ (8010b7c <_dtoa_r+0x58c>)
 8010b5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010b5e:	2200      	movs	r2, #0
 8010b60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b64:	f7ef fd70 	bl	8000648 <__aeabi_dmul>
 8010b68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b6c:	e7c4      	b.n	8010af8 <_dtoa_r+0x508>
 8010b6e:	bf00      	nop
 8010b70:	080127a8 	.word	0x080127a8
 8010b74:	08012780 	.word	0x08012780
 8010b78:	3ff00000 	.word	0x3ff00000
 8010b7c:	40240000 	.word	0x40240000
 8010b80:	401c0000 	.word	0x401c0000
 8010b84:	40140000 	.word	0x40140000
 8010b88:	3fe00000 	.word	0x3fe00000
 8010b8c:	4631      	mov	r1, r6
 8010b8e:	4628      	mov	r0, r5
 8010b90:	f7ef fd5a 	bl	8000648 <__aeabi_dmul>
 8010b94:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010b98:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010b9a:	4656      	mov	r6, sl
 8010b9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ba0:	f7f0 f802 	bl	8000ba8 <__aeabi_d2iz>
 8010ba4:	4605      	mov	r5, r0
 8010ba6:	f7ef fce5 	bl	8000574 <__aeabi_i2d>
 8010baa:	4602      	mov	r2, r0
 8010bac:	460b      	mov	r3, r1
 8010bae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bb2:	f7ef fb91 	bl	80002d8 <__aeabi_dsub>
 8010bb6:	3530      	adds	r5, #48	@ 0x30
 8010bb8:	f806 5b01 	strb.w	r5, [r6], #1
 8010bbc:	4602      	mov	r2, r0
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	42a6      	cmp	r6, r4
 8010bc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010bc6:	f04f 0200 	mov.w	r2, #0
 8010bca:	d124      	bne.n	8010c16 <_dtoa_r+0x626>
 8010bcc:	4baf      	ldr	r3, [pc, #700]	@ (8010e8c <_dtoa_r+0x89c>)
 8010bce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010bd2:	f7ef fb83 	bl	80002dc <__adddf3>
 8010bd6:	4602      	mov	r2, r0
 8010bd8:	460b      	mov	r3, r1
 8010bda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bde:	f7ef ffc3 	bl	8000b68 <__aeabi_dcmpgt>
 8010be2:	2800      	cmp	r0, #0
 8010be4:	d163      	bne.n	8010cae <_dtoa_r+0x6be>
 8010be6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010bea:	49a8      	ldr	r1, [pc, #672]	@ (8010e8c <_dtoa_r+0x89c>)
 8010bec:	2000      	movs	r0, #0
 8010bee:	f7ef fb73 	bl	80002d8 <__aeabi_dsub>
 8010bf2:	4602      	mov	r2, r0
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bfa:	f7ef ff97 	bl	8000b2c <__aeabi_dcmplt>
 8010bfe:	2800      	cmp	r0, #0
 8010c00:	f43f af14 	beq.w	8010a2c <_dtoa_r+0x43c>
 8010c04:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010c06:	1e73      	subs	r3, r6, #1
 8010c08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010c0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010c0e:	2b30      	cmp	r3, #48	@ 0x30
 8010c10:	d0f8      	beq.n	8010c04 <_dtoa_r+0x614>
 8010c12:	4647      	mov	r7, r8
 8010c14:	e03b      	b.n	8010c8e <_dtoa_r+0x69e>
 8010c16:	4b9e      	ldr	r3, [pc, #632]	@ (8010e90 <_dtoa_r+0x8a0>)
 8010c18:	f7ef fd16 	bl	8000648 <__aeabi_dmul>
 8010c1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c20:	e7bc      	b.n	8010b9c <_dtoa_r+0x5ac>
 8010c22:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010c26:	4656      	mov	r6, sl
 8010c28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	4629      	mov	r1, r5
 8010c30:	f7ef fe34 	bl	800089c <__aeabi_ddiv>
 8010c34:	f7ef ffb8 	bl	8000ba8 <__aeabi_d2iz>
 8010c38:	4680      	mov	r8, r0
 8010c3a:	f7ef fc9b 	bl	8000574 <__aeabi_i2d>
 8010c3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c42:	f7ef fd01 	bl	8000648 <__aeabi_dmul>
 8010c46:	4602      	mov	r2, r0
 8010c48:	460b      	mov	r3, r1
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	4629      	mov	r1, r5
 8010c4e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010c52:	f7ef fb41 	bl	80002d8 <__aeabi_dsub>
 8010c56:	f806 4b01 	strb.w	r4, [r6], #1
 8010c5a:	9d03      	ldr	r5, [sp, #12]
 8010c5c:	eba6 040a 	sub.w	r4, r6, sl
 8010c60:	42a5      	cmp	r5, r4
 8010c62:	4602      	mov	r2, r0
 8010c64:	460b      	mov	r3, r1
 8010c66:	d133      	bne.n	8010cd0 <_dtoa_r+0x6e0>
 8010c68:	f7ef fb38 	bl	80002dc <__adddf3>
 8010c6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c70:	4604      	mov	r4, r0
 8010c72:	460d      	mov	r5, r1
 8010c74:	f7ef ff78 	bl	8000b68 <__aeabi_dcmpgt>
 8010c78:	b9c0      	cbnz	r0, 8010cac <_dtoa_r+0x6bc>
 8010c7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c7e:	4620      	mov	r0, r4
 8010c80:	4629      	mov	r1, r5
 8010c82:	f7ef ff49 	bl	8000b18 <__aeabi_dcmpeq>
 8010c86:	b110      	cbz	r0, 8010c8e <_dtoa_r+0x69e>
 8010c88:	f018 0f01 	tst.w	r8, #1
 8010c8c:	d10e      	bne.n	8010cac <_dtoa_r+0x6bc>
 8010c8e:	9902      	ldr	r1, [sp, #8]
 8010c90:	4648      	mov	r0, r9
 8010c92:	f000 fb07 	bl	80112a4 <_Bfree>
 8010c96:	2300      	movs	r3, #0
 8010c98:	7033      	strb	r3, [r6, #0]
 8010c9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010c9c:	3701      	adds	r7, #1
 8010c9e:	601f      	str	r7, [r3, #0]
 8010ca0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	f000 824b 	beq.w	801113e <_dtoa_r+0xb4e>
 8010ca8:	601e      	str	r6, [r3, #0]
 8010caa:	e248      	b.n	801113e <_dtoa_r+0xb4e>
 8010cac:	46b8      	mov	r8, r7
 8010cae:	4633      	mov	r3, r6
 8010cb0:	461e      	mov	r6, r3
 8010cb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010cb6:	2a39      	cmp	r2, #57	@ 0x39
 8010cb8:	d106      	bne.n	8010cc8 <_dtoa_r+0x6d8>
 8010cba:	459a      	cmp	sl, r3
 8010cbc:	d1f8      	bne.n	8010cb0 <_dtoa_r+0x6c0>
 8010cbe:	2230      	movs	r2, #48	@ 0x30
 8010cc0:	f108 0801 	add.w	r8, r8, #1
 8010cc4:	f88a 2000 	strb.w	r2, [sl]
 8010cc8:	781a      	ldrb	r2, [r3, #0]
 8010cca:	3201      	adds	r2, #1
 8010ccc:	701a      	strb	r2, [r3, #0]
 8010cce:	e7a0      	b.n	8010c12 <_dtoa_r+0x622>
 8010cd0:	4b6f      	ldr	r3, [pc, #444]	@ (8010e90 <_dtoa_r+0x8a0>)
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	f7ef fcb8 	bl	8000648 <__aeabi_dmul>
 8010cd8:	2200      	movs	r2, #0
 8010cda:	2300      	movs	r3, #0
 8010cdc:	4604      	mov	r4, r0
 8010cde:	460d      	mov	r5, r1
 8010ce0:	f7ef ff1a 	bl	8000b18 <__aeabi_dcmpeq>
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	d09f      	beq.n	8010c28 <_dtoa_r+0x638>
 8010ce8:	e7d1      	b.n	8010c8e <_dtoa_r+0x69e>
 8010cea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cec:	2a00      	cmp	r2, #0
 8010cee:	f000 80ea 	beq.w	8010ec6 <_dtoa_r+0x8d6>
 8010cf2:	9a07      	ldr	r2, [sp, #28]
 8010cf4:	2a01      	cmp	r2, #1
 8010cf6:	f300 80cd 	bgt.w	8010e94 <_dtoa_r+0x8a4>
 8010cfa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010cfc:	2a00      	cmp	r2, #0
 8010cfe:	f000 80c1 	beq.w	8010e84 <_dtoa_r+0x894>
 8010d02:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010d06:	9c08      	ldr	r4, [sp, #32]
 8010d08:	9e00      	ldr	r6, [sp, #0]
 8010d0a:	9a00      	ldr	r2, [sp, #0]
 8010d0c:	441a      	add	r2, r3
 8010d0e:	9200      	str	r2, [sp, #0]
 8010d10:	9a06      	ldr	r2, [sp, #24]
 8010d12:	2101      	movs	r1, #1
 8010d14:	441a      	add	r2, r3
 8010d16:	4648      	mov	r0, r9
 8010d18:	9206      	str	r2, [sp, #24]
 8010d1a:	f000 fb77 	bl	801140c <__i2b>
 8010d1e:	4605      	mov	r5, r0
 8010d20:	b166      	cbz	r6, 8010d3c <_dtoa_r+0x74c>
 8010d22:	9b06      	ldr	r3, [sp, #24]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	dd09      	ble.n	8010d3c <_dtoa_r+0x74c>
 8010d28:	42b3      	cmp	r3, r6
 8010d2a:	9a00      	ldr	r2, [sp, #0]
 8010d2c:	bfa8      	it	ge
 8010d2e:	4633      	movge	r3, r6
 8010d30:	1ad2      	subs	r2, r2, r3
 8010d32:	9200      	str	r2, [sp, #0]
 8010d34:	9a06      	ldr	r2, [sp, #24]
 8010d36:	1af6      	subs	r6, r6, r3
 8010d38:	1ad3      	subs	r3, r2, r3
 8010d3a:	9306      	str	r3, [sp, #24]
 8010d3c:	9b08      	ldr	r3, [sp, #32]
 8010d3e:	b30b      	cbz	r3, 8010d84 <_dtoa_r+0x794>
 8010d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	f000 80c6 	beq.w	8010ed4 <_dtoa_r+0x8e4>
 8010d48:	2c00      	cmp	r4, #0
 8010d4a:	f000 80c0 	beq.w	8010ece <_dtoa_r+0x8de>
 8010d4e:	4629      	mov	r1, r5
 8010d50:	4622      	mov	r2, r4
 8010d52:	4648      	mov	r0, r9
 8010d54:	f000 fc12 	bl	801157c <__pow5mult>
 8010d58:	9a02      	ldr	r2, [sp, #8]
 8010d5a:	4601      	mov	r1, r0
 8010d5c:	4605      	mov	r5, r0
 8010d5e:	4648      	mov	r0, r9
 8010d60:	f000 fb6a 	bl	8011438 <__multiply>
 8010d64:	9902      	ldr	r1, [sp, #8]
 8010d66:	4680      	mov	r8, r0
 8010d68:	4648      	mov	r0, r9
 8010d6a:	f000 fa9b 	bl	80112a4 <_Bfree>
 8010d6e:	9b08      	ldr	r3, [sp, #32]
 8010d70:	1b1b      	subs	r3, r3, r4
 8010d72:	9308      	str	r3, [sp, #32]
 8010d74:	f000 80b1 	beq.w	8010eda <_dtoa_r+0x8ea>
 8010d78:	9a08      	ldr	r2, [sp, #32]
 8010d7a:	4641      	mov	r1, r8
 8010d7c:	4648      	mov	r0, r9
 8010d7e:	f000 fbfd 	bl	801157c <__pow5mult>
 8010d82:	9002      	str	r0, [sp, #8]
 8010d84:	2101      	movs	r1, #1
 8010d86:	4648      	mov	r0, r9
 8010d88:	f000 fb40 	bl	801140c <__i2b>
 8010d8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d8e:	4604      	mov	r4, r0
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	f000 81d8 	beq.w	8011146 <_dtoa_r+0xb56>
 8010d96:	461a      	mov	r2, r3
 8010d98:	4601      	mov	r1, r0
 8010d9a:	4648      	mov	r0, r9
 8010d9c:	f000 fbee 	bl	801157c <__pow5mult>
 8010da0:	9b07      	ldr	r3, [sp, #28]
 8010da2:	2b01      	cmp	r3, #1
 8010da4:	4604      	mov	r4, r0
 8010da6:	f300 809f 	bgt.w	8010ee8 <_dtoa_r+0x8f8>
 8010daa:	9b04      	ldr	r3, [sp, #16]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	f040 8097 	bne.w	8010ee0 <_dtoa_r+0x8f0>
 8010db2:	9b05      	ldr	r3, [sp, #20]
 8010db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	f040 8093 	bne.w	8010ee4 <_dtoa_r+0x8f4>
 8010dbe:	9b05      	ldr	r3, [sp, #20]
 8010dc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010dc4:	0d1b      	lsrs	r3, r3, #20
 8010dc6:	051b      	lsls	r3, r3, #20
 8010dc8:	b133      	cbz	r3, 8010dd8 <_dtoa_r+0x7e8>
 8010dca:	9b00      	ldr	r3, [sp, #0]
 8010dcc:	3301      	adds	r3, #1
 8010dce:	9300      	str	r3, [sp, #0]
 8010dd0:	9b06      	ldr	r3, [sp, #24]
 8010dd2:	3301      	adds	r3, #1
 8010dd4:	9306      	str	r3, [sp, #24]
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	9308      	str	r3, [sp, #32]
 8010dda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	f000 81b8 	beq.w	8011152 <_dtoa_r+0xb62>
 8010de2:	6923      	ldr	r3, [r4, #16]
 8010de4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010de8:	6918      	ldr	r0, [r3, #16]
 8010dea:	f000 fac3 	bl	8011374 <__hi0bits>
 8010dee:	f1c0 0020 	rsb	r0, r0, #32
 8010df2:	9b06      	ldr	r3, [sp, #24]
 8010df4:	4418      	add	r0, r3
 8010df6:	f010 001f 	ands.w	r0, r0, #31
 8010dfa:	f000 8082 	beq.w	8010f02 <_dtoa_r+0x912>
 8010dfe:	f1c0 0320 	rsb	r3, r0, #32
 8010e02:	2b04      	cmp	r3, #4
 8010e04:	dd73      	ble.n	8010eee <_dtoa_r+0x8fe>
 8010e06:	9b00      	ldr	r3, [sp, #0]
 8010e08:	f1c0 001c 	rsb	r0, r0, #28
 8010e0c:	4403      	add	r3, r0
 8010e0e:	9300      	str	r3, [sp, #0]
 8010e10:	9b06      	ldr	r3, [sp, #24]
 8010e12:	4403      	add	r3, r0
 8010e14:	4406      	add	r6, r0
 8010e16:	9306      	str	r3, [sp, #24]
 8010e18:	9b00      	ldr	r3, [sp, #0]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	dd05      	ble.n	8010e2a <_dtoa_r+0x83a>
 8010e1e:	9902      	ldr	r1, [sp, #8]
 8010e20:	461a      	mov	r2, r3
 8010e22:	4648      	mov	r0, r9
 8010e24:	f000 fc04 	bl	8011630 <__lshift>
 8010e28:	9002      	str	r0, [sp, #8]
 8010e2a:	9b06      	ldr	r3, [sp, #24]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	dd05      	ble.n	8010e3c <_dtoa_r+0x84c>
 8010e30:	4621      	mov	r1, r4
 8010e32:	461a      	mov	r2, r3
 8010e34:	4648      	mov	r0, r9
 8010e36:	f000 fbfb 	bl	8011630 <__lshift>
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d061      	beq.n	8010f06 <_dtoa_r+0x916>
 8010e42:	9802      	ldr	r0, [sp, #8]
 8010e44:	4621      	mov	r1, r4
 8010e46:	f000 fc5f 	bl	8011708 <__mcmp>
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	da5b      	bge.n	8010f06 <_dtoa_r+0x916>
 8010e4e:	2300      	movs	r3, #0
 8010e50:	9902      	ldr	r1, [sp, #8]
 8010e52:	220a      	movs	r2, #10
 8010e54:	4648      	mov	r0, r9
 8010e56:	f000 fa47 	bl	80112e8 <__multadd>
 8010e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e5c:	9002      	str	r0, [sp, #8]
 8010e5e:	f107 38ff 	add.w	r8, r7, #4294967295
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	f000 8177 	beq.w	8011156 <_dtoa_r+0xb66>
 8010e68:	4629      	mov	r1, r5
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	220a      	movs	r2, #10
 8010e6e:	4648      	mov	r0, r9
 8010e70:	f000 fa3a 	bl	80112e8 <__multadd>
 8010e74:	f1bb 0f00 	cmp.w	fp, #0
 8010e78:	4605      	mov	r5, r0
 8010e7a:	dc6f      	bgt.n	8010f5c <_dtoa_r+0x96c>
 8010e7c:	9b07      	ldr	r3, [sp, #28]
 8010e7e:	2b02      	cmp	r3, #2
 8010e80:	dc49      	bgt.n	8010f16 <_dtoa_r+0x926>
 8010e82:	e06b      	b.n	8010f5c <_dtoa_r+0x96c>
 8010e84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010e86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010e8a:	e73c      	b.n	8010d06 <_dtoa_r+0x716>
 8010e8c:	3fe00000 	.word	0x3fe00000
 8010e90:	40240000 	.word	0x40240000
 8010e94:	9b03      	ldr	r3, [sp, #12]
 8010e96:	1e5c      	subs	r4, r3, #1
 8010e98:	9b08      	ldr	r3, [sp, #32]
 8010e9a:	42a3      	cmp	r3, r4
 8010e9c:	db09      	blt.n	8010eb2 <_dtoa_r+0x8c2>
 8010e9e:	1b1c      	subs	r4, r3, r4
 8010ea0:	9b03      	ldr	r3, [sp, #12]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	f6bf af30 	bge.w	8010d08 <_dtoa_r+0x718>
 8010ea8:	9b00      	ldr	r3, [sp, #0]
 8010eaa:	9a03      	ldr	r2, [sp, #12]
 8010eac:	1a9e      	subs	r6, r3, r2
 8010eae:	2300      	movs	r3, #0
 8010eb0:	e72b      	b.n	8010d0a <_dtoa_r+0x71a>
 8010eb2:	9b08      	ldr	r3, [sp, #32]
 8010eb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010eb6:	9408      	str	r4, [sp, #32]
 8010eb8:	1ae3      	subs	r3, r4, r3
 8010eba:	441a      	add	r2, r3
 8010ebc:	9e00      	ldr	r6, [sp, #0]
 8010ebe:	9b03      	ldr	r3, [sp, #12]
 8010ec0:	920d      	str	r2, [sp, #52]	@ 0x34
 8010ec2:	2400      	movs	r4, #0
 8010ec4:	e721      	b.n	8010d0a <_dtoa_r+0x71a>
 8010ec6:	9c08      	ldr	r4, [sp, #32]
 8010ec8:	9e00      	ldr	r6, [sp, #0]
 8010eca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010ecc:	e728      	b.n	8010d20 <_dtoa_r+0x730>
 8010ece:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010ed2:	e751      	b.n	8010d78 <_dtoa_r+0x788>
 8010ed4:	9a08      	ldr	r2, [sp, #32]
 8010ed6:	9902      	ldr	r1, [sp, #8]
 8010ed8:	e750      	b.n	8010d7c <_dtoa_r+0x78c>
 8010eda:	f8cd 8008 	str.w	r8, [sp, #8]
 8010ede:	e751      	b.n	8010d84 <_dtoa_r+0x794>
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	e779      	b.n	8010dd8 <_dtoa_r+0x7e8>
 8010ee4:	9b04      	ldr	r3, [sp, #16]
 8010ee6:	e777      	b.n	8010dd8 <_dtoa_r+0x7e8>
 8010ee8:	2300      	movs	r3, #0
 8010eea:	9308      	str	r3, [sp, #32]
 8010eec:	e779      	b.n	8010de2 <_dtoa_r+0x7f2>
 8010eee:	d093      	beq.n	8010e18 <_dtoa_r+0x828>
 8010ef0:	9a00      	ldr	r2, [sp, #0]
 8010ef2:	331c      	adds	r3, #28
 8010ef4:	441a      	add	r2, r3
 8010ef6:	9200      	str	r2, [sp, #0]
 8010ef8:	9a06      	ldr	r2, [sp, #24]
 8010efa:	441a      	add	r2, r3
 8010efc:	441e      	add	r6, r3
 8010efe:	9206      	str	r2, [sp, #24]
 8010f00:	e78a      	b.n	8010e18 <_dtoa_r+0x828>
 8010f02:	4603      	mov	r3, r0
 8010f04:	e7f4      	b.n	8010ef0 <_dtoa_r+0x900>
 8010f06:	9b03      	ldr	r3, [sp, #12]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	46b8      	mov	r8, r7
 8010f0c:	dc20      	bgt.n	8010f50 <_dtoa_r+0x960>
 8010f0e:	469b      	mov	fp, r3
 8010f10:	9b07      	ldr	r3, [sp, #28]
 8010f12:	2b02      	cmp	r3, #2
 8010f14:	dd1e      	ble.n	8010f54 <_dtoa_r+0x964>
 8010f16:	f1bb 0f00 	cmp.w	fp, #0
 8010f1a:	f47f adb1 	bne.w	8010a80 <_dtoa_r+0x490>
 8010f1e:	4621      	mov	r1, r4
 8010f20:	465b      	mov	r3, fp
 8010f22:	2205      	movs	r2, #5
 8010f24:	4648      	mov	r0, r9
 8010f26:	f000 f9df 	bl	80112e8 <__multadd>
 8010f2a:	4601      	mov	r1, r0
 8010f2c:	4604      	mov	r4, r0
 8010f2e:	9802      	ldr	r0, [sp, #8]
 8010f30:	f000 fbea 	bl	8011708 <__mcmp>
 8010f34:	2800      	cmp	r0, #0
 8010f36:	f77f ada3 	ble.w	8010a80 <_dtoa_r+0x490>
 8010f3a:	4656      	mov	r6, sl
 8010f3c:	2331      	movs	r3, #49	@ 0x31
 8010f3e:	f806 3b01 	strb.w	r3, [r6], #1
 8010f42:	f108 0801 	add.w	r8, r8, #1
 8010f46:	e59f      	b.n	8010a88 <_dtoa_r+0x498>
 8010f48:	9c03      	ldr	r4, [sp, #12]
 8010f4a:	46b8      	mov	r8, r7
 8010f4c:	4625      	mov	r5, r4
 8010f4e:	e7f4      	b.n	8010f3a <_dtoa_r+0x94a>
 8010f50:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	f000 8101 	beq.w	801115e <_dtoa_r+0xb6e>
 8010f5c:	2e00      	cmp	r6, #0
 8010f5e:	dd05      	ble.n	8010f6c <_dtoa_r+0x97c>
 8010f60:	4629      	mov	r1, r5
 8010f62:	4632      	mov	r2, r6
 8010f64:	4648      	mov	r0, r9
 8010f66:	f000 fb63 	bl	8011630 <__lshift>
 8010f6a:	4605      	mov	r5, r0
 8010f6c:	9b08      	ldr	r3, [sp, #32]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d05c      	beq.n	801102c <_dtoa_r+0xa3c>
 8010f72:	6869      	ldr	r1, [r5, #4]
 8010f74:	4648      	mov	r0, r9
 8010f76:	f000 f955 	bl	8011224 <_Balloc>
 8010f7a:	4606      	mov	r6, r0
 8010f7c:	b928      	cbnz	r0, 8010f8a <_dtoa_r+0x99a>
 8010f7e:	4b82      	ldr	r3, [pc, #520]	@ (8011188 <_dtoa_r+0xb98>)
 8010f80:	4602      	mov	r2, r0
 8010f82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010f86:	f7ff bb4a 	b.w	801061e <_dtoa_r+0x2e>
 8010f8a:	692a      	ldr	r2, [r5, #16]
 8010f8c:	3202      	adds	r2, #2
 8010f8e:	0092      	lsls	r2, r2, #2
 8010f90:	f105 010c 	add.w	r1, r5, #12
 8010f94:	300c      	adds	r0, #12
 8010f96:	f7ff fa92 	bl	80104be <memcpy>
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	4631      	mov	r1, r6
 8010f9e:	4648      	mov	r0, r9
 8010fa0:	f000 fb46 	bl	8011630 <__lshift>
 8010fa4:	f10a 0301 	add.w	r3, sl, #1
 8010fa8:	9300      	str	r3, [sp, #0]
 8010faa:	eb0a 030b 	add.w	r3, sl, fp
 8010fae:	9308      	str	r3, [sp, #32]
 8010fb0:	9b04      	ldr	r3, [sp, #16]
 8010fb2:	f003 0301 	and.w	r3, r3, #1
 8010fb6:	462f      	mov	r7, r5
 8010fb8:	9306      	str	r3, [sp, #24]
 8010fba:	4605      	mov	r5, r0
 8010fbc:	9b00      	ldr	r3, [sp, #0]
 8010fbe:	9802      	ldr	r0, [sp, #8]
 8010fc0:	4621      	mov	r1, r4
 8010fc2:	f103 3bff 	add.w	fp, r3, #4294967295
 8010fc6:	f7ff fa88 	bl	80104da <quorem>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	3330      	adds	r3, #48	@ 0x30
 8010fce:	9003      	str	r0, [sp, #12]
 8010fd0:	4639      	mov	r1, r7
 8010fd2:	9802      	ldr	r0, [sp, #8]
 8010fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fd6:	f000 fb97 	bl	8011708 <__mcmp>
 8010fda:	462a      	mov	r2, r5
 8010fdc:	9004      	str	r0, [sp, #16]
 8010fde:	4621      	mov	r1, r4
 8010fe0:	4648      	mov	r0, r9
 8010fe2:	f000 fbad 	bl	8011740 <__mdiff>
 8010fe6:	68c2      	ldr	r2, [r0, #12]
 8010fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fea:	4606      	mov	r6, r0
 8010fec:	bb02      	cbnz	r2, 8011030 <_dtoa_r+0xa40>
 8010fee:	4601      	mov	r1, r0
 8010ff0:	9802      	ldr	r0, [sp, #8]
 8010ff2:	f000 fb89 	bl	8011708 <__mcmp>
 8010ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	4631      	mov	r1, r6
 8010ffc:	4648      	mov	r0, r9
 8010ffe:	920c      	str	r2, [sp, #48]	@ 0x30
 8011000:	9309      	str	r3, [sp, #36]	@ 0x24
 8011002:	f000 f94f 	bl	80112a4 <_Bfree>
 8011006:	9b07      	ldr	r3, [sp, #28]
 8011008:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801100a:	9e00      	ldr	r6, [sp, #0]
 801100c:	ea42 0103 	orr.w	r1, r2, r3
 8011010:	9b06      	ldr	r3, [sp, #24]
 8011012:	4319      	orrs	r1, r3
 8011014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011016:	d10d      	bne.n	8011034 <_dtoa_r+0xa44>
 8011018:	2b39      	cmp	r3, #57	@ 0x39
 801101a:	d027      	beq.n	801106c <_dtoa_r+0xa7c>
 801101c:	9a04      	ldr	r2, [sp, #16]
 801101e:	2a00      	cmp	r2, #0
 8011020:	dd01      	ble.n	8011026 <_dtoa_r+0xa36>
 8011022:	9b03      	ldr	r3, [sp, #12]
 8011024:	3331      	adds	r3, #49	@ 0x31
 8011026:	f88b 3000 	strb.w	r3, [fp]
 801102a:	e52e      	b.n	8010a8a <_dtoa_r+0x49a>
 801102c:	4628      	mov	r0, r5
 801102e:	e7b9      	b.n	8010fa4 <_dtoa_r+0x9b4>
 8011030:	2201      	movs	r2, #1
 8011032:	e7e2      	b.n	8010ffa <_dtoa_r+0xa0a>
 8011034:	9904      	ldr	r1, [sp, #16]
 8011036:	2900      	cmp	r1, #0
 8011038:	db04      	blt.n	8011044 <_dtoa_r+0xa54>
 801103a:	9807      	ldr	r0, [sp, #28]
 801103c:	4301      	orrs	r1, r0
 801103e:	9806      	ldr	r0, [sp, #24]
 8011040:	4301      	orrs	r1, r0
 8011042:	d120      	bne.n	8011086 <_dtoa_r+0xa96>
 8011044:	2a00      	cmp	r2, #0
 8011046:	ddee      	ble.n	8011026 <_dtoa_r+0xa36>
 8011048:	9902      	ldr	r1, [sp, #8]
 801104a:	9300      	str	r3, [sp, #0]
 801104c:	2201      	movs	r2, #1
 801104e:	4648      	mov	r0, r9
 8011050:	f000 faee 	bl	8011630 <__lshift>
 8011054:	4621      	mov	r1, r4
 8011056:	9002      	str	r0, [sp, #8]
 8011058:	f000 fb56 	bl	8011708 <__mcmp>
 801105c:	2800      	cmp	r0, #0
 801105e:	9b00      	ldr	r3, [sp, #0]
 8011060:	dc02      	bgt.n	8011068 <_dtoa_r+0xa78>
 8011062:	d1e0      	bne.n	8011026 <_dtoa_r+0xa36>
 8011064:	07da      	lsls	r2, r3, #31
 8011066:	d5de      	bpl.n	8011026 <_dtoa_r+0xa36>
 8011068:	2b39      	cmp	r3, #57	@ 0x39
 801106a:	d1da      	bne.n	8011022 <_dtoa_r+0xa32>
 801106c:	2339      	movs	r3, #57	@ 0x39
 801106e:	f88b 3000 	strb.w	r3, [fp]
 8011072:	4633      	mov	r3, r6
 8011074:	461e      	mov	r6, r3
 8011076:	3b01      	subs	r3, #1
 8011078:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801107c:	2a39      	cmp	r2, #57	@ 0x39
 801107e:	d04e      	beq.n	801111e <_dtoa_r+0xb2e>
 8011080:	3201      	adds	r2, #1
 8011082:	701a      	strb	r2, [r3, #0]
 8011084:	e501      	b.n	8010a8a <_dtoa_r+0x49a>
 8011086:	2a00      	cmp	r2, #0
 8011088:	dd03      	ble.n	8011092 <_dtoa_r+0xaa2>
 801108a:	2b39      	cmp	r3, #57	@ 0x39
 801108c:	d0ee      	beq.n	801106c <_dtoa_r+0xa7c>
 801108e:	3301      	adds	r3, #1
 8011090:	e7c9      	b.n	8011026 <_dtoa_r+0xa36>
 8011092:	9a00      	ldr	r2, [sp, #0]
 8011094:	9908      	ldr	r1, [sp, #32]
 8011096:	f802 3c01 	strb.w	r3, [r2, #-1]
 801109a:	428a      	cmp	r2, r1
 801109c:	d028      	beq.n	80110f0 <_dtoa_r+0xb00>
 801109e:	9902      	ldr	r1, [sp, #8]
 80110a0:	2300      	movs	r3, #0
 80110a2:	220a      	movs	r2, #10
 80110a4:	4648      	mov	r0, r9
 80110a6:	f000 f91f 	bl	80112e8 <__multadd>
 80110aa:	42af      	cmp	r7, r5
 80110ac:	9002      	str	r0, [sp, #8]
 80110ae:	f04f 0300 	mov.w	r3, #0
 80110b2:	f04f 020a 	mov.w	r2, #10
 80110b6:	4639      	mov	r1, r7
 80110b8:	4648      	mov	r0, r9
 80110ba:	d107      	bne.n	80110cc <_dtoa_r+0xadc>
 80110bc:	f000 f914 	bl	80112e8 <__multadd>
 80110c0:	4607      	mov	r7, r0
 80110c2:	4605      	mov	r5, r0
 80110c4:	9b00      	ldr	r3, [sp, #0]
 80110c6:	3301      	adds	r3, #1
 80110c8:	9300      	str	r3, [sp, #0]
 80110ca:	e777      	b.n	8010fbc <_dtoa_r+0x9cc>
 80110cc:	f000 f90c 	bl	80112e8 <__multadd>
 80110d0:	4629      	mov	r1, r5
 80110d2:	4607      	mov	r7, r0
 80110d4:	2300      	movs	r3, #0
 80110d6:	220a      	movs	r2, #10
 80110d8:	4648      	mov	r0, r9
 80110da:	f000 f905 	bl	80112e8 <__multadd>
 80110de:	4605      	mov	r5, r0
 80110e0:	e7f0      	b.n	80110c4 <_dtoa_r+0xad4>
 80110e2:	f1bb 0f00 	cmp.w	fp, #0
 80110e6:	bfcc      	ite	gt
 80110e8:	465e      	movgt	r6, fp
 80110ea:	2601      	movle	r6, #1
 80110ec:	4456      	add	r6, sl
 80110ee:	2700      	movs	r7, #0
 80110f0:	9902      	ldr	r1, [sp, #8]
 80110f2:	9300      	str	r3, [sp, #0]
 80110f4:	2201      	movs	r2, #1
 80110f6:	4648      	mov	r0, r9
 80110f8:	f000 fa9a 	bl	8011630 <__lshift>
 80110fc:	4621      	mov	r1, r4
 80110fe:	9002      	str	r0, [sp, #8]
 8011100:	f000 fb02 	bl	8011708 <__mcmp>
 8011104:	2800      	cmp	r0, #0
 8011106:	dcb4      	bgt.n	8011072 <_dtoa_r+0xa82>
 8011108:	d102      	bne.n	8011110 <_dtoa_r+0xb20>
 801110a:	9b00      	ldr	r3, [sp, #0]
 801110c:	07db      	lsls	r3, r3, #31
 801110e:	d4b0      	bmi.n	8011072 <_dtoa_r+0xa82>
 8011110:	4633      	mov	r3, r6
 8011112:	461e      	mov	r6, r3
 8011114:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011118:	2a30      	cmp	r2, #48	@ 0x30
 801111a:	d0fa      	beq.n	8011112 <_dtoa_r+0xb22>
 801111c:	e4b5      	b.n	8010a8a <_dtoa_r+0x49a>
 801111e:	459a      	cmp	sl, r3
 8011120:	d1a8      	bne.n	8011074 <_dtoa_r+0xa84>
 8011122:	2331      	movs	r3, #49	@ 0x31
 8011124:	f108 0801 	add.w	r8, r8, #1
 8011128:	f88a 3000 	strb.w	r3, [sl]
 801112c:	e4ad      	b.n	8010a8a <_dtoa_r+0x49a>
 801112e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011130:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801118c <_dtoa_r+0xb9c>
 8011134:	b11b      	cbz	r3, 801113e <_dtoa_r+0xb4e>
 8011136:	f10a 0308 	add.w	r3, sl, #8
 801113a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801113c:	6013      	str	r3, [r2, #0]
 801113e:	4650      	mov	r0, sl
 8011140:	b017      	add	sp, #92	@ 0x5c
 8011142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011146:	9b07      	ldr	r3, [sp, #28]
 8011148:	2b01      	cmp	r3, #1
 801114a:	f77f ae2e 	ble.w	8010daa <_dtoa_r+0x7ba>
 801114e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011150:	9308      	str	r3, [sp, #32]
 8011152:	2001      	movs	r0, #1
 8011154:	e64d      	b.n	8010df2 <_dtoa_r+0x802>
 8011156:	f1bb 0f00 	cmp.w	fp, #0
 801115a:	f77f aed9 	ble.w	8010f10 <_dtoa_r+0x920>
 801115e:	4656      	mov	r6, sl
 8011160:	9802      	ldr	r0, [sp, #8]
 8011162:	4621      	mov	r1, r4
 8011164:	f7ff f9b9 	bl	80104da <quorem>
 8011168:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801116c:	f806 3b01 	strb.w	r3, [r6], #1
 8011170:	eba6 020a 	sub.w	r2, r6, sl
 8011174:	4593      	cmp	fp, r2
 8011176:	ddb4      	ble.n	80110e2 <_dtoa_r+0xaf2>
 8011178:	9902      	ldr	r1, [sp, #8]
 801117a:	2300      	movs	r3, #0
 801117c:	220a      	movs	r2, #10
 801117e:	4648      	mov	r0, r9
 8011180:	f000 f8b2 	bl	80112e8 <__multadd>
 8011184:	9002      	str	r0, [sp, #8]
 8011186:	e7eb      	b.n	8011160 <_dtoa_r+0xb70>
 8011188:	080126b0 	.word	0x080126b0
 801118c:	08012634 	.word	0x08012634

08011190 <_free_r>:
 8011190:	b538      	push	{r3, r4, r5, lr}
 8011192:	4605      	mov	r5, r0
 8011194:	2900      	cmp	r1, #0
 8011196:	d041      	beq.n	801121c <_free_r+0x8c>
 8011198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801119c:	1f0c      	subs	r4, r1, #4
 801119e:	2b00      	cmp	r3, #0
 80111a0:	bfb8      	it	lt
 80111a2:	18e4      	addlt	r4, r4, r3
 80111a4:	f7fe fb94 	bl	800f8d0 <__malloc_lock>
 80111a8:	4a1d      	ldr	r2, [pc, #116]	@ (8011220 <_free_r+0x90>)
 80111aa:	6813      	ldr	r3, [r2, #0]
 80111ac:	b933      	cbnz	r3, 80111bc <_free_r+0x2c>
 80111ae:	6063      	str	r3, [r4, #4]
 80111b0:	6014      	str	r4, [r2, #0]
 80111b2:	4628      	mov	r0, r5
 80111b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111b8:	f7fe bb90 	b.w	800f8dc <__malloc_unlock>
 80111bc:	42a3      	cmp	r3, r4
 80111be:	d908      	bls.n	80111d2 <_free_r+0x42>
 80111c0:	6820      	ldr	r0, [r4, #0]
 80111c2:	1821      	adds	r1, r4, r0
 80111c4:	428b      	cmp	r3, r1
 80111c6:	bf01      	itttt	eq
 80111c8:	6819      	ldreq	r1, [r3, #0]
 80111ca:	685b      	ldreq	r3, [r3, #4]
 80111cc:	1809      	addeq	r1, r1, r0
 80111ce:	6021      	streq	r1, [r4, #0]
 80111d0:	e7ed      	b.n	80111ae <_free_r+0x1e>
 80111d2:	461a      	mov	r2, r3
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	b10b      	cbz	r3, 80111dc <_free_r+0x4c>
 80111d8:	42a3      	cmp	r3, r4
 80111da:	d9fa      	bls.n	80111d2 <_free_r+0x42>
 80111dc:	6811      	ldr	r1, [r2, #0]
 80111de:	1850      	adds	r0, r2, r1
 80111e0:	42a0      	cmp	r0, r4
 80111e2:	d10b      	bne.n	80111fc <_free_r+0x6c>
 80111e4:	6820      	ldr	r0, [r4, #0]
 80111e6:	4401      	add	r1, r0
 80111e8:	1850      	adds	r0, r2, r1
 80111ea:	4283      	cmp	r3, r0
 80111ec:	6011      	str	r1, [r2, #0]
 80111ee:	d1e0      	bne.n	80111b2 <_free_r+0x22>
 80111f0:	6818      	ldr	r0, [r3, #0]
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	6053      	str	r3, [r2, #4]
 80111f6:	4408      	add	r0, r1
 80111f8:	6010      	str	r0, [r2, #0]
 80111fa:	e7da      	b.n	80111b2 <_free_r+0x22>
 80111fc:	d902      	bls.n	8011204 <_free_r+0x74>
 80111fe:	230c      	movs	r3, #12
 8011200:	602b      	str	r3, [r5, #0]
 8011202:	e7d6      	b.n	80111b2 <_free_r+0x22>
 8011204:	6820      	ldr	r0, [r4, #0]
 8011206:	1821      	adds	r1, r4, r0
 8011208:	428b      	cmp	r3, r1
 801120a:	bf04      	itt	eq
 801120c:	6819      	ldreq	r1, [r3, #0]
 801120e:	685b      	ldreq	r3, [r3, #4]
 8011210:	6063      	str	r3, [r4, #4]
 8011212:	bf04      	itt	eq
 8011214:	1809      	addeq	r1, r1, r0
 8011216:	6021      	streq	r1, [r4, #0]
 8011218:	6054      	str	r4, [r2, #4]
 801121a:	e7ca      	b.n	80111b2 <_free_r+0x22>
 801121c:	bd38      	pop	{r3, r4, r5, pc}
 801121e:	bf00      	nop
 8011220:	20002224 	.word	0x20002224

08011224 <_Balloc>:
 8011224:	b570      	push	{r4, r5, r6, lr}
 8011226:	69c6      	ldr	r6, [r0, #28]
 8011228:	4604      	mov	r4, r0
 801122a:	460d      	mov	r5, r1
 801122c:	b976      	cbnz	r6, 801124c <_Balloc+0x28>
 801122e:	2010      	movs	r0, #16
 8011230:	f7fe fa9c 	bl	800f76c <malloc>
 8011234:	4602      	mov	r2, r0
 8011236:	61e0      	str	r0, [r4, #28]
 8011238:	b920      	cbnz	r0, 8011244 <_Balloc+0x20>
 801123a:	4b18      	ldr	r3, [pc, #96]	@ (801129c <_Balloc+0x78>)
 801123c:	4818      	ldr	r0, [pc, #96]	@ (80112a0 <_Balloc+0x7c>)
 801123e:	216b      	movs	r1, #107	@ 0x6b
 8011240:	f000 fc16 	bl	8011a70 <__assert_func>
 8011244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011248:	6006      	str	r6, [r0, #0]
 801124a:	60c6      	str	r6, [r0, #12]
 801124c:	69e6      	ldr	r6, [r4, #28]
 801124e:	68f3      	ldr	r3, [r6, #12]
 8011250:	b183      	cbz	r3, 8011274 <_Balloc+0x50>
 8011252:	69e3      	ldr	r3, [r4, #28]
 8011254:	68db      	ldr	r3, [r3, #12]
 8011256:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801125a:	b9b8      	cbnz	r0, 801128c <_Balloc+0x68>
 801125c:	2101      	movs	r1, #1
 801125e:	fa01 f605 	lsl.w	r6, r1, r5
 8011262:	1d72      	adds	r2, r6, #5
 8011264:	0092      	lsls	r2, r2, #2
 8011266:	4620      	mov	r0, r4
 8011268:	f000 fc20 	bl	8011aac <_calloc_r>
 801126c:	b160      	cbz	r0, 8011288 <_Balloc+0x64>
 801126e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011272:	e00e      	b.n	8011292 <_Balloc+0x6e>
 8011274:	2221      	movs	r2, #33	@ 0x21
 8011276:	2104      	movs	r1, #4
 8011278:	4620      	mov	r0, r4
 801127a:	f000 fc17 	bl	8011aac <_calloc_r>
 801127e:	69e3      	ldr	r3, [r4, #28]
 8011280:	60f0      	str	r0, [r6, #12]
 8011282:	68db      	ldr	r3, [r3, #12]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d1e4      	bne.n	8011252 <_Balloc+0x2e>
 8011288:	2000      	movs	r0, #0
 801128a:	bd70      	pop	{r4, r5, r6, pc}
 801128c:	6802      	ldr	r2, [r0, #0]
 801128e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011292:	2300      	movs	r3, #0
 8011294:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011298:	e7f7      	b.n	801128a <_Balloc+0x66>
 801129a:	bf00      	nop
 801129c:	08012641 	.word	0x08012641
 80112a0:	080126c1 	.word	0x080126c1

080112a4 <_Bfree>:
 80112a4:	b570      	push	{r4, r5, r6, lr}
 80112a6:	69c6      	ldr	r6, [r0, #28]
 80112a8:	4605      	mov	r5, r0
 80112aa:	460c      	mov	r4, r1
 80112ac:	b976      	cbnz	r6, 80112cc <_Bfree+0x28>
 80112ae:	2010      	movs	r0, #16
 80112b0:	f7fe fa5c 	bl	800f76c <malloc>
 80112b4:	4602      	mov	r2, r0
 80112b6:	61e8      	str	r0, [r5, #28]
 80112b8:	b920      	cbnz	r0, 80112c4 <_Bfree+0x20>
 80112ba:	4b09      	ldr	r3, [pc, #36]	@ (80112e0 <_Bfree+0x3c>)
 80112bc:	4809      	ldr	r0, [pc, #36]	@ (80112e4 <_Bfree+0x40>)
 80112be:	218f      	movs	r1, #143	@ 0x8f
 80112c0:	f000 fbd6 	bl	8011a70 <__assert_func>
 80112c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112c8:	6006      	str	r6, [r0, #0]
 80112ca:	60c6      	str	r6, [r0, #12]
 80112cc:	b13c      	cbz	r4, 80112de <_Bfree+0x3a>
 80112ce:	69eb      	ldr	r3, [r5, #28]
 80112d0:	6862      	ldr	r2, [r4, #4]
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80112d8:	6021      	str	r1, [r4, #0]
 80112da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80112de:	bd70      	pop	{r4, r5, r6, pc}
 80112e0:	08012641 	.word	0x08012641
 80112e4:	080126c1 	.word	0x080126c1

080112e8 <__multadd>:
 80112e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ec:	690d      	ldr	r5, [r1, #16]
 80112ee:	4607      	mov	r7, r0
 80112f0:	460c      	mov	r4, r1
 80112f2:	461e      	mov	r6, r3
 80112f4:	f101 0c14 	add.w	ip, r1, #20
 80112f8:	2000      	movs	r0, #0
 80112fa:	f8dc 3000 	ldr.w	r3, [ip]
 80112fe:	b299      	uxth	r1, r3
 8011300:	fb02 6101 	mla	r1, r2, r1, r6
 8011304:	0c1e      	lsrs	r6, r3, #16
 8011306:	0c0b      	lsrs	r3, r1, #16
 8011308:	fb02 3306 	mla	r3, r2, r6, r3
 801130c:	b289      	uxth	r1, r1
 801130e:	3001      	adds	r0, #1
 8011310:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011314:	4285      	cmp	r5, r0
 8011316:	f84c 1b04 	str.w	r1, [ip], #4
 801131a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801131e:	dcec      	bgt.n	80112fa <__multadd+0x12>
 8011320:	b30e      	cbz	r6, 8011366 <__multadd+0x7e>
 8011322:	68a3      	ldr	r3, [r4, #8]
 8011324:	42ab      	cmp	r3, r5
 8011326:	dc19      	bgt.n	801135c <__multadd+0x74>
 8011328:	6861      	ldr	r1, [r4, #4]
 801132a:	4638      	mov	r0, r7
 801132c:	3101      	adds	r1, #1
 801132e:	f7ff ff79 	bl	8011224 <_Balloc>
 8011332:	4680      	mov	r8, r0
 8011334:	b928      	cbnz	r0, 8011342 <__multadd+0x5a>
 8011336:	4602      	mov	r2, r0
 8011338:	4b0c      	ldr	r3, [pc, #48]	@ (801136c <__multadd+0x84>)
 801133a:	480d      	ldr	r0, [pc, #52]	@ (8011370 <__multadd+0x88>)
 801133c:	21ba      	movs	r1, #186	@ 0xba
 801133e:	f000 fb97 	bl	8011a70 <__assert_func>
 8011342:	6922      	ldr	r2, [r4, #16]
 8011344:	3202      	adds	r2, #2
 8011346:	f104 010c 	add.w	r1, r4, #12
 801134a:	0092      	lsls	r2, r2, #2
 801134c:	300c      	adds	r0, #12
 801134e:	f7ff f8b6 	bl	80104be <memcpy>
 8011352:	4621      	mov	r1, r4
 8011354:	4638      	mov	r0, r7
 8011356:	f7ff ffa5 	bl	80112a4 <_Bfree>
 801135a:	4644      	mov	r4, r8
 801135c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011360:	3501      	adds	r5, #1
 8011362:	615e      	str	r6, [r3, #20]
 8011364:	6125      	str	r5, [r4, #16]
 8011366:	4620      	mov	r0, r4
 8011368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801136c:	080126b0 	.word	0x080126b0
 8011370:	080126c1 	.word	0x080126c1

08011374 <__hi0bits>:
 8011374:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011378:	4603      	mov	r3, r0
 801137a:	bf36      	itet	cc
 801137c:	0403      	lslcc	r3, r0, #16
 801137e:	2000      	movcs	r0, #0
 8011380:	2010      	movcc	r0, #16
 8011382:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011386:	bf3c      	itt	cc
 8011388:	021b      	lslcc	r3, r3, #8
 801138a:	3008      	addcc	r0, #8
 801138c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011390:	bf3c      	itt	cc
 8011392:	011b      	lslcc	r3, r3, #4
 8011394:	3004      	addcc	r0, #4
 8011396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801139a:	bf3c      	itt	cc
 801139c:	009b      	lslcc	r3, r3, #2
 801139e:	3002      	addcc	r0, #2
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	db05      	blt.n	80113b0 <__hi0bits+0x3c>
 80113a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80113a8:	f100 0001 	add.w	r0, r0, #1
 80113ac:	bf08      	it	eq
 80113ae:	2020      	moveq	r0, #32
 80113b0:	4770      	bx	lr

080113b2 <__lo0bits>:
 80113b2:	6803      	ldr	r3, [r0, #0]
 80113b4:	4602      	mov	r2, r0
 80113b6:	f013 0007 	ands.w	r0, r3, #7
 80113ba:	d00b      	beq.n	80113d4 <__lo0bits+0x22>
 80113bc:	07d9      	lsls	r1, r3, #31
 80113be:	d421      	bmi.n	8011404 <__lo0bits+0x52>
 80113c0:	0798      	lsls	r0, r3, #30
 80113c2:	bf49      	itett	mi
 80113c4:	085b      	lsrmi	r3, r3, #1
 80113c6:	089b      	lsrpl	r3, r3, #2
 80113c8:	2001      	movmi	r0, #1
 80113ca:	6013      	strmi	r3, [r2, #0]
 80113cc:	bf5c      	itt	pl
 80113ce:	6013      	strpl	r3, [r2, #0]
 80113d0:	2002      	movpl	r0, #2
 80113d2:	4770      	bx	lr
 80113d4:	b299      	uxth	r1, r3
 80113d6:	b909      	cbnz	r1, 80113dc <__lo0bits+0x2a>
 80113d8:	0c1b      	lsrs	r3, r3, #16
 80113da:	2010      	movs	r0, #16
 80113dc:	b2d9      	uxtb	r1, r3
 80113de:	b909      	cbnz	r1, 80113e4 <__lo0bits+0x32>
 80113e0:	3008      	adds	r0, #8
 80113e2:	0a1b      	lsrs	r3, r3, #8
 80113e4:	0719      	lsls	r1, r3, #28
 80113e6:	bf04      	itt	eq
 80113e8:	091b      	lsreq	r3, r3, #4
 80113ea:	3004      	addeq	r0, #4
 80113ec:	0799      	lsls	r1, r3, #30
 80113ee:	bf04      	itt	eq
 80113f0:	089b      	lsreq	r3, r3, #2
 80113f2:	3002      	addeq	r0, #2
 80113f4:	07d9      	lsls	r1, r3, #31
 80113f6:	d403      	bmi.n	8011400 <__lo0bits+0x4e>
 80113f8:	085b      	lsrs	r3, r3, #1
 80113fa:	f100 0001 	add.w	r0, r0, #1
 80113fe:	d003      	beq.n	8011408 <__lo0bits+0x56>
 8011400:	6013      	str	r3, [r2, #0]
 8011402:	4770      	bx	lr
 8011404:	2000      	movs	r0, #0
 8011406:	4770      	bx	lr
 8011408:	2020      	movs	r0, #32
 801140a:	4770      	bx	lr

0801140c <__i2b>:
 801140c:	b510      	push	{r4, lr}
 801140e:	460c      	mov	r4, r1
 8011410:	2101      	movs	r1, #1
 8011412:	f7ff ff07 	bl	8011224 <_Balloc>
 8011416:	4602      	mov	r2, r0
 8011418:	b928      	cbnz	r0, 8011426 <__i2b+0x1a>
 801141a:	4b05      	ldr	r3, [pc, #20]	@ (8011430 <__i2b+0x24>)
 801141c:	4805      	ldr	r0, [pc, #20]	@ (8011434 <__i2b+0x28>)
 801141e:	f240 1145 	movw	r1, #325	@ 0x145
 8011422:	f000 fb25 	bl	8011a70 <__assert_func>
 8011426:	2301      	movs	r3, #1
 8011428:	6144      	str	r4, [r0, #20]
 801142a:	6103      	str	r3, [r0, #16]
 801142c:	bd10      	pop	{r4, pc}
 801142e:	bf00      	nop
 8011430:	080126b0 	.word	0x080126b0
 8011434:	080126c1 	.word	0x080126c1

08011438 <__multiply>:
 8011438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801143c:	4617      	mov	r7, r2
 801143e:	690a      	ldr	r2, [r1, #16]
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	429a      	cmp	r2, r3
 8011444:	bfa8      	it	ge
 8011446:	463b      	movge	r3, r7
 8011448:	4689      	mov	r9, r1
 801144a:	bfa4      	itt	ge
 801144c:	460f      	movge	r7, r1
 801144e:	4699      	movge	r9, r3
 8011450:	693d      	ldr	r5, [r7, #16]
 8011452:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	6879      	ldr	r1, [r7, #4]
 801145a:	eb05 060a 	add.w	r6, r5, sl
 801145e:	42b3      	cmp	r3, r6
 8011460:	b085      	sub	sp, #20
 8011462:	bfb8      	it	lt
 8011464:	3101      	addlt	r1, #1
 8011466:	f7ff fedd 	bl	8011224 <_Balloc>
 801146a:	b930      	cbnz	r0, 801147a <__multiply+0x42>
 801146c:	4602      	mov	r2, r0
 801146e:	4b41      	ldr	r3, [pc, #260]	@ (8011574 <__multiply+0x13c>)
 8011470:	4841      	ldr	r0, [pc, #260]	@ (8011578 <__multiply+0x140>)
 8011472:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011476:	f000 fafb 	bl	8011a70 <__assert_func>
 801147a:	f100 0414 	add.w	r4, r0, #20
 801147e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011482:	4623      	mov	r3, r4
 8011484:	2200      	movs	r2, #0
 8011486:	4573      	cmp	r3, lr
 8011488:	d320      	bcc.n	80114cc <__multiply+0x94>
 801148a:	f107 0814 	add.w	r8, r7, #20
 801148e:	f109 0114 	add.w	r1, r9, #20
 8011492:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011496:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801149a:	9302      	str	r3, [sp, #8]
 801149c:	1beb      	subs	r3, r5, r7
 801149e:	3b15      	subs	r3, #21
 80114a0:	f023 0303 	bic.w	r3, r3, #3
 80114a4:	3304      	adds	r3, #4
 80114a6:	3715      	adds	r7, #21
 80114a8:	42bd      	cmp	r5, r7
 80114aa:	bf38      	it	cc
 80114ac:	2304      	movcc	r3, #4
 80114ae:	9301      	str	r3, [sp, #4]
 80114b0:	9b02      	ldr	r3, [sp, #8]
 80114b2:	9103      	str	r1, [sp, #12]
 80114b4:	428b      	cmp	r3, r1
 80114b6:	d80c      	bhi.n	80114d2 <__multiply+0x9a>
 80114b8:	2e00      	cmp	r6, #0
 80114ba:	dd03      	ble.n	80114c4 <__multiply+0x8c>
 80114bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d055      	beq.n	8011570 <__multiply+0x138>
 80114c4:	6106      	str	r6, [r0, #16]
 80114c6:	b005      	add	sp, #20
 80114c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114cc:	f843 2b04 	str.w	r2, [r3], #4
 80114d0:	e7d9      	b.n	8011486 <__multiply+0x4e>
 80114d2:	f8b1 a000 	ldrh.w	sl, [r1]
 80114d6:	f1ba 0f00 	cmp.w	sl, #0
 80114da:	d01f      	beq.n	801151c <__multiply+0xe4>
 80114dc:	46c4      	mov	ip, r8
 80114de:	46a1      	mov	r9, r4
 80114e0:	2700      	movs	r7, #0
 80114e2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80114e6:	f8d9 3000 	ldr.w	r3, [r9]
 80114ea:	fa1f fb82 	uxth.w	fp, r2
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80114f4:	443b      	add	r3, r7
 80114f6:	f8d9 7000 	ldr.w	r7, [r9]
 80114fa:	0c12      	lsrs	r2, r2, #16
 80114fc:	0c3f      	lsrs	r7, r7, #16
 80114fe:	fb0a 7202 	mla	r2, sl, r2, r7
 8011502:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011506:	b29b      	uxth	r3, r3
 8011508:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801150c:	4565      	cmp	r5, ip
 801150e:	f849 3b04 	str.w	r3, [r9], #4
 8011512:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011516:	d8e4      	bhi.n	80114e2 <__multiply+0xaa>
 8011518:	9b01      	ldr	r3, [sp, #4]
 801151a:	50e7      	str	r7, [r4, r3]
 801151c:	9b03      	ldr	r3, [sp, #12]
 801151e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011522:	3104      	adds	r1, #4
 8011524:	f1b9 0f00 	cmp.w	r9, #0
 8011528:	d020      	beq.n	801156c <__multiply+0x134>
 801152a:	6823      	ldr	r3, [r4, #0]
 801152c:	4647      	mov	r7, r8
 801152e:	46a4      	mov	ip, r4
 8011530:	f04f 0a00 	mov.w	sl, #0
 8011534:	f8b7 b000 	ldrh.w	fp, [r7]
 8011538:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801153c:	fb09 220b 	mla	r2, r9, fp, r2
 8011540:	4452      	add	r2, sl
 8011542:	b29b      	uxth	r3, r3
 8011544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011548:	f84c 3b04 	str.w	r3, [ip], #4
 801154c:	f857 3b04 	ldr.w	r3, [r7], #4
 8011550:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011554:	f8bc 3000 	ldrh.w	r3, [ip]
 8011558:	fb09 330a 	mla	r3, r9, sl, r3
 801155c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011560:	42bd      	cmp	r5, r7
 8011562:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011566:	d8e5      	bhi.n	8011534 <__multiply+0xfc>
 8011568:	9a01      	ldr	r2, [sp, #4]
 801156a:	50a3      	str	r3, [r4, r2]
 801156c:	3404      	adds	r4, #4
 801156e:	e79f      	b.n	80114b0 <__multiply+0x78>
 8011570:	3e01      	subs	r6, #1
 8011572:	e7a1      	b.n	80114b8 <__multiply+0x80>
 8011574:	080126b0 	.word	0x080126b0
 8011578:	080126c1 	.word	0x080126c1

0801157c <__pow5mult>:
 801157c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011580:	4615      	mov	r5, r2
 8011582:	f012 0203 	ands.w	r2, r2, #3
 8011586:	4607      	mov	r7, r0
 8011588:	460e      	mov	r6, r1
 801158a:	d007      	beq.n	801159c <__pow5mult+0x20>
 801158c:	4c25      	ldr	r4, [pc, #148]	@ (8011624 <__pow5mult+0xa8>)
 801158e:	3a01      	subs	r2, #1
 8011590:	2300      	movs	r3, #0
 8011592:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011596:	f7ff fea7 	bl	80112e8 <__multadd>
 801159a:	4606      	mov	r6, r0
 801159c:	10ad      	asrs	r5, r5, #2
 801159e:	d03d      	beq.n	801161c <__pow5mult+0xa0>
 80115a0:	69fc      	ldr	r4, [r7, #28]
 80115a2:	b97c      	cbnz	r4, 80115c4 <__pow5mult+0x48>
 80115a4:	2010      	movs	r0, #16
 80115a6:	f7fe f8e1 	bl	800f76c <malloc>
 80115aa:	4602      	mov	r2, r0
 80115ac:	61f8      	str	r0, [r7, #28]
 80115ae:	b928      	cbnz	r0, 80115bc <__pow5mult+0x40>
 80115b0:	4b1d      	ldr	r3, [pc, #116]	@ (8011628 <__pow5mult+0xac>)
 80115b2:	481e      	ldr	r0, [pc, #120]	@ (801162c <__pow5mult+0xb0>)
 80115b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80115b8:	f000 fa5a 	bl	8011a70 <__assert_func>
 80115bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80115c0:	6004      	str	r4, [r0, #0]
 80115c2:	60c4      	str	r4, [r0, #12]
 80115c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80115c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80115cc:	b94c      	cbnz	r4, 80115e2 <__pow5mult+0x66>
 80115ce:	f240 2171 	movw	r1, #625	@ 0x271
 80115d2:	4638      	mov	r0, r7
 80115d4:	f7ff ff1a 	bl	801140c <__i2b>
 80115d8:	2300      	movs	r3, #0
 80115da:	f8c8 0008 	str.w	r0, [r8, #8]
 80115de:	4604      	mov	r4, r0
 80115e0:	6003      	str	r3, [r0, #0]
 80115e2:	f04f 0900 	mov.w	r9, #0
 80115e6:	07eb      	lsls	r3, r5, #31
 80115e8:	d50a      	bpl.n	8011600 <__pow5mult+0x84>
 80115ea:	4631      	mov	r1, r6
 80115ec:	4622      	mov	r2, r4
 80115ee:	4638      	mov	r0, r7
 80115f0:	f7ff ff22 	bl	8011438 <__multiply>
 80115f4:	4631      	mov	r1, r6
 80115f6:	4680      	mov	r8, r0
 80115f8:	4638      	mov	r0, r7
 80115fa:	f7ff fe53 	bl	80112a4 <_Bfree>
 80115fe:	4646      	mov	r6, r8
 8011600:	106d      	asrs	r5, r5, #1
 8011602:	d00b      	beq.n	801161c <__pow5mult+0xa0>
 8011604:	6820      	ldr	r0, [r4, #0]
 8011606:	b938      	cbnz	r0, 8011618 <__pow5mult+0x9c>
 8011608:	4622      	mov	r2, r4
 801160a:	4621      	mov	r1, r4
 801160c:	4638      	mov	r0, r7
 801160e:	f7ff ff13 	bl	8011438 <__multiply>
 8011612:	6020      	str	r0, [r4, #0]
 8011614:	f8c0 9000 	str.w	r9, [r0]
 8011618:	4604      	mov	r4, r0
 801161a:	e7e4      	b.n	80115e6 <__pow5mult+0x6a>
 801161c:	4630      	mov	r0, r6
 801161e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011622:	bf00      	nop
 8011624:	08012774 	.word	0x08012774
 8011628:	08012641 	.word	0x08012641
 801162c:	080126c1 	.word	0x080126c1

08011630 <__lshift>:
 8011630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011634:	460c      	mov	r4, r1
 8011636:	6849      	ldr	r1, [r1, #4]
 8011638:	6923      	ldr	r3, [r4, #16]
 801163a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801163e:	68a3      	ldr	r3, [r4, #8]
 8011640:	4607      	mov	r7, r0
 8011642:	4691      	mov	r9, r2
 8011644:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011648:	f108 0601 	add.w	r6, r8, #1
 801164c:	42b3      	cmp	r3, r6
 801164e:	db0b      	blt.n	8011668 <__lshift+0x38>
 8011650:	4638      	mov	r0, r7
 8011652:	f7ff fde7 	bl	8011224 <_Balloc>
 8011656:	4605      	mov	r5, r0
 8011658:	b948      	cbnz	r0, 801166e <__lshift+0x3e>
 801165a:	4602      	mov	r2, r0
 801165c:	4b28      	ldr	r3, [pc, #160]	@ (8011700 <__lshift+0xd0>)
 801165e:	4829      	ldr	r0, [pc, #164]	@ (8011704 <__lshift+0xd4>)
 8011660:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011664:	f000 fa04 	bl	8011a70 <__assert_func>
 8011668:	3101      	adds	r1, #1
 801166a:	005b      	lsls	r3, r3, #1
 801166c:	e7ee      	b.n	801164c <__lshift+0x1c>
 801166e:	2300      	movs	r3, #0
 8011670:	f100 0114 	add.w	r1, r0, #20
 8011674:	f100 0210 	add.w	r2, r0, #16
 8011678:	4618      	mov	r0, r3
 801167a:	4553      	cmp	r3, sl
 801167c:	db33      	blt.n	80116e6 <__lshift+0xb6>
 801167e:	6920      	ldr	r0, [r4, #16]
 8011680:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011684:	f104 0314 	add.w	r3, r4, #20
 8011688:	f019 091f 	ands.w	r9, r9, #31
 801168c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011690:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011694:	d02b      	beq.n	80116ee <__lshift+0xbe>
 8011696:	f1c9 0e20 	rsb	lr, r9, #32
 801169a:	468a      	mov	sl, r1
 801169c:	2200      	movs	r2, #0
 801169e:	6818      	ldr	r0, [r3, #0]
 80116a0:	fa00 f009 	lsl.w	r0, r0, r9
 80116a4:	4310      	orrs	r0, r2
 80116a6:	f84a 0b04 	str.w	r0, [sl], #4
 80116aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80116ae:	459c      	cmp	ip, r3
 80116b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80116b4:	d8f3      	bhi.n	801169e <__lshift+0x6e>
 80116b6:	ebac 0304 	sub.w	r3, ip, r4
 80116ba:	3b15      	subs	r3, #21
 80116bc:	f023 0303 	bic.w	r3, r3, #3
 80116c0:	3304      	adds	r3, #4
 80116c2:	f104 0015 	add.w	r0, r4, #21
 80116c6:	4560      	cmp	r0, ip
 80116c8:	bf88      	it	hi
 80116ca:	2304      	movhi	r3, #4
 80116cc:	50ca      	str	r2, [r1, r3]
 80116ce:	b10a      	cbz	r2, 80116d4 <__lshift+0xa4>
 80116d0:	f108 0602 	add.w	r6, r8, #2
 80116d4:	3e01      	subs	r6, #1
 80116d6:	4638      	mov	r0, r7
 80116d8:	612e      	str	r6, [r5, #16]
 80116da:	4621      	mov	r1, r4
 80116dc:	f7ff fde2 	bl	80112a4 <_Bfree>
 80116e0:	4628      	mov	r0, r5
 80116e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80116ea:	3301      	adds	r3, #1
 80116ec:	e7c5      	b.n	801167a <__lshift+0x4a>
 80116ee:	3904      	subs	r1, #4
 80116f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80116f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80116f8:	459c      	cmp	ip, r3
 80116fa:	d8f9      	bhi.n	80116f0 <__lshift+0xc0>
 80116fc:	e7ea      	b.n	80116d4 <__lshift+0xa4>
 80116fe:	bf00      	nop
 8011700:	080126b0 	.word	0x080126b0
 8011704:	080126c1 	.word	0x080126c1

08011708 <__mcmp>:
 8011708:	690a      	ldr	r2, [r1, #16]
 801170a:	4603      	mov	r3, r0
 801170c:	6900      	ldr	r0, [r0, #16]
 801170e:	1a80      	subs	r0, r0, r2
 8011710:	b530      	push	{r4, r5, lr}
 8011712:	d10e      	bne.n	8011732 <__mcmp+0x2a>
 8011714:	3314      	adds	r3, #20
 8011716:	3114      	adds	r1, #20
 8011718:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801171c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011720:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011724:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011728:	4295      	cmp	r5, r2
 801172a:	d003      	beq.n	8011734 <__mcmp+0x2c>
 801172c:	d205      	bcs.n	801173a <__mcmp+0x32>
 801172e:	f04f 30ff 	mov.w	r0, #4294967295
 8011732:	bd30      	pop	{r4, r5, pc}
 8011734:	42a3      	cmp	r3, r4
 8011736:	d3f3      	bcc.n	8011720 <__mcmp+0x18>
 8011738:	e7fb      	b.n	8011732 <__mcmp+0x2a>
 801173a:	2001      	movs	r0, #1
 801173c:	e7f9      	b.n	8011732 <__mcmp+0x2a>
	...

08011740 <__mdiff>:
 8011740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011744:	4689      	mov	r9, r1
 8011746:	4606      	mov	r6, r0
 8011748:	4611      	mov	r1, r2
 801174a:	4648      	mov	r0, r9
 801174c:	4614      	mov	r4, r2
 801174e:	f7ff ffdb 	bl	8011708 <__mcmp>
 8011752:	1e05      	subs	r5, r0, #0
 8011754:	d112      	bne.n	801177c <__mdiff+0x3c>
 8011756:	4629      	mov	r1, r5
 8011758:	4630      	mov	r0, r6
 801175a:	f7ff fd63 	bl	8011224 <_Balloc>
 801175e:	4602      	mov	r2, r0
 8011760:	b928      	cbnz	r0, 801176e <__mdiff+0x2e>
 8011762:	4b3f      	ldr	r3, [pc, #252]	@ (8011860 <__mdiff+0x120>)
 8011764:	f240 2137 	movw	r1, #567	@ 0x237
 8011768:	483e      	ldr	r0, [pc, #248]	@ (8011864 <__mdiff+0x124>)
 801176a:	f000 f981 	bl	8011a70 <__assert_func>
 801176e:	2301      	movs	r3, #1
 8011770:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011774:	4610      	mov	r0, r2
 8011776:	b003      	add	sp, #12
 8011778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801177c:	bfbc      	itt	lt
 801177e:	464b      	movlt	r3, r9
 8011780:	46a1      	movlt	r9, r4
 8011782:	4630      	mov	r0, r6
 8011784:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011788:	bfba      	itte	lt
 801178a:	461c      	movlt	r4, r3
 801178c:	2501      	movlt	r5, #1
 801178e:	2500      	movge	r5, #0
 8011790:	f7ff fd48 	bl	8011224 <_Balloc>
 8011794:	4602      	mov	r2, r0
 8011796:	b918      	cbnz	r0, 80117a0 <__mdiff+0x60>
 8011798:	4b31      	ldr	r3, [pc, #196]	@ (8011860 <__mdiff+0x120>)
 801179a:	f240 2145 	movw	r1, #581	@ 0x245
 801179e:	e7e3      	b.n	8011768 <__mdiff+0x28>
 80117a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80117a4:	6926      	ldr	r6, [r4, #16]
 80117a6:	60c5      	str	r5, [r0, #12]
 80117a8:	f109 0310 	add.w	r3, r9, #16
 80117ac:	f109 0514 	add.w	r5, r9, #20
 80117b0:	f104 0e14 	add.w	lr, r4, #20
 80117b4:	f100 0b14 	add.w	fp, r0, #20
 80117b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80117bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80117c0:	9301      	str	r3, [sp, #4]
 80117c2:	46d9      	mov	r9, fp
 80117c4:	f04f 0c00 	mov.w	ip, #0
 80117c8:	9b01      	ldr	r3, [sp, #4]
 80117ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80117ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80117d2:	9301      	str	r3, [sp, #4]
 80117d4:	fa1f f38a 	uxth.w	r3, sl
 80117d8:	4619      	mov	r1, r3
 80117da:	b283      	uxth	r3, r0
 80117dc:	1acb      	subs	r3, r1, r3
 80117de:	0c00      	lsrs	r0, r0, #16
 80117e0:	4463      	add	r3, ip
 80117e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80117e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80117ea:	b29b      	uxth	r3, r3
 80117ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80117f0:	4576      	cmp	r6, lr
 80117f2:	f849 3b04 	str.w	r3, [r9], #4
 80117f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80117fa:	d8e5      	bhi.n	80117c8 <__mdiff+0x88>
 80117fc:	1b33      	subs	r3, r6, r4
 80117fe:	3b15      	subs	r3, #21
 8011800:	f023 0303 	bic.w	r3, r3, #3
 8011804:	3415      	adds	r4, #21
 8011806:	3304      	adds	r3, #4
 8011808:	42a6      	cmp	r6, r4
 801180a:	bf38      	it	cc
 801180c:	2304      	movcc	r3, #4
 801180e:	441d      	add	r5, r3
 8011810:	445b      	add	r3, fp
 8011812:	461e      	mov	r6, r3
 8011814:	462c      	mov	r4, r5
 8011816:	4544      	cmp	r4, r8
 8011818:	d30e      	bcc.n	8011838 <__mdiff+0xf8>
 801181a:	f108 0103 	add.w	r1, r8, #3
 801181e:	1b49      	subs	r1, r1, r5
 8011820:	f021 0103 	bic.w	r1, r1, #3
 8011824:	3d03      	subs	r5, #3
 8011826:	45a8      	cmp	r8, r5
 8011828:	bf38      	it	cc
 801182a:	2100      	movcc	r1, #0
 801182c:	440b      	add	r3, r1
 801182e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011832:	b191      	cbz	r1, 801185a <__mdiff+0x11a>
 8011834:	6117      	str	r7, [r2, #16]
 8011836:	e79d      	b.n	8011774 <__mdiff+0x34>
 8011838:	f854 1b04 	ldr.w	r1, [r4], #4
 801183c:	46e6      	mov	lr, ip
 801183e:	0c08      	lsrs	r0, r1, #16
 8011840:	fa1c fc81 	uxtah	ip, ip, r1
 8011844:	4471      	add	r1, lr
 8011846:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801184a:	b289      	uxth	r1, r1
 801184c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011850:	f846 1b04 	str.w	r1, [r6], #4
 8011854:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011858:	e7dd      	b.n	8011816 <__mdiff+0xd6>
 801185a:	3f01      	subs	r7, #1
 801185c:	e7e7      	b.n	801182e <__mdiff+0xee>
 801185e:	bf00      	nop
 8011860:	080126b0 	.word	0x080126b0
 8011864:	080126c1 	.word	0x080126c1

08011868 <__d2b>:
 8011868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801186c:	460f      	mov	r7, r1
 801186e:	2101      	movs	r1, #1
 8011870:	ec59 8b10 	vmov	r8, r9, d0
 8011874:	4616      	mov	r6, r2
 8011876:	f7ff fcd5 	bl	8011224 <_Balloc>
 801187a:	4604      	mov	r4, r0
 801187c:	b930      	cbnz	r0, 801188c <__d2b+0x24>
 801187e:	4602      	mov	r2, r0
 8011880:	4b23      	ldr	r3, [pc, #140]	@ (8011910 <__d2b+0xa8>)
 8011882:	4824      	ldr	r0, [pc, #144]	@ (8011914 <__d2b+0xac>)
 8011884:	f240 310f 	movw	r1, #783	@ 0x30f
 8011888:	f000 f8f2 	bl	8011a70 <__assert_func>
 801188c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011890:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011894:	b10d      	cbz	r5, 801189a <__d2b+0x32>
 8011896:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801189a:	9301      	str	r3, [sp, #4]
 801189c:	f1b8 0300 	subs.w	r3, r8, #0
 80118a0:	d023      	beq.n	80118ea <__d2b+0x82>
 80118a2:	4668      	mov	r0, sp
 80118a4:	9300      	str	r3, [sp, #0]
 80118a6:	f7ff fd84 	bl	80113b2 <__lo0bits>
 80118aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80118ae:	b1d0      	cbz	r0, 80118e6 <__d2b+0x7e>
 80118b0:	f1c0 0320 	rsb	r3, r0, #32
 80118b4:	fa02 f303 	lsl.w	r3, r2, r3
 80118b8:	430b      	orrs	r3, r1
 80118ba:	40c2      	lsrs	r2, r0
 80118bc:	6163      	str	r3, [r4, #20]
 80118be:	9201      	str	r2, [sp, #4]
 80118c0:	9b01      	ldr	r3, [sp, #4]
 80118c2:	61a3      	str	r3, [r4, #24]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	bf0c      	ite	eq
 80118c8:	2201      	moveq	r2, #1
 80118ca:	2202      	movne	r2, #2
 80118cc:	6122      	str	r2, [r4, #16]
 80118ce:	b1a5      	cbz	r5, 80118fa <__d2b+0x92>
 80118d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80118d4:	4405      	add	r5, r0
 80118d6:	603d      	str	r5, [r7, #0]
 80118d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80118dc:	6030      	str	r0, [r6, #0]
 80118de:	4620      	mov	r0, r4
 80118e0:	b003      	add	sp, #12
 80118e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118e6:	6161      	str	r1, [r4, #20]
 80118e8:	e7ea      	b.n	80118c0 <__d2b+0x58>
 80118ea:	a801      	add	r0, sp, #4
 80118ec:	f7ff fd61 	bl	80113b2 <__lo0bits>
 80118f0:	9b01      	ldr	r3, [sp, #4]
 80118f2:	6163      	str	r3, [r4, #20]
 80118f4:	3020      	adds	r0, #32
 80118f6:	2201      	movs	r2, #1
 80118f8:	e7e8      	b.n	80118cc <__d2b+0x64>
 80118fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80118fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011902:	6038      	str	r0, [r7, #0]
 8011904:	6918      	ldr	r0, [r3, #16]
 8011906:	f7ff fd35 	bl	8011374 <__hi0bits>
 801190a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801190e:	e7e5      	b.n	80118dc <__d2b+0x74>
 8011910:	080126b0 	.word	0x080126b0
 8011914:	080126c1 	.word	0x080126c1

08011918 <__sflush_r>:
 8011918:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801191c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011920:	0716      	lsls	r6, r2, #28
 8011922:	4605      	mov	r5, r0
 8011924:	460c      	mov	r4, r1
 8011926:	d454      	bmi.n	80119d2 <__sflush_r+0xba>
 8011928:	684b      	ldr	r3, [r1, #4]
 801192a:	2b00      	cmp	r3, #0
 801192c:	dc02      	bgt.n	8011934 <__sflush_r+0x1c>
 801192e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011930:	2b00      	cmp	r3, #0
 8011932:	dd48      	ble.n	80119c6 <__sflush_r+0xae>
 8011934:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011936:	2e00      	cmp	r6, #0
 8011938:	d045      	beq.n	80119c6 <__sflush_r+0xae>
 801193a:	2300      	movs	r3, #0
 801193c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011940:	682f      	ldr	r7, [r5, #0]
 8011942:	6a21      	ldr	r1, [r4, #32]
 8011944:	602b      	str	r3, [r5, #0]
 8011946:	d030      	beq.n	80119aa <__sflush_r+0x92>
 8011948:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801194a:	89a3      	ldrh	r3, [r4, #12]
 801194c:	0759      	lsls	r1, r3, #29
 801194e:	d505      	bpl.n	801195c <__sflush_r+0x44>
 8011950:	6863      	ldr	r3, [r4, #4]
 8011952:	1ad2      	subs	r2, r2, r3
 8011954:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011956:	b10b      	cbz	r3, 801195c <__sflush_r+0x44>
 8011958:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801195a:	1ad2      	subs	r2, r2, r3
 801195c:	2300      	movs	r3, #0
 801195e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011960:	6a21      	ldr	r1, [r4, #32]
 8011962:	4628      	mov	r0, r5
 8011964:	47b0      	blx	r6
 8011966:	1c43      	adds	r3, r0, #1
 8011968:	89a3      	ldrh	r3, [r4, #12]
 801196a:	d106      	bne.n	801197a <__sflush_r+0x62>
 801196c:	6829      	ldr	r1, [r5, #0]
 801196e:	291d      	cmp	r1, #29
 8011970:	d82b      	bhi.n	80119ca <__sflush_r+0xb2>
 8011972:	4a2a      	ldr	r2, [pc, #168]	@ (8011a1c <__sflush_r+0x104>)
 8011974:	40ca      	lsrs	r2, r1
 8011976:	07d6      	lsls	r6, r2, #31
 8011978:	d527      	bpl.n	80119ca <__sflush_r+0xb2>
 801197a:	2200      	movs	r2, #0
 801197c:	6062      	str	r2, [r4, #4]
 801197e:	04d9      	lsls	r1, r3, #19
 8011980:	6922      	ldr	r2, [r4, #16]
 8011982:	6022      	str	r2, [r4, #0]
 8011984:	d504      	bpl.n	8011990 <__sflush_r+0x78>
 8011986:	1c42      	adds	r2, r0, #1
 8011988:	d101      	bne.n	801198e <__sflush_r+0x76>
 801198a:	682b      	ldr	r3, [r5, #0]
 801198c:	b903      	cbnz	r3, 8011990 <__sflush_r+0x78>
 801198e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011990:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011992:	602f      	str	r7, [r5, #0]
 8011994:	b1b9      	cbz	r1, 80119c6 <__sflush_r+0xae>
 8011996:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801199a:	4299      	cmp	r1, r3
 801199c:	d002      	beq.n	80119a4 <__sflush_r+0x8c>
 801199e:	4628      	mov	r0, r5
 80119a0:	f7ff fbf6 	bl	8011190 <_free_r>
 80119a4:	2300      	movs	r3, #0
 80119a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80119a8:	e00d      	b.n	80119c6 <__sflush_r+0xae>
 80119aa:	2301      	movs	r3, #1
 80119ac:	4628      	mov	r0, r5
 80119ae:	47b0      	blx	r6
 80119b0:	4602      	mov	r2, r0
 80119b2:	1c50      	adds	r0, r2, #1
 80119b4:	d1c9      	bne.n	801194a <__sflush_r+0x32>
 80119b6:	682b      	ldr	r3, [r5, #0]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d0c6      	beq.n	801194a <__sflush_r+0x32>
 80119bc:	2b1d      	cmp	r3, #29
 80119be:	d001      	beq.n	80119c4 <__sflush_r+0xac>
 80119c0:	2b16      	cmp	r3, #22
 80119c2:	d11e      	bne.n	8011a02 <__sflush_r+0xea>
 80119c4:	602f      	str	r7, [r5, #0]
 80119c6:	2000      	movs	r0, #0
 80119c8:	e022      	b.n	8011a10 <__sflush_r+0xf8>
 80119ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119ce:	b21b      	sxth	r3, r3
 80119d0:	e01b      	b.n	8011a0a <__sflush_r+0xf2>
 80119d2:	690f      	ldr	r7, [r1, #16]
 80119d4:	2f00      	cmp	r7, #0
 80119d6:	d0f6      	beq.n	80119c6 <__sflush_r+0xae>
 80119d8:	0793      	lsls	r3, r2, #30
 80119da:	680e      	ldr	r6, [r1, #0]
 80119dc:	bf08      	it	eq
 80119de:	694b      	ldreq	r3, [r1, #20]
 80119e0:	600f      	str	r7, [r1, #0]
 80119e2:	bf18      	it	ne
 80119e4:	2300      	movne	r3, #0
 80119e6:	eba6 0807 	sub.w	r8, r6, r7
 80119ea:	608b      	str	r3, [r1, #8]
 80119ec:	f1b8 0f00 	cmp.w	r8, #0
 80119f0:	dde9      	ble.n	80119c6 <__sflush_r+0xae>
 80119f2:	6a21      	ldr	r1, [r4, #32]
 80119f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80119f6:	4643      	mov	r3, r8
 80119f8:	463a      	mov	r2, r7
 80119fa:	4628      	mov	r0, r5
 80119fc:	47b0      	blx	r6
 80119fe:	2800      	cmp	r0, #0
 8011a00:	dc08      	bgt.n	8011a14 <__sflush_r+0xfc>
 8011a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a0a:	81a3      	strh	r3, [r4, #12]
 8011a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a14:	4407      	add	r7, r0
 8011a16:	eba8 0800 	sub.w	r8, r8, r0
 8011a1a:	e7e7      	b.n	80119ec <__sflush_r+0xd4>
 8011a1c:	20400001 	.word	0x20400001

08011a20 <_fflush_r>:
 8011a20:	b538      	push	{r3, r4, r5, lr}
 8011a22:	690b      	ldr	r3, [r1, #16]
 8011a24:	4605      	mov	r5, r0
 8011a26:	460c      	mov	r4, r1
 8011a28:	b913      	cbnz	r3, 8011a30 <_fflush_r+0x10>
 8011a2a:	2500      	movs	r5, #0
 8011a2c:	4628      	mov	r0, r5
 8011a2e:	bd38      	pop	{r3, r4, r5, pc}
 8011a30:	b118      	cbz	r0, 8011a3a <_fflush_r+0x1a>
 8011a32:	6a03      	ldr	r3, [r0, #32]
 8011a34:	b90b      	cbnz	r3, 8011a3a <_fflush_r+0x1a>
 8011a36:	f7fe fc39 	bl	80102ac <__sinit>
 8011a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d0f3      	beq.n	8011a2a <_fflush_r+0xa>
 8011a42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011a44:	07d0      	lsls	r0, r2, #31
 8011a46:	d404      	bmi.n	8011a52 <_fflush_r+0x32>
 8011a48:	0599      	lsls	r1, r3, #22
 8011a4a:	d402      	bmi.n	8011a52 <_fflush_r+0x32>
 8011a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a4e:	f7fe fd34 	bl	80104ba <__retarget_lock_acquire_recursive>
 8011a52:	4628      	mov	r0, r5
 8011a54:	4621      	mov	r1, r4
 8011a56:	f7ff ff5f 	bl	8011918 <__sflush_r>
 8011a5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011a5c:	07da      	lsls	r2, r3, #31
 8011a5e:	4605      	mov	r5, r0
 8011a60:	d4e4      	bmi.n	8011a2c <_fflush_r+0xc>
 8011a62:	89a3      	ldrh	r3, [r4, #12]
 8011a64:	059b      	lsls	r3, r3, #22
 8011a66:	d4e1      	bmi.n	8011a2c <_fflush_r+0xc>
 8011a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a6a:	f7fe fd27 	bl	80104bc <__retarget_lock_release_recursive>
 8011a6e:	e7dd      	b.n	8011a2c <_fflush_r+0xc>

08011a70 <__assert_func>:
 8011a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a72:	4614      	mov	r4, r2
 8011a74:	461a      	mov	r2, r3
 8011a76:	4b09      	ldr	r3, [pc, #36]	@ (8011a9c <__assert_func+0x2c>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	4605      	mov	r5, r0
 8011a7c:	68d8      	ldr	r0, [r3, #12]
 8011a7e:	b14c      	cbz	r4, 8011a94 <__assert_func+0x24>
 8011a80:	4b07      	ldr	r3, [pc, #28]	@ (8011aa0 <__assert_func+0x30>)
 8011a82:	9100      	str	r1, [sp, #0]
 8011a84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a88:	4906      	ldr	r1, [pc, #24]	@ (8011aa4 <__assert_func+0x34>)
 8011a8a:	462b      	mov	r3, r5
 8011a8c:	f000 f842 	bl	8011b14 <fiprintf>
 8011a90:	f000 f852 	bl	8011b38 <abort>
 8011a94:	4b04      	ldr	r3, [pc, #16]	@ (8011aa8 <__assert_func+0x38>)
 8011a96:	461c      	mov	r4, r3
 8011a98:	e7f3      	b.n	8011a82 <__assert_func+0x12>
 8011a9a:	bf00      	nop
 8011a9c:	20000118 	.word	0x20000118
 8011aa0:	08012724 	.word	0x08012724
 8011aa4:	08012731 	.word	0x08012731
 8011aa8:	0801275f 	.word	0x0801275f

08011aac <_calloc_r>:
 8011aac:	b570      	push	{r4, r5, r6, lr}
 8011aae:	fba1 5402 	umull	r5, r4, r1, r2
 8011ab2:	b934      	cbnz	r4, 8011ac2 <_calloc_r+0x16>
 8011ab4:	4629      	mov	r1, r5
 8011ab6:	f7fd fe8b 	bl	800f7d0 <_malloc_r>
 8011aba:	4606      	mov	r6, r0
 8011abc:	b928      	cbnz	r0, 8011aca <_calloc_r+0x1e>
 8011abe:	4630      	mov	r0, r6
 8011ac0:	bd70      	pop	{r4, r5, r6, pc}
 8011ac2:	220c      	movs	r2, #12
 8011ac4:	6002      	str	r2, [r0, #0]
 8011ac6:	2600      	movs	r6, #0
 8011ac8:	e7f9      	b.n	8011abe <_calloc_r+0x12>
 8011aca:	462a      	mov	r2, r5
 8011acc:	4621      	mov	r1, r4
 8011ace:	f7fe fc66 	bl	801039e <memset>
 8011ad2:	e7f4      	b.n	8011abe <_calloc_r+0x12>

08011ad4 <__ascii_mbtowc>:
 8011ad4:	b082      	sub	sp, #8
 8011ad6:	b901      	cbnz	r1, 8011ada <__ascii_mbtowc+0x6>
 8011ad8:	a901      	add	r1, sp, #4
 8011ada:	b142      	cbz	r2, 8011aee <__ascii_mbtowc+0x1a>
 8011adc:	b14b      	cbz	r3, 8011af2 <__ascii_mbtowc+0x1e>
 8011ade:	7813      	ldrb	r3, [r2, #0]
 8011ae0:	600b      	str	r3, [r1, #0]
 8011ae2:	7812      	ldrb	r2, [r2, #0]
 8011ae4:	1e10      	subs	r0, r2, #0
 8011ae6:	bf18      	it	ne
 8011ae8:	2001      	movne	r0, #1
 8011aea:	b002      	add	sp, #8
 8011aec:	4770      	bx	lr
 8011aee:	4610      	mov	r0, r2
 8011af0:	e7fb      	b.n	8011aea <__ascii_mbtowc+0x16>
 8011af2:	f06f 0001 	mvn.w	r0, #1
 8011af6:	e7f8      	b.n	8011aea <__ascii_mbtowc+0x16>

08011af8 <__ascii_wctomb>:
 8011af8:	4603      	mov	r3, r0
 8011afa:	4608      	mov	r0, r1
 8011afc:	b141      	cbz	r1, 8011b10 <__ascii_wctomb+0x18>
 8011afe:	2aff      	cmp	r2, #255	@ 0xff
 8011b00:	d904      	bls.n	8011b0c <__ascii_wctomb+0x14>
 8011b02:	228a      	movs	r2, #138	@ 0x8a
 8011b04:	601a      	str	r2, [r3, #0]
 8011b06:	f04f 30ff 	mov.w	r0, #4294967295
 8011b0a:	4770      	bx	lr
 8011b0c:	700a      	strb	r2, [r1, #0]
 8011b0e:	2001      	movs	r0, #1
 8011b10:	4770      	bx	lr
	...

08011b14 <fiprintf>:
 8011b14:	b40e      	push	{r1, r2, r3}
 8011b16:	b503      	push	{r0, r1, lr}
 8011b18:	4601      	mov	r1, r0
 8011b1a:	ab03      	add	r3, sp, #12
 8011b1c:	4805      	ldr	r0, [pc, #20]	@ (8011b34 <fiprintf+0x20>)
 8011b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b22:	6800      	ldr	r0, [r0, #0]
 8011b24:	9301      	str	r3, [sp, #4]
 8011b26:	f000 f837 	bl	8011b98 <_vfiprintf_r>
 8011b2a:	b002      	add	sp, #8
 8011b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b30:	b003      	add	sp, #12
 8011b32:	4770      	bx	lr
 8011b34:	20000118 	.word	0x20000118

08011b38 <abort>:
 8011b38:	b508      	push	{r3, lr}
 8011b3a:	2006      	movs	r0, #6
 8011b3c:	f000 fa00 	bl	8011f40 <raise>
 8011b40:	2001      	movs	r0, #1
 8011b42:	f7f1 feab 	bl	800389c <_exit>

08011b46 <__sfputc_r>:
 8011b46:	6893      	ldr	r3, [r2, #8]
 8011b48:	3b01      	subs	r3, #1
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	b410      	push	{r4}
 8011b4e:	6093      	str	r3, [r2, #8]
 8011b50:	da08      	bge.n	8011b64 <__sfputc_r+0x1e>
 8011b52:	6994      	ldr	r4, [r2, #24]
 8011b54:	42a3      	cmp	r3, r4
 8011b56:	db01      	blt.n	8011b5c <__sfputc_r+0x16>
 8011b58:	290a      	cmp	r1, #10
 8011b5a:	d103      	bne.n	8011b64 <__sfputc_r+0x1e>
 8011b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b60:	f000 b932 	b.w	8011dc8 <__swbuf_r>
 8011b64:	6813      	ldr	r3, [r2, #0]
 8011b66:	1c58      	adds	r0, r3, #1
 8011b68:	6010      	str	r0, [r2, #0]
 8011b6a:	7019      	strb	r1, [r3, #0]
 8011b6c:	4608      	mov	r0, r1
 8011b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b72:	4770      	bx	lr

08011b74 <__sfputs_r>:
 8011b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b76:	4606      	mov	r6, r0
 8011b78:	460f      	mov	r7, r1
 8011b7a:	4614      	mov	r4, r2
 8011b7c:	18d5      	adds	r5, r2, r3
 8011b7e:	42ac      	cmp	r4, r5
 8011b80:	d101      	bne.n	8011b86 <__sfputs_r+0x12>
 8011b82:	2000      	movs	r0, #0
 8011b84:	e007      	b.n	8011b96 <__sfputs_r+0x22>
 8011b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b8a:	463a      	mov	r2, r7
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	f7ff ffda 	bl	8011b46 <__sfputc_r>
 8011b92:	1c43      	adds	r3, r0, #1
 8011b94:	d1f3      	bne.n	8011b7e <__sfputs_r+0xa>
 8011b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011b98 <_vfiprintf_r>:
 8011b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b9c:	460d      	mov	r5, r1
 8011b9e:	b09d      	sub	sp, #116	@ 0x74
 8011ba0:	4614      	mov	r4, r2
 8011ba2:	4698      	mov	r8, r3
 8011ba4:	4606      	mov	r6, r0
 8011ba6:	b118      	cbz	r0, 8011bb0 <_vfiprintf_r+0x18>
 8011ba8:	6a03      	ldr	r3, [r0, #32]
 8011baa:	b90b      	cbnz	r3, 8011bb0 <_vfiprintf_r+0x18>
 8011bac:	f7fe fb7e 	bl	80102ac <__sinit>
 8011bb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bb2:	07d9      	lsls	r1, r3, #31
 8011bb4:	d405      	bmi.n	8011bc2 <_vfiprintf_r+0x2a>
 8011bb6:	89ab      	ldrh	r3, [r5, #12]
 8011bb8:	059a      	lsls	r2, r3, #22
 8011bba:	d402      	bmi.n	8011bc2 <_vfiprintf_r+0x2a>
 8011bbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bbe:	f7fe fc7c 	bl	80104ba <__retarget_lock_acquire_recursive>
 8011bc2:	89ab      	ldrh	r3, [r5, #12]
 8011bc4:	071b      	lsls	r3, r3, #28
 8011bc6:	d501      	bpl.n	8011bcc <_vfiprintf_r+0x34>
 8011bc8:	692b      	ldr	r3, [r5, #16]
 8011bca:	b99b      	cbnz	r3, 8011bf4 <_vfiprintf_r+0x5c>
 8011bcc:	4629      	mov	r1, r5
 8011bce:	4630      	mov	r0, r6
 8011bd0:	f000 f938 	bl	8011e44 <__swsetup_r>
 8011bd4:	b170      	cbz	r0, 8011bf4 <_vfiprintf_r+0x5c>
 8011bd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bd8:	07dc      	lsls	r4, r3, #31
 8011bda:	d504      	bpl.n	8011be6 <_vfiprintf_r+0x4e>
 8011bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8011be0:	b01d      	add	sp, #116	@ 0x74
 8011be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be6:	89ab      	ldrh	r3, [r5, #12]
 8011be8:	0598      	lsls	r0, r3, #22
 8011bea:	d4f7      	bmi.n	8011bdc <_vfiprintf_r+0x44>
 8011bec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bee:	f7fe fc65 	bl	80104bc <__retarget_lock_release_recursive>
 8011bf2:	e7f3      	b.n	8011bdc <_vfiprintf_r+0x44>
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8011bf8:	2320      	movs	r3, #32
 8011bfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c02:	2330      	movs	r3, #48	@ 0x30
 8011c04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011db4 <_vfiprintf_r+0x21c>
 8011c08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c0c:	f04f 0901 	mov.w	r9, #1
 8011c10:	4623      	mov	r3, r4
 8011c12:	469a      	mov	sl, r3
 8011c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c18:	b10a      	cbz	r2, 8011c1e <_vfiprintf_r+0x86>
 8011c1a:	2a25      	cmp	r2, #37	@ 0x25
 8011c1c:	d1f9      	bne.n	8011c12 <_vfiprintf_r+0x7a>
 8011c1e:	ebba 0b04 	subs.w	fp, sl, r4
 8011c22:	d00b      	beq.n	8011c3c <_vfiprintf_r+0xa4>
 8011c24:	465b      	mov	r3, fp
 8011c26:	4622      	mov	r2, r4
 8011c28:	4629      	mov	r1, r5
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	f7ff ffa2 	bl	8011b74 <__sfputs_r>
 8011c30:	3001      	adds	r0, #1
 8011c32:	f000 80a7 	beq.w	8011d84 <_vfiprintf_r+0x1ec>
 8011c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c38:	445a      	add	r2, fp
 8011c3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	f000 809f 	beq.w	8011d84 <_vfiprintf_r+0x1ec>
 8011c46:	2300      	movs	r3, #0
 8011c48:	f04f 32ff 	mov.w	r2, #4294967295
 8011c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c50:	f10a 0a01 	add.w	sl, sl, #1
 8011c54:	9304      	str	r3, [sp, #16]
 8011c56:	9307      	str	r3, [sp, #28]
 8011c58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011c5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c5e:	4654      	mov	r4, sl
 8011c60:	2205      	movs	r2, #5
 8011c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c66:	4853      	ldr	r0, [pc, #332]	@ (8011db4 <_vfiprintf_r+0x21c>)
 8011c68:	f7ee fada 	bl	8000220 <memchr>
 8011c6c:	9a04      	ldr	r2, [sp, #16]
 8011c6e:	b9d8      	cbnz	r0, 8011ca8 <_vfiprintf_r+0x110>
 8011c70:	06d1      	lsls	r1, r2, #27
 8011c72:	bf44      	itt	mi
 8011c74:	2320      	movmi	r3, #32
 8011c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c7a:	0713      	lsls	r3, r2, #28
 8011c7c:	bf44      	itt	mi
 8011c7e:	232b      	movmi	r3, #43	@ 0x2b
 8011c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c84:	f89a 3000 	ldrb.w	r3, [sl]
 8011c88:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c8a:	d015      	beq.n	8011cb8 <_vfiprintf_r+0x120>
 8011c8c:	9a07      	ldr	r2, [sp, #28]
 8011c8e:	4654      	mov	r4, sl
 8011c90:	2000      	movs	r0, #0
 8011c92:	f04f 0c0a 	mov.w	ip, #10
 8011c96:	4621      	mov	r1, r4
 8011c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c9c:	3b30      	subs	r3, #48	@ 0x30
 8011c9e:	2b09      	cmp	r3, #9
 8011ca0:	d94b      	bls.n	8011d3a <_vfiprintf_r+0x1a2>
 8011ca2:	b1b0      	cbz	r0, 8011cd2 <_vfiprintf_r+0x13a>
 8011ca4:	9207      	str	r2, [sp, #28]
 8011ca6:	e014      	b.n	8011cd2 <_vfiprintf_r+0x13a>
 8011ca8:	eba0 0308 	sub.w	r3, r0, r8
 8011cac:	fa09 f303 	lsl.w	r3, r9, r3
 8011cb0:	4313      	orrs	r3, r2
 8011cb2:	9304      	str	r3, [sp, #16]
 8011cb4:	46a2      	mov	sl, r4
 8011cb6:	e7d2      	b.n	8011c5e <_vfiprintf_r+0xc6>
 8011cb8:	9b03      	ldr	r3, [sp, #12]
 8011cba:	1d19      	adds	r1, r3, #4
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	9103      	str	r1, [sp, #12]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	bfbb      	ittet	lt
 8011cc4:	425b      	neglt	r3, r3
 8011cc6:	f042 0202 	orrlt.w	r2, r2, #2
 8011cca:	9307      	strge	r3, [sp, #28]
 8011ccc:	9307      	strlt	r3, [sp, #28]
 8011cce:	bfb8      	it	lt
 8011cd0:	9204      	strlt	r2, [sp, #16]
 8011cd2:	7823      	ldrb	r3, [r4, #0]
 8011cd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8011cd6:	d10a      	bne.n	8011cee <_vfiprintf_r+0x156>
 8011cd8:	7863      	ldrb	r3, [r4, #1]
 8011cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cdc:	d132      	bne.n	8011d44 <_vfiprintf_r+0x1ac>
 8011cde:	9b03      	ldr	r3, [sp, #12]
 8011ce0:	1d1a      	adds	r2, r3, #4
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	9203      	str	r2, [sp, #12]
 8011ce6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011cea:	3402      	adds	r4, #2
 8011cec:	9305      	str	r3, [sp, #20]
 8011cee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011dc4 <_vfiprintf_r+0x22c>
 8011cf2:	7821      	ldrb	r1, [r4, #0]
 8011cf4:	2203      	movs	r2, #3
 8011cf6:	4650      	mov	r0, sl
 8011cf8:	f7ee fa92 	bl	8000220 <memchr>
 8011cfc:	b138      	cbz	r0, 8011d0e <_vfiprintf_r+0x176>
 8011cfe:	9b04      	ldr	r3, [sp, #16]
 8011d00:	eba0 000a 	sub.w	r0, r0, sl
 8011d04:	2240      	movs	r2, #64	@ 0x40
 8011d06:	4082      	lsls	r2, r0
 8011d08:	4313      	orrs	r3, r2
 8011d0a:	3401      	adds	r4, #1
 8011d0c:	9304      	str	r3, [sp, #16]
 8011d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d12:	4829      	ldr	r0, [pc, #164]	@ (8011db8 <_vfiprintf_r+0x220>)
 8011d14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d18:	2206      	movs	r2, #6
 8011d1a:	f7ee fa81 	bl	8000220 <memchr>
 8011d1e:	2800      	cmp	r0, #0
 8011d20:	d03f      	beq.n	8011da2 <_vfiprintf_r+0x20a>
 8011d22:	4b26      	ldr	r3, [pc, #152]	@ (8011dbc <_vfiprintf_r+0x224>)
 8011d24:	bb1b      	cbnz	r3, 8011d6e <_vfiprintf_r+0x1d6>
 8011d26:	9b03      	ldr	r3, [sp, #12]
 8011d28:	3307      	adds	r3, #7
 8011d2a:	f023 0307 	bic.w	r3, r3, #7
 8011d2e:	3308      	adds	r3, #8
 8011d30:	9303      	str	r3, [sp, #12]
 8011d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d34:	443b      	add	r3, r7
 8011d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d38:	e76a      	b.n	8011c10 <_vfiprintf_r+0x78>
 8011d3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d3e:	460c      	mov	r4, r1
 8011d40:	2001      	movs	r0, #1
 8011d42:	e7a8      	b.n	8011c96 <_vfiprintf_r+0xfe>
 8011d44:	2300      	movs	r3, #0
 8011d46:	3401      	adds	r4, #1
 8011d48:	9305      	str	r3, [sp, #20]
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	f04f 0c0a 	mov.w	ip, #10
 8011d50:	4620      	mov	r0, r4
 8011d52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d56:	3a30      	subs	r2, #48	@ 0x30
 8011d58:	2a09      	cmp	r2, #9
 8011d5a:	d903      	bls.n	8011d64 <_vfiprintf_r+0x1cc>
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d0c6      	beq.n	8011cee <_vfiprintf_r+0x156>
 8011d60:	9105      	str	r1, [sp, #20]
 8011d62:	e7c4      	b.n	8011cee <_vfiprintf_r+0x156>
 8011d64:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d68:	4604      	mov	r4, r0
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	e7f0      	b.n	8011d50 <_vfiprintf_r+0x1b8>
 8011d6e:	ab03      	add	r3, sp, #12
 8011d70:	9300      	str	r3, [sp, #0]
 8011d72:	462a      	mov	r2, r5
 8011d74:	4b12      	ldr	r3, [pc, #72]	@ (8011dc0 <_vfiprintf_r+0x228>)
 8011d76:	a904      	add	r1, sp, #16
 8011d78:	4630      	mov	r0, r6
 8011d7a:	f7fd fe55 	bl	800fa28 <_printf_float>
 8011d7e:	4607      	mov	r7, r0
 8011d80:	1c78      	adds	r0, r7, #1
 8011d82:	d1d6      	bne.n	8011d32 <_vfiprintf_r+0x19a>
 8011d84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d86:	07d9      	lsls	r1, r3, #31
 8011d88:	d405      	bmi.n	8011d96 <_vfiprintf_r+0x1fe>
 8011d8a:	89ab      	ldrh	r3, [r5, #12]
 8011d8c:	059a      	lsls	r2, r3, #22
 8011d8e:	d402      	bmi.n	8011d96 <_vfiprintf_r+0x1fe>
 8011d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d92:	f7fe fb93 	bl	80104bc <__retarget_lock_release_recursive>
 8011d96:	89ab      	ldrh	r3, [r5, #12]
 8011d98:	065b      	lsls	r3, r3, #25
 8011d9a:	f53f af1f 	bmi.w	8011bdc <_vfiprintf_r+0x44>
 8011d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011da0:	e71e      	b.n	8011be0 <_vfiprintf_r+0x48>
 8011da2:	ab03      	add	r3, sp, #12
 8011da4:	9300      	str	r3, [sp, #0]
 8011da6:	462a      	mov	r2, r5
 8011da8:	4b05      	ldr	r3, [pc, #20]	@ (8011dc0 <_vfiprintf_r+0x228>)
 8011daa:	a904      	add	r1, sp, #16
 8011dac:	4630      	mov	r0, r6
 8011dae:	f7fe f8d3 	bl	800ff58 <_printf_i>
 8011db2:	e7e4      	b.n	8011d7e <_vfiprintf_r+0x1e6>
 8011db4:	08012760 	.word	0x08012760
 8011db8:	0801276a 	.word	0x0801276a
 8011dbc:	0800fa29 	.word	0x0800fa29
 8011dc0:	08011b75 	.word	0x08011b75
 8011dc4:	08012766 	.word	0x08012766

08011dc8 <__swbuf_r>:
 8011dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dca:	460e      	mov	r6, r1
 8011dcc:	4614      	mov	r4, r2
 8011dce:	4605      	mov	r5, r0
 8011dd0:	b118      	cbz	r0, 8011dda <__swbuf_r+0x12>
 8011dd2:	6a03      	ldr	r3, [r0, #32]
 8011dd4:	b90b      	cbnz	r3, 8011dda <__swbuf_r+0x12>
 8011dd6:	f7fe fa69 	bl	80102ac <__sinit>
 8011dda:	69a3      	ldr	r3, [r4, #24]
 8011ddc:	60a3      	str	r3, [r4, #8]
 8011dde:	89a3      	ldrh	r3, [r4, #12]
 8011de0:	071a      	lsls	r2, r3, #28
 8011de2:	d501      	bpl.n	8011de8 <__swbuf_r+0x20>
 8011de4:	6923      	ldr	r3, [r4, #16]
 8011de6:	b943      	cbnz	r3, 8011dfa <__swbuf_r+0x32>
 8011de8:	4621      	mov	r1, r4
 8011dea:	4628      	mov	r0, r5
 8011dec:	f000 f82a 	bl	8011e44 <__swsetup_r>
 8011df0:	b118      	cbz	r0, 8011dfa <__swbuf_r+0x32>
 8011df2:	f04f 37ff 	mov.w	r7, #4294967295
 8011df6:	4638      	mov	r0, r7
 8011df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dfa:	6823      	ldr	r3, [r4, #0]
 8011dfc:	6922      	ldr	r2, [r4, #16]
 8011dfe:	1a98      	subs	r0, r3, r2
 8011e00:	6963      	ldr	r3, [r4, #20]
 8011e02:	b2f6      	uxtb	r6, r6
 8011e04:	4283      	cmp	r3, r0
 8011e06:	4637      	mov	r7, r6
 8011e08:	dc05      	bgt.n	8011e16 <__swbuf_r+0x4e>
 8011e0a:	4621      	mov	r1, r4
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	f7ff fe07 	bl	8011a20 <_fflush_r>
 8011e12:	2800      	cmp	r0, #0
 8011e14:	d1ed      	bne.n	8011df2 <__swbuf_r+0x2a>
 8011e16:	68a3      	ldr	r3, [r4, #8]
 8011e18:	3b01      	subs	r3, #1
 8011e1a:	60a3      	str	r3, [r4, #8]
 8011e1c:	6823      	ldr	r3, [r4, #0]
 8011e1e:	1c5a      	adds	r2, r3, #1
 8011e20:	6022      	str	r2, [r4, #0]
 8011e22:	701e      	strb	r6, [r3, #0]
 8011e24:	6962      	ldr	r2, [r4, #20]
 8011e26:	1c43      	adds	r3, r0, #1
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d004      	beq.n	8011e36 <__swbuf_r+0x6e>
 8011e2c:	89a3      	ldrh	r3, [r4, #12]
 8011e2e:	07db      	lsls	r3, r3, #31
 8011e30:	d5e1      	bpl.n	8011df6 <__swbuf_r+0x2e>
 8011e32:	2e0a      	cmp	r6, #10
 8011e34:	d1df      	bne.n	8011df6 <__swbuf_r+0x2e>
 8011e36:	4621      	mov	r1, r4
 8011e38:	4628      	mov	r0, r5
 8011e3a:	f7ff fdf1 	bl	8011a20 <_fflush_r>
 8011e3e:	2800      	cmp	r0, #0
 8011e40:	d0d9      	beq.n	8011df6 <__swbuf_r+0x2e>
 8011e42:	e7d6      	b.n	8011df2 <__swbuf_r+0x2a>

08011e44 <__swsetup_r>:
 8011e44:	b538      	push	{r3, r4, r5, lr}
 8011e46:	4b29      	ldr	r3, [pc, #164]	@ (8011eec <__swsetup_r+0xa8>)
 8011e48:	4605      	mov	r5, r0
 8011e4a:	6818      	ldr	r0, [r3, #0]
 8011e4c:	460c      	mov	r4, r1
 8011e4e:	b118      	cbz	r0, 8011e58 <__swsetup_r+0x14>
 8011e50:	6a03      	ldr	r3, [r0, #32]
 8011e52:	b90b      	cbnz	r3, 8011e58 <__swsetup_r+0x14>
 8011e54:	f7fe fa2a 	bl	80102ac <__sinit>
 8011e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e5c:	0719      	lsls	r1, r3, #28
 8011e5e:	d422      	bmi.n	8011ea6 <__swsetup_r+0x62>
 8011e60:	06da      	lsls	r2, r3, #27
 8011e62:	d407      	bmi.n	8011e74 <__swsetup_r+0x30>
 8011e64:	2209      	movs	r2, #9
 8011e66:	602a      	str	r2, [r5, #0]
 8011e68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e6c:	81a3      	strh	r3, [r4, #12]
 8011e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e72:	e033      	b.n	8011edc <__swsetup_r+0x98>
 8011e74:	0758      	lsls	r0, r3, #29
 8011e76:	d512      	bpl.n	8011e9e <__swsetup_r+0x5a>
 8011e78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e7a:	b141      	cbz	r1, 8011e8e <__swsetup_r+0x4a>
 8011e7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e80:	4299      	cmp	r1, r3
 8011e82:	d002      	beq.n	8011e8a <__swsetup_r+0x46>
 8011e84:	4628      	mov	r0, r5
 8011e86:	f7ff f983 	bl	8011190 <_free_r>
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011e8e:	89a3      	ldrh	r3, [r4, #12]
 8011e90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011e94:	81a3      	strh	r3, [r4, #12]
 8011e96:	2300      	movs	r3, #0
 8011e98:	6063      	str	r3, [r4, #4]
 8011e9a:	6923      	ldr	r3, [r4, #16]
 8011e9c:	6023      	str	r3, [r4, #0]
 8011e9e:	89a3      	ldrh	r3, [r4, #12]
 8011ea0:	f043 0308 	orr.w	r3, r3, #8
 8011ea4:	81a3      	strh	r3, [r4, #12]
 8011ea6:	6923      	ldr	r3, [r4, #16]
 8011ea8:	b94b      	cbnz	r3, 8011ebe <__swsetup_r+0x7a>
 8011eaa:	89a3      	ldrh	r3, [r4, #12]
 8011eac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011eb4:	d003      	beq.n	8011ebe <__swsetup_r+0x7a>
 8011eb6:	4621      	mov	r1, r4
 8011eb8:	4628      	mov	r0, r5
 8011eba:	f000 f883 	bl	8011fc4 <__smakebuf_r>
 8011ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ec2:	f013 0201 	ands.w	r2, r3, #1
 8011ec6:	d00a      	beq.n	8011ede <__swsetup_r+0x9a>
 8011ec8:	2200      	movs	r2, #0
 8011eca:	60a2      	str	r2, [r4, #8]
 8011ecc:	6962      	ldr	r2, [r4, #20]
 8011ece:	4252      	negs	r2, r2
 8011ed0:	61a2      	str	r2, [r4, #24]
 8011ed2:	6922      	ldr	r2, [r4, #16]
 8011ed4:	b942      	cbnz	r2, 8011ee8 <__swsetup_r+0xa4>
 8011ed6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011eda:	d1c5      	bne.n	8011e68 <__swsetup_r+0x24>
 8011edc:	bd38      	pop	{r3, r4, r5, pc}
 8011ede:	0799      	lsls	r1, r3, #30
 8011ee0:	bf58      	it	pl
 8011ee2:	6962      	ldrpl	r2, [r4, #20]
 8011ee4:	60a2      	str	r2, [r4, #8]
 8011ee6:	e7f4      	b.n	8011ed2 <__swsetup_r+0x8e>
 8011ee8:	2000      	movs	r0, #0
 8011eea:	e7f7      	b.n	8011edc <__swsetup_r+0x98>
 8011eec:	20000118 	.word	0x20000118

08011ef0 <_raise_r>:
 8011ef0:	291f      	cmp	r1, #31
 8011ef2:	b538      	push	{r3, r4, r5, lr}
 8011ef4:	4605      	mov	r5, r0
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	d904      	bls.n	8011f04 <_raise_r+0x14>
 8011efa:	2316      	movs	r3, #22
 8011efc:	6003      	str	r3, [r0, #0]
 8011efe:	f04f 30ff 	mov.w	r0, #4294967295
 8011f02:	bd38      	pop	{r3, r4, r5, pc}
 8011f04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011f06:	b112      	cbz	r2, 8011f0e <_raise_r+0x1e>
 8011f08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f0c:	b94b      	cbnz	r3, 8011f22 <_raise_r+0x32>
 8011f0e:	4628      	mov	r0, r5
 8011f10:	f000 f830 	bl	8011f74 <_getpid_r>
 8011f14:	4622      	mov	r2, r4
 8011f16:	4601      	mov	r1, r0
 8011f18:	4628      	mov	r0, r5
 8011f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f1e:	f000 b817 	b.w	8011f50 <_kill_r>
 8011f22:	2b01      	cmp	r3, #1
 8011f24:	d00a      	beq.n	8011f3c <_raise_r+0x4c>
 8011f26:	1c59      	adds	r1, r3, #1
 8011f28:	d103      	bne.n	8011f32 <_raise_r+0x42>
 8011f2a:	2316      	movs	r3, #22
 8011f2c:	6003      	str	r3, [r0, #0]
 8011f2e:	2001      	movs	r0, #1
 8011f30:	e7e7      	b.n	8011f02 <_raise_r+0x12>
 8011f32:	2100      	movs	r1, #0
 8011f34:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011f38:	4620      	mov	r0, r4
 8011f3a:	4798      	blx	r3
 8011f3c:	2000      	movs	r0, #0
 8011f3e:	e7e0      	b.n	8011f02 <_raise_r+0x12>

08011f40 <raise>:
 8011f40:	4b02      	ldr	r3, [pc, #8]	@ (8011f4c <raise+0xc>)
 8011f42:	4601      	mov	r1, r0
 8011f44:	6818      	ldr	r0, [r3, #0]
 8011f46:	f7ff bfd3 	b.w	8011ef0 <_raise_r>
 8011f4a:	bf00      	nop
 8011f4c:	20000118 	.word	0x20000118

08011f50 <_kill_r>:
 8011f50:	b538      	push	{r3, r4, r5, lr}
 8011f52:	4d07      	ldr	r5, [pc, #28]	@ (8011f70 <_kill_r+0x20>)
 8011f54:	2300      	movs	r3, #0
 8011f56:	4604      	mov	r4, r0
 8011f58:	4608      	mov	r0, r1
 8011f5a:	4611      	mov	r1, r2
 8011f5c:	602b      	str	r3, [r5, #0]
 8011f5e:	f7f1 fc8d 	bl	800387c <_kill>
 8011f62:	1c43      	adds	r3, r0, #1
 8011f64:	d102      	bne.n	8011f6c <_kill_r+0x1c>
 8011f66:	682b      	ldr	r3, [r5, #0]
 8011f68:	b103      	cbz	r3, 8011f6c <_kill_r+0x1c>
 8011f6a:	6023      	str	r3, [r4, #0]
 8011f6c:	bd38      	pop	{r3, r4, r5, pc}
 8011f6e:	bf00      	nop
 8011f70:	20002364 	.word	0x20002364

08011f74 <_getpid_r>:
 8011f74:	f7f1 bc7a 	b.w	800386c <_getpid>

08011f78 <__swhatbuf_r>:
 8011f78:	b570      	push	{r4, r5, r6, lr}
 8011f7a:	460c      	mov	r4, r1
 8011f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f80:	2900      	cmp	r1, #0
 8011f82:	b096      	sub	sp, #88	@ 0x58
 8011f84:	4615      	mov	r5, r2
 8011f86:	461e      	mov	r6, r3
 8011f88:	da0d      	bge.n	8011fa6 <__swhatbuf_r+0x2e>
 8011f8a:	89a3      	ldrh	r3, [r4, #12]
 8011f8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011f90:	f04f 0100 	mov.w	r1, #0
 8011f94:	bf14      	ite	ne
 8011f96:	2340      	movne	r3, #64	@ 0x40
 8011f98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011f9c:	2000      	movs	r0, #0
 8011f9e:	6031      	str	r1, [r6, #0]
 8011fa0:	602b      	str	r3, [r5, #0]
 8011fa2:	b016      	add	sp, #88	@ 0x58
 8011fa4:	bd70      	pop	{r4, r5, r6, pc}
 8011fa6:	466a      	mov	r2, sp
 8011fa8:	f000 f848 	bl	801203c <_fstat_r>
 8011fac:	2800      	cmp	r0, #0
 8011fae:	dbec      	blt.n	8011f8a <__swhatbuf_r+0x12>
 8011fb0:	9901      	ldr	r1, [sp, #4]
 8011fb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011fb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011fba:	4259      	negs	r1, r3
 8011fbc:	4159      	adcs	r1, r3
 8011fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011fc2:	e7eb      	b.n	8011f9c <__swhatbuf_r+0x24>

08011fc4 <__smakebuf_r>:
 8011fc4:	898b      	ldrh	r3, [r1, #12]
 8011fc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fc8:	079d      	lsls	r5, r3, #30
 8011fca:	4606      	mov	r6, r0
 8011fcc:	460c      	mov	r4, r1
 8011fce:	d507      	bpl.n	8011fe0 <__smakebuf_r+0x1c>
 8011fd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011fd4:	6023      	str	r3, [r4, #0]
 8011fd6:	6123      	str	r3, [r4, #16]
 8011fd8:	2301      	movs	r3, #1
 8011fda:	6163      	str	r3, [r4, #20]
 8011fdc:	b003      	add	sp, #12
 8011fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fe0:	ab01      	add	r3, sp, #4
 8011fe2:	466a      	mov	r2, sp
 8011fe4:	f7ff ffc8 	bl	8011f78 <__swhatbuf_r>
 8011fe8:	9f00      	ldr	r7, [sp, #0]
 8011fea:	4605      	mov	r5, r0
 8011fec:	4639      	mov	r1, r7
 8011fee:	4630      	mov	r0, r6
 8011ff0:	f7fd fbee 	bl	800f7d0 <_malloc_r>
 8011ff4:	b948      	cbnz	r0, 801200a <__smakebuf_r+0x46>
 8011ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ffa:	059a      	lsls	r2, r3, #22
 8011ffc:	d4ee      	bmi.n	8011fdc <__smakebuf_r+0x18>
 8011ffe:	f023 0303 	bic.w	r3, r3, #3
 8012002:	f043 0302 	orr.w	r3, r3, #2
 8012006:	81a3      	strh	r3, [r4, #12]
 8012008:	e7e2      	b.n	8011fd0 <__smakebuf_r+0xc>
 801200a:	89a3      	ldrh	r3, [r4, #12]
 801200c:	6020      	str	r0, [r4, #0]
 801200e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012012:	81a3      	strh	r3, [r4, #12]
 8012014:	9b01      	ldr	r3, [sp, #4]
 8012016:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801201a:	b15b      	cbz	r3, 8012034 <__smakebuf_r+0x70>
 801201c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012020:	4630      	mov	r0, r6
 8012022:	f000 f81d 	bl	8012060 <_isatty_r>
 8012026:	b128      	cbz	r0, 8012034 <__smakebuf_r+0x70>
 8012028:	89a3      	ldrh	r3, [r4, #12]
 801202a:	f023 0303 	bic.w	r3, r3, #3
 801202e:	f043 0301 	orr.w	r3, r3, #1
 8012032:	81a3      	strh	r3, [r4, #12]
 8012034:	89a3      	ldrh	r3, [r4, #12]
 8012036:	431d      	orrs	r5, r3
 8012038:	81a5      	strh	r5, [r4, #12]
 801203a:	e7cf      	b.n	8011fdc <__smakebuf_r+0x18>

0801203c <_fstat_r>:
 801203c:	b538      	push	{r3, r4, r5, lr}
 801203e:	4d07      	ldr	r5, [pc, #28]	@ (801205c <_fstat_r+0x20>)
 8012040:	2300      	movs	r3, #0
 8012042:	4604      	mov	r4, r0
 8012044:	4608      	mov	r0, r1
 8012046:	4611      	mov	r1, r2
 8012048:	602b      	str	r3, [r5, #0]
 801204a:	f7f1 fc77 	bl	800393c <_fstat>
 801204e:	1c43      	adds	r3, r0, #1
 8012050:	d102      	bne.n	8012058 <_fstat_r+0x1c>
 8012052:	682b      	ldr	r3, [r5, #0]
 8012054:	b103      	cbz	r3, 8012058 <_fstat_r+0x1c>
 8012056:	6023      	str	r3, [r4, #0]
 8012058:	bd38      	pop	{r3, r4, r5, pc}
 801205a:	bf00      	nop
 801205c:	20002364 	.word	0x20002364

08012060 <_isatty_r>:
 8012060:	b538      	push	{r3, r4, r5, lr}
 8012062:	4d06      	ldr	r5, [pc, #24]	@ (801207c <_isatty_r+0x1c>)
 8012064:	2300      	movs	r3, #0
 8012066:	4604      	mov	r4, r0
 8012068:	4608      	mov	r0, r1
 801206a:	602b      	str	r3, [r5, #0]
 801206c:	f7f1 fc76 	bl	800395c <_isatty>
 8012070:	1c43      	adds	r3, r0, #1
 8012072:	d102      	bne.n	801207a <_isatty_r+0x1a>
 8012074:	682b      	ldr	r3, [r5, #0]
 8012076:	b103      	cbz	r3, 801207a <_isatty_r+0x1a>
 8012078:	6023      	str	r3, [r4, #0]
 801207a:	bd38      	pop	{r3, r4, r5, pc}
 801207c:	20002364 	.word	0x20002364

08012080 <sqrt>:
 8012080:	b538      	push	{r3, r4, r5, lr}
 8012082:	ed2d 8b02 	vpush	{d8}
 8012086:	ec55 4b10 	vmov	r4, r5, d0
 801208a:	f000 f82f 	bl	80120ec <__ieee754_sqrt>
 801208e:	4622      	mov	r2, r4
 8012090:	462b      	mov	r3, r5
 8012092:	4620      	mov	r0, r4
 8012094:	4629      	mov	r1, r5
 8012096:	eeb0 8a40 	vmov.f32	s16, s0
 801209a:	eef0 8a60 	vmov.f32	s17, s1
 801209e:	f7ee fd6d 	bl	8000b7c <__aeabi_dcmpun>
 80120a2:	b990      	cbnz	r0, 80120ca <sqrt+0x4a>
 80120a4:	2200      	movs	r2, #0
 80120a6:	2300      	movs	r3, #0
 80120a8:	4620      	mov	r0, r4
 80120aa:	4629      	mov	r1, r5
 80120ac:	f7ee fd3e 	bl	8000b2c <__aeabi_dcmplt>
 80120b0:	b158      	cbz	r0, 80120ca <sqrt+0x4a>
 80120b2:	f7fe f9d7 	bl	8010464 <__errno>
 80120b6:	2321      	movs	r3, #33	@ 0x21
 80120b8:	6003      	str	r3, [r0, #0]
 80120ba:	2200      	movs	r2, #0
 80120bc:	2300      	movs	r3, #0
 80120be:	4610      	mov	r0, r2
 80120c0:	4619      	mov	r1, r3
 80120c2:	f7ee fbeb 	bl	800089c <__aeabi_ddiv>
 80120c6:	ec41 0b18 	vmov	d8, r0, r1
 80120ca:	eeb0 0a48 	vmov.f32	s0, s16
 80120ce:	eef0 0a68 	vmov.f32	s1, s17
 80120d2:	ecbd 8b02 	vpop	{d8}
 80120d6:	bd38      	pop	{r3, r4, r5, pc}

080120d8 <atan2f>:
 80120d8:	f000 b8de 	b.w	8012298 <__ieee754_atan2f>

080120dc <fabsf>:
 80120dc:	ee10 3a10 	vmov	r3, s0
 80120e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80120e4:	ee00 3a10 	vmov	s0, r3
 80120e8:	4770      	bx	lr
	...

080120ec <__ieee754_sqrt>:
 80120ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f0:	4a66      	ldr	r2, [pc, #408]	@ (801228c <__ieee754_sqrt+0x1a0>)
 80120f2:	ec55 4b10 	vmov	r4, r5, d0
 80120f6:	43aa      	bics	r2, r5
 80120f8:	462b      	mov	r3, r5
 80120fa:	4621      	mov	r1, r4
 80120fc:	d110      	bne.n	8012120 <__ieee754_sqrt+0x34>
 80120fe:	4622      	mov	r2, r4
 8012100:	4620      	mov	r0, r4
 8012102:	4629      	mov	r1, r5
 8012104:	f7ee faa0 	bl	8000648 <__aeabi_dmul>
 8012108:	4602      	mov	r2, r0
 801210a:	460b      	mov	r3, r1
 801210c:	4620      	mov	r0, r4
 801210e:	4629      	mov	r1, r5
 8012110:	f7ee f8e4 	bl	80002dc <__adddf3>
 8012114:	4604      	mov	r4, r0
 8012116:	460d      	mov	r5, r1
 8012118:	ec45 4b10 	vmov	d0, r4, r5
 801211c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012120:	2d00      	cmp	r5, #0
 8012122:	dc0e      	bgt.n	8012142 <__ieee754_sqrt+0x56>
 8012124:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012128:	4322      	orrs	r2, r4
 801212a:	d0f5      	beq.n	8012118 <__ieee754_sqrt+0x2c>
 801212c:	b19d      	cbz	r5, 8012156 <__ieee754_sqrt+0x6a>
 801212e:	4622      	mov	r2, r4
 8012130:	4620      	mov	r0, r4
 8012132:	4629      	mov	r1, r5
 8012134:	f7ee f8d0 	bl	80002d8 <__aeabi_dsub>
 8012138:	4602      	mov	r2, r0
 801213a:	460b      	mov	r3, r1
 801213c:	f7ee fbae 	bl	800089c <__aeabi_ddiv>
 8012140:	e7e8      	b.n	8012114 <__ieee754_sqrt+0x28>
 8012142:	152a      	asrs	r2, r5, #20
 8012144:	d115      	bne.n	8012172 <__ieee754_sqrt+0x86>
 8012146:	2000      	movs	r0, #0
 8012148:	e009      	b.n	801215e <__ieee754_sqrt+0x72>
 801214a:	0acb      	lsrs	r3, r1, #11
 801214c:	3a15      	subs	r2, #21
 801214e:	0549      	lsls	r1, r1, #21
 8012150:	2b00      	cmp	r3, #0
 8012152:	d0fa      	beq.n	801214a <__ieee754_sqrt+0x5e>
 8012154:	e7f7      	b.n	8012146 <__ieee754_sqrt+0x5a>
 8012156:	462a      	mov	r2, r5
 8012158:	e7fa      	b.n	8012150 <__ieee754_sqrt+0x64>
 801215a:	005b      	lsls	r3, r3, #1
 801215c:	3001      	adds	r0, #1
 801215e:	02dc      	lsls	r4, r3, #11
 8012160:	d5fb      	bpl.n	801215a <__ieee754_sqrt+0x6e>
 8012162:	1e44      	subs	r4, r0, #1
 8012164:	1b12      	subs	r2, r2, r4
 8012166:	f1c0 0420 	rsb	r4, r0, #32
 801216a:	fa21 f404 	lsr.w	r4, r1, r4
 801216e:	4323      	orrs	r3, r4
 8012170:	4081      	lsls	r1, r0
 8012172:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012176:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801217a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801217e:	07d2      	lsls	r2, r2, #31
 8012180:	bf5c      	itt	pl
 8012182:	005b      	lslpl	r3, r3, #1
 8012184:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012188:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801218c:	bf58      	it	pl
 801218e:	0049      	lslpl	r1, r1, #1
 8012190:	2600      	movs	r6, #0
 8012192:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012196:	107f      	asrs	r7, r7, #1
 8012198:	0049      	lsls	r1, r1, #1
 801219a:	2016      	movs	r0, #22
 801219c:	4632      	mov	r2, r6
 801219e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80121a2:	1915      	adds	r5, r2, r4
 80121a4:	429d      	cmp	r5, r3
 80121a6:	bfde      	ittt	le
 80121a8:	192a      	addle	r2, r5, r4
 80121aa:	1b5b      	suble	r3, r3, r5
 80121ac:	1936      	addle	r6, r6, r4
 80121ae:	0fcd      	lsrs	r5, r1, #31
 80121b0:	3801      	subs	r0, #1
 80121b2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80121b6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80121ba:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80121be:	d1f0      	bne.n	80121a2 <__ieee754_sqrt+0xb6>
 80121c0:	4605      	mov	r5, r0
 80121c2:	2420      	movs	r4, #32
 80121c4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80121c8:	4293      	cmp	r3, r2
 80121ca:	eb0c 0e00 	add.w	lr, ip, r0
 80121ce:	dc02      	bgt.n	80121d6 <__ieee754_sqrt+0xea>
 80121d0:	d113      	bne.n	80121fa <__ieee754_sqrt+0x10e>
 80121d2:	458e      	cmp	lr, r1
 80121d4:	d811      	bhi.n	80121fa <__ieee754_sqrt+0x10e>
 80121d6:	f1be 0f00 	cmp.w	lr, #0
 80121da:	eb0e 000c 	add.w	r0, lr, ip
 80121de:	da3f      	bge.n	8012260 <__ieee754_sqrt+0x174>
 80121e0:	2800      	cmp	r0, #0
 80121e2:	db3d      	blt.n	8012260 <__ieee754_sqrt+0x174>
 80121e4:	f102 0801 	add.w	r8, r2, #1
 80121e8:	1a9b      	subs	r3, r3, r2
 80121ea:	458e      	cmp	lr, r1
 80121ec:	bf88      	it	hi
 80121ee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80121f2:	eba1 010e 	sub.w	r1, r1, lr
 80121f6:	4465      	add	r5, ip
 80121f8:	4642      	mov	r2, r8
 80121fa:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80121fe:	3c01      	subs	r4, #1
 8012200:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012204:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012208:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801220c:	d1dc      	bne.n	80121c8 <__ieee754_sqrt+0xdc>
 801220e:	4319      	orrs	r1, r3
 8012210:	d01b      	beq.n	801224a <__ieee754_sqrt+0x15e>
 8012212:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8012290 <__ieee754_sqrt+0x1a4>
 8012216:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8012294 <__ieee754_sqrt+0x1a8>
 801221a:	e9da 0100 	ldrd	r0, r1, [sl]
 801221e:	e9db 2300 	ldrd	r2, r3, [fp]
 8012222:	f7ee f859 	bl	80002d8 <__aeabi_dsub>
 8012226:	e9da 8900 	ldrd	r8, r9, [sl]
 801222a:	4602      	mov	r2, r0
 801222c:	460b      	mov	r3, r1
 801222e:	4640      	mov	r0, r8
 8012230:	4649      	mov	r1, r9
 8012232:	f7ee fc85 	bl	8000b40 <__aeabi_dcmple>
 8012236:	b140      	cbz	r0, 801224a <__ieee754_sqrt+0x15e>
 8012238:	f1b5 3fff 	cmp.w	r5, #4294967295
 801223c:	e9da 0100 	ldrd	r0, r1, [sl]
 8012240:	e9db 2300 	ldrd	r2, r3, [fp]
 8012244:	d10e      	bne.n	8012264 <__ieee754_sqrt+0x178>
 8012246:	3601      	adds	r6, #1
 8012248:	4625      	mov	r5, r4
 801224a:	1073      	asrs	r3, r6, #1
 801224c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8012250:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8012254:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8012258:	086b      	lsrs	r3, r5, #1
 801225a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801225e:	e759      	b.n	8012114 <__ieee754_sqrt+0x28>
 8012260:	4690      	mov	r8, r2
 8012262:	e7c1      	b.n	80121e8 <__ieee754_sqrt+0xfc>
 8012264:	f7ee f83a 	bl	80002dc <__adddf3>
 8012268:	e9da 8900 	ldrd	r8, r9, [sl]
 801226c:	4602      	mov	r2, r0
 801226e:	460b      	mov	r3, r1
 8012270:	4640      	mov	r0, r8
 8012272:	4649      	mov	r1, r9
 8012274:	f7ee fc5a 	bl	8000b2c <__aeabi_dcmplt>
 8012278:	b120      	cbz	r0, 8012284 <__ieee754_sqrt+0x198>
 801227a:	1cab      	adds	r3, r5, #2
 801227c:	bf08      	it	eq
 801227e:	3601      	addeq	r6, #1
 8012280:	3502      	adds	r5, #2
 8012282:	e7e2      	b.n	801224a <__ieee754_sqrt+0x15e>
 8012284:	1c6b      	adds	r3, r5, #1
 8012286:	f023 0501 	bic.w	r5, r3, #1
 801228a:	e7de      	b.n	801224a <__ieee754_sqrt+0x15e>
 801228c:	7ff00000 	.word	0x7ff00000
 8012290:	08012980 	.word	0x08012980
 8012294:	08012978 	.word	0x08012978

08012298 <__ieee754_atan2f>:
 8012298:	ee10 2a90 	vmov	r2, s1
 801229c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80122a0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80122a4:	b510      	push	{r4, lr}
 80122a6:	eef0 7a40 	vmov.f32	s15, s0
 80122aa:	d806      	bhi.n	80122ba <__ieee754_atan2f+0x22>
 80122ac:	ee10 0a10 	vmov	r0, s0
 80122b0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80122b4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80122b8:	d904      	bls.n	80122c4 <__ieee754_atan2f+0x2c>
 80122ba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80122be:	eeb0 0a67 	vmov.f32	s0, s15
 80122c2:	bd10      	pop	{r4, pc}
 80122c4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80122c8:	d103      	bne.n	80122d2 <__ieee754_atan2f+0x3a>
 80122ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122ce:	f000 b883 	b.w	80123d8 <atanf>
 80122d2:	1794      	asrs	r4, r2, #30
 80122d4:	f004 0402 	and.w	r4, r4, #2
 80122d8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80122dc:	b943      	cbnz	r3, 80122f0 <__ieee754_atan2f+0x58>
 80122de:	2c02      	cmp	r4, #2
 80122e0:	d05e      	beq.n	80123a0 <__ieee754_atan2f+0x108>
 80122e2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80123b4 <__ieee754_atan2f+0x11c>
 80122e6:	2c03      	cmp	r4, #3
 80122e8:	bf08      	it	eq
 80122ea:	eef0 7a47 	vmoveq.f32	s15, s14
 80122ee:	e7e6      	b.n	80122be <__ieee754_atan2f+0x26>
 80122f0:	b941      	cbnz	r1, 8012304 <__ieee754_atan2f+0x6c>
 80122f2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80123b8 <__ieee754_atan2f+0x120>
 80122f6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80123bc <__ieee754_atan2f+0x124>
 80122fa:	2800      	cmp	r0, #0
 80122fc:	bfa8      	it	ge
 80122fe:	eef0 7a47 	vmovge.f32	s15, s14
 8012302:	e7dc      	b.n	80122be <__ieee754_atan2f+0x26>
 8012304:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012308:	d110      	bne.n	801232c <__ieee754_atan2f+0x94>
 801230a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801230e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012312:	d107      	bne.n	8012324 <__ieee754_atan2f+0x8c>
 8012314:	2c02      	cmp	r4, #2
 8012316:	d846      	bhi.n	80123a6 <__ieee754_atan2f+0x10e>
 8012318:	4b29      	ldr	r3, [pc, #164]	@ (80123c0 <__ieee754_atan2f+0x128>)
 801231a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801231e:	edd3 7a00 	vldr	s15, [r3]
 8012322:	e7cc      	b.n	80122be <__ieee754_atan2f+0x26>
 8012324:	2c02      	cmp	r4, #2
 8012326:	d841      	bhi.n	80123ac <__ieee754_atan2f+0x114>
 8012328:	4b26      	ldr	r3, [pc, #152]	@ (80123c4 <__ieee754_atan2f+0x12c>)
 801232a:	e7f6      	b.n	801231a <__ieee754_atan2f+0x82>
 801232c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012330:	d0df      	beq.n	80122f2 <__ieee754_atan2f+0x5a>
 8012332:	1a5b      	subs	r3, r3, r1
 8012334:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8012338:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801233c:	da1a      	bge.n	8012374 <__ieee754_atan2f+0xdc>
 801233e:	2a00      	cmp	r2, #0
 8012340:	da01      	bge.n	8012346 <__ieee754_atan2f+0xae>
 8012342:	313c      	adds	r1, #60	@ 0x3c
 8012344:	db19      	blt.n	801237a <__ieee754_atan2f+0xe2>
 8012346:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801234a:	f7ff fec7 	bl	80120dc <fabsf>
 801234e:	f000 f843 	bl	80123d8 <atanf>
 8012352:	eef0 7a40 	vmov.f32	s15, s0
 8012356:	2c01      	cmp	r4, #1
 8012358:	d012      	beq.n	8012380 <__ieee754_atan2f+0xe8>
 801235a:	2c02      	cmp	r4, #2
 801235c:	d017      	beq.n	801238e <__ieee754_atan2f+0xf6>
 801235e:	2c00      	cmp	r4, #0
 8012360:	d0ad      	beq.n	80122be <__ieee754_atan2f+0x26>
 8012362:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80123c8 <__ieee754_atan2f+0x130>
 8012366:	ee77 7a87 	vadd.f32	s15, s15, s14
 801236a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80123cc <__ieee754_atan2f+0x134>
 801236e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012372:	e7a4      	b.n	80122be <__ieee754_atan2f+0x26>
 8012374:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80123bc <__ieee754_atan2f+0x124>
 8012378:	e7ed      	b.n	8012356 <__ieee754_atan2f+0xbe>
 801237a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80123d0 <__ieee754_atan2f+0x138>
 801237e:	e7ea      	b.n	8012356 <__ieee754_atan2f+0xbe>
 8012380:	ee17 3a90 	vmov	r3, s15
 8012384:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8012388:	ee07 3a90 	vmov	s15, r3
 801238c:	e797      	b.n	80122be <__ieee754_atan2f+0x26>
 801238e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80123c8 <__ieee754_atan2f+0x130>
 8012392:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012396:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80123cc <__ieee754_atan2f+0x134>
 801239a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801239e:	e78e      	b.n	80122be <__ieee754_atan2f+0x26>
 80123a0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80123cc <__ieee754_atan2f+0x134>
 80123a4:	e78b      	b.n	80122be <__ieee754_atan2f+0x26>
 80123a6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80123d4 <__ieee754_atan2f+0x13c>
 80123aa:	e788      	b.n	80122be <__ieee754_atan2f+0x26>
 80123ac:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80123d0 <__ieee754_atan2f+0x138>
 80123b0:	e785      	b.n	80122be <__ieee754_atan2f+0x26>
 80123b2:	bf00      	nop
 80123b4:	c0490fdb 	.word	0xc0490fdb
 80123b8:	bfc90fdb 	.word	0xbfc90fdb
 80123bc:	3fc90fdb 	.word	0x3fc90fdb
 80123c0:	08012994 	.word	0x08012994
 80123c4:	08012988 	.word	0x08012988
 80123c8:	33bbbd2e 	.word	0x33bbbd2e
 80123cc:	40490fdb 	.word	0x40490fdb
 80123d0:	00000000 	.word	0x00000000
 80123d4:	3f490fdb 	.word	0x3f490fdb

080123d8 <atanf>:
 80123d8:	b538      	push	{r3, r4, r5, lr}
 80123da:	ee10 5a10 	vmov	r5, s0
 80123de:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80123e2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80123e6:	eef0 7a40 	vmov.f32	s15, s0
 80123ea:	d310      	bcc.n	801240e <atanf+0x36>
 80123ec:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80123f0:	d904      	bls.n	80123fc <atanf+0x24>
 80123f2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80123f6:	eeb0 0a67 	vmov.f32	s0, s15
 80123fa:	bd38      	pop	{r3, r4, r5, pc}
 80123fc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8012534 <atanf+0x15c>
 8012400:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8012538 <atanf+0x160>
 8012404:	2d00      	cmp	r5, #0
 8012406:	bfc8      	it	gt
 8012408:	eef0 7a47 	vmovgt.f32	s15, s14
 801240c:	e7f3      	b.n	80123f6 <atanf+0x1e>
 801240e:	4b4b      	ldr	r3, [pc, #300]	@ (801253c <atanf+0x164>)
 8012410:	429c      	cmp	r4, r3
 8012412:	d810      	bhi.n	8012436 <atanf+0x5e>
 8012414:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8012418:	d20a      	bcs.n	8012430 <atanf+0x58>
 801241a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8012540 <atanf+0x168>
 801241e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012426:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801242a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801242e:	dce2      	bgt.n	80123f6 <atanf+0x1e>
 8012430:	f04f 33ff 	mov.w	r3, #4294967295
 8012434:	e013      	b.n	801245e <atanf+0x86>
 8012436:	f7ff fe51 	bl	80120dc <fabsf>
 801243a:	4b42      	ldr	r3, [pc, #264]	@ (8012544 <atanf+0x16c>)
 801243c:	429c      	cmp	r4, r3
 801243e:	d84f      	bhi.n	80124e0 <atanf+0x108>
 8012440:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8012444:	429c      	cmp	r4, r3
 8012446:	d841      	bhi.n	80124cc <atanf+0xf4>
 8012448:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801244c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012450:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012454:	2300      	movs	r3, #0
 8012456:	ee30 0a27 	vadd.f32	s0, s0, s15
 801245a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801245e:	1c5a      	adds	r2, r3, #1
 8012460:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012464:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012548 <atanf+0x170>
 8012468:	eddf 5a38 	vldr	s11, [pc, #224]	@ 801254c <atanf+0x174>
 801246c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8012550 <atanf+0x178>
 8012470:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012474:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012478:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8012554 <atanf+0x17c>
 801247c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012480:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012558 <atanf+0x180>
 8012484:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012488:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801255c <atanf+0x184>
 801248c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012490:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8012560 <atanf+0x188>
 8012494:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012498:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8012564 <atanf+0x18c>
 801249c:	eea6 5a87 	vfma.f32	s10, s13, s14
 80124a0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012568 <atanf+0x190>
 80124a4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80124a8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 801256c <atanf+0x194>
 80124ac:	eea7 5a26 	vfma.f32	s10, s14, s13
 80124b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8012570 <atanf+0x198>
 80124b4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80124b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80124bc:	eea5 7a86 	vfma.f32	s14, s11, s12
 80124c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80124c4:	d121      	bne.n	801250a <atanf+0x132>
 80124c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80124ca:	e794      	b.n	80123f6 <atanf+0x1e>
 80124cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80124d0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80124d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80124d8:	2301      	movs	r3, #1
 80124da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80124de:	e7be      	b.n	801245e <atanf+0x86>
 80124e0:	4b24      	ldr	r3, [pc, #144]	@ (8012574 <atanf+0x19c>)
 80124e2:	429c      	cmp	r4, r3
 80124e4:	d80b      	bhi.n	80124fe <atanf+0x126>
 80124e6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80124ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80124ee:	eea0 7a27 	vfma.f32	s14, s0, s15
 80124f2:	2302      	movs	r3, #2
 80124f4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80124f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80124fc:	e7af      	b.n	801245e <atanf+0x86>
 80124fe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012502:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012506:	2303      	movs	r3, #3
 8012508:	e7a9      	b.n	801245e <atanf+0x86>
 801250a:	4a1b      	ldr	r2, [pc, #108]	@ (8012578 <atanf+0x1a0>)
 801250c:	491b      	ldr	r1, [pc, #108]	@ (801257c <atanf+0x1a4>)
 801250e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012512:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012516:	edd3 6a00 	vldr	s13, [r3]
 801251a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801251e:	2d00      	cmp	r5, #0
 8012520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012524:	edd2 7a00 	vldr	s15, [r2]
 8012528:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801252c:	bfb8      	it	lt
 801252e:	eef1 7a67 	vneglt.f32	s15, s15
 8012532:	e760      	b.n	80123f6 <atanf+0x1e>
 8012534:	bfc90fdb 	.word	0xbfc90fdb
 8012538:	3fc90fdb 	.word	0x3fc90fdb
 801253c:	3edfffff 	.word	0x3edfffff
 8012540:	7149f2ca 	.word	0x7149f2ca
 8012544:	3f97ffff 	.word	0x3f97ffff
 8012548:	3c8569d7 	.word	0x3c8569d7
 801254c:	3d4bda59 	.word	0x3d4bda59
 8012550:	bd6ef16b 	.word	0xbd6ef16b
 8012554:	3d886b35 	.word	0x3d886b35
 8012558:	3dba2e6e 	.word	0x3dba2e6e
 801255c:	3e124925 	.word	0x3e124925
 8012560:	3eaaaaab 	.word	0x3eaaaaab
 8012564:	bd15a221 	.word	0xbd15a221
 8012568:	bd9d8795 	.word	0xbd9d8795
 801256c:	bde38e38 	.word	0xbde38e38
 8012570:	be4ccccd 	.word	0xbe4ccccd
 8012574:	401bffff 	.word	0x401bffff
 8012578:	080129b0 	.word	0x080129b0
 801257c:	080129a0 	.word	0x080129a0

08012580 <_init>:
 8012580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012582:	bf00      	nop
 8012584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012586:	bc08      	pop	{r3}
 8012588:	469e      	mov	lr, r3
 801258a:	4770      	bx	lr

0801258c <_fini>:
 801258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801258e:	bf00      	nop
 8012590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012592:	bc08      	pop	{r3}
 8012594:	469e      	mov	lr, r3
 8012596:	4770      	bx	lr
